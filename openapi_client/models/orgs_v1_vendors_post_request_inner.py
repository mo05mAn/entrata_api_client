# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.get_invoices_r1 import GetInvoicesR1
from openapi_client.models.get_invoices_r2 import GetInvoicesR2
from openapi_client.models.get_po_receiving_records import GetPoReceivingRecords
from openapi_client.models.get_purchase_orders import GetPurchaseOrders
from openapi_client.models.get_tax_form_data import GetTaxFormData
from openapi_client.models.get_vendor_locations import GetVendorLocations
from openapi_client.models.get_vendor_pick_lists import GetVendorPickLists
from openapi_client.models.get_vendors import GetVendors
from openapi_client.models.mark_invoices_exported import MarkInvoicesExported
from openapi_client.models.send_invoices_r1 import SendInvoicesR1
from openapi_client.models.send_invoices_r2 import SendInvoicesR2
from openapi_client.models.send_purchase_orders import SendPurchaseOrders
from openapi_client.models.send_vendors import SendVendors
from openapi_client.models.update_invoices import UpdateInvoices
from openapi_client.models.update_vendors import UpdateVendors
from openapi_client.models.void_ap_payments import VoidApPayments
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1VENDORSPOSTREQUESTINNER_ONE_OF_SCHEMAS = ["GetInvoicesR1", "GetInvoicesR2", "GetPoReceivingRecords", "GetPurchaseOrders", "GetTaxFormData", "GetVendorLocations", "GetVendorPickLists", "GetVendors", "MarkInvoicesExported", "SendInvoicesR1", "SendInvoicesR2", "SendPurchaseOrders", "SendVendors", "UpdateInvoices", "UpdateVendors", "VoidApPayments"]

class OrgsV1VendorsPostRequestInner(BaseModel):
    """
    OrgsV1VendorsPostRequestInner
    """
    # data type: GetInvoicesR1
    oneof_schema_1_validator: Optional[GetInvoicesR1] = None
    # data type: GetInvoicesR2
    oneof_schema_2_validator: Optional[GetInvoicesR2] = None
    # data type: GetPoReceivingRecords
    oneof_schema_3_validator: Optional[GetPoReceivingRecords] = None
    # data type: GetPurchaseOrders
    oneof_schema_4_validator: Optional[GetPurchaseOrders] = None
    # data type: GetTaxFormData
    oneof_schema_5_validator: Optional[GetTaxFormData] = None
    # data type: GetVendorLocations
    oneof_schema_6_validator: Optional[GetVendorLocations] = None
    # data type: GetVendorPickLists
    oneof_schema_7_validator: Optional[GetVendorPickLists] = None
    # data type: GetVendors
    oneof_schema_8_validator: Optional[GetVendors] = None
    # data type: MarkInvoicesExported
    oneof_schema_9_validator: Optional[MarkInvoicesExported] = None
    # data type: SendInvoicesR1
    oneof_schema_10_validator: Optional[SendInvoicesR1] = None
    # data type: SendInvoicesR2
    oneof_schema_11_validator: Optional[SendInvoicesR2] = None
    # data type: SendPurchaseOrders
    oneof_schema_12_validator: Optional[SendPurchaseOrders] = None
    # data type: SendVendors
    oneof_schema_13_validator: Optional[SendVendors] = None
    # data type: UpdateInvoices
    oneof_schema_14_validator: Optional[UpdateInvoices] = None
    # data type: UpdateVendors
    oneof_schema_15_validator: Optional[UpdateVendors] = None
    # data type: VoidApPayments
    oneof_schema_16_validator: Optional[VoidApPayments] = None
    actual_instance: Optional[Union[GetInvoicesR1, GetInvoicesR2, GetPoReceivingRecords, GetPurchaseOrders, GetTaxFormData, GetVendorLocations, GetVendorPickLists, GetVendors, MarkInvoicesExported, SendInvoicesR1, SendInvoicesR2, SendPurchaseOrders, SendVendors, UpdateInvoices, UpdateVendors, VoidApPayments]] = None
    one_of_schemas: Set[str] = { "GetInvoicesR1", "GetInvoicesR2", "GetPoReceivingRecords", "GetPurchaseOrders", "GetTaxFormData", "GetVendorLocations", "GetVendorPickLists", "GetVendors", "MarkInvoicesExported", "SendInvoicesR1", "SendInvoicesR2", "SendPurchaseOrders", "SendVendors", "UpdateInvoices", "UpdateVendors", "VoidApPayments" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1VendorsPostRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetInvoicesR1
        if not isinstance(v, GetInvoicesR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetInvoicesR1`")
        else:
            match += 1
        # validate data type: GetInvoicesR2
        if not isinstance(v, GetInvoicesR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetInvoicesR2`")
        else:
            match += 1
        # validate data type: GetPoReceivingRecords
        if not isinstance(v, GetPoReceivingRecords):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPoReceivingRecords`")
        else:
            match += 1
        # validate data type: GetPurchaseOrders
        if not isinstance(v, GetPurchaseOrders):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPurchaseOrders`")
        else:
            match += 1
        # validate data type: GetTaxFormData
        if not isinstance(v, GetTaxFormData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTaxFormData`")
        else:
            match += 1
        # validate data type: GetVendorLocations
        if not isinstance(v, GetVendorLocations):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetVendorLocations`")
        else:
            match += 1
        # validate data type: GetVendorPickLists
        if not isinstance(v, GetVendorPickLists):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetVendorPickLists`")
        else:
            match += 1
        # validate data type: GetVendors
        if not isinstance(v, GetVendors):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetVendors`")
        else:
            match += 1
        # validate data type: MarkInvoicesExported
        if not isinstance(v, MarkInvoicesExported):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarkInvoicesExported`")
        else:
            match += 1
        # validate data type: SendInvoicesR1
        if not isinstance(v, SendInvoicesR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendInvoicesR1`")
        else:
            match += 1
        # validate data type: SendInvoicesR2
        if not isinstance(v, SendInvoicesR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendInvoicesR2`")
        else:
            match += 1
        # validate data type: SendPurchaseOrders
        if not isinstance(v, SendPurchaseOrders):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendPurchaseOrders`")
        else:
            match += 1
        # validate data type: SendVendors
        if not isinstance(v, SendVendors):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendVendors`")
        else:
            match += 1
        # validate data type: UpdateInvoices
        if not isinstance(v, UpdateInvoices):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateInvoices`")
        else:
            match += 1
        # validate data type: UpdateVendors
        if not isinstance(v, UpdateVendors):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateVendors`")
        else:
            match += 1
        # validate data type: VoidApPayments
        if not isinstance(v, VoidApPayments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoidApPayments`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1VendorsPostRequestInner with oneOf schemas: GetInvoicesR1, GetInvoicesR2, GetPoReceivingRecords, GetPurchaseOrders, GetTaxFormData, GetVendorLocations, GetVendorPickLists, GetVendors, MarkInvoicesExported, SendInvoicesR1, SendInvoicesR2, SendPurchaseOrders, SendVendors, UpdateInvoices, UpdateVendors, VoidApPayments. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1VendorsPostRequestInner with oneOf schemas: GetInvoicesR1, GetInvoicesR2, GetPoReceivingRecords, GetPurchaseOrders, GetTaxFormData, GetVendorLocations, GetVendorPickLists, GetVendors, MarkInvoicesExported, SendInvoicesR1, SendInvoicesR2, SendPurchaseOrders, SendVendors, UpdateInvoices, UpdateVendors, VoidApPayments. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetInvoicesR1
        try:
            instance.actual_instance = GetInvoicesR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetInvoicesR2
        try:
            instance.actual_instance = GetInvoicesR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPoReceivingRecords
        try:
            instance.actual_instance = GetPoReceivingRecords.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPurchaseOrders
        try:
            instance.actual_instance = GetPurchaseOrders.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTaxFormData
        try:
            instance.actual_instance = GetTaxFormData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetVendorLocations
        try:
            instance.actual_instance = GetVendorLocations.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetVendorPickLists
        try:
            instance.actual_instance = GetVendorPickLists.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetVendors
        try:
            instance.actual_instance = GetVendors.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkInvoicesExported
        try:
            instance.actual_instance = MarkInvoicesExported.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendInvoicesR1
        try:
            instance.actual_instance = SendInvoicesR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendInvoicesR2
        try:
            instance.actual_instance = SendInvoicesR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendPurchaseOrders
        try:
            instance.actual_instance = SendPurchaseOrders.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendVendors
        try:
            instance.actual_instance = SendVendors.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateInvoices
        try:
            instance.actual_instance = UpdateInvoices.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateVendors
        try:
            instance.actual_instance = UpdateVendors.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoidApPayments
        try:
            instance.actual_instance = VoidApPayments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1VendorsPostRequestInner with oneOf schemas: GetInvoicesR1, GetInvoicesR2, GetPoReceivingRecords, GetPurchaseOrders, GetTaxFormData, GetVendorLocations, GetVendorPickLists, GetVendors, MarkInvoicesExported, SendInvoicesR1, SendInvoicesR2, SendPurchaseOrders, SendVendors, UpdateInvoices, UpdateVendors, VoidApPayments. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1VendorsPostRequestInner with oneOf schemas: GetInvoicesR1, GetInvoicesR2, GetPoReceivingRecords, GetPurchaseOrders, GetTaxFormData, GetVendorLocations, GetVendorPickLists, GetVendors, MarkInvoicesExported, SendInvoicesR1, SendInvoicesR2, SendPurchaseOrders, SendVendors, UpdateInvoices, UpdateVendors, VoidApPayments. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetInvoicesR1, GetInvoicesR2, GetPoReceivingRecords, GetPurchaseOrders, GetTaxFormData, GetVendorLocations, GetVendorPickLists, GetVendors, MarkInvoicesExported, SendInvoicesR1, SendInvoicesR2, SendPurchaseOrders, SendVendors, UpdateInvoices, UpdateVendors, VoidApPayments]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



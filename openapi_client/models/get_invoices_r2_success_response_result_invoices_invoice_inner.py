# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_invoices_r2_success_response_result_invoices_invoice_inner_account import GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerAccount
from openapi_client.models.get_invoices_r2_success_response_result_invoices_invoice_inner_invoice_payments import GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerInvoicePayments
from openapi_client.models.get_invoices_r2_success_response_result_invoices_invoice_inner_line_items import GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerLineItems
from openapi_client.models.get_invoices_r2_success_response_result_invoices_invoice_inner_remittance import GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerRemittance
from openapi_client.models.get_invoices_r2_success_response_result_invoices_invoice_inner_vendor import GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerVendor
from typing import Optional, Set
from typing_extensions import Self

class GetInvoicesR2SuccessResponseResultInvoicesInvoiceInner(BaseModel):
    """
    GetInvoicesR2SuccessResponseResultInvoicesInvoiceInner
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the invoice")
    is_on_hold: StrictStr = Field(description="Flag indicating whether the invoice is on hold", alias="isOnHold")
    invoice_number: StrictStr = Field(description="Invoice number", alias="invoiceNumber")
    invoice_type: StrictStr = Field(description="Type of the invoice", alias="invoiceType")
    var_date: StrictStr = Field(description="Date the invoice was created", alias="date")
    post_month: StrictStr = Field(description="Month when the invoice was posted", alias="postMonth")
    post_status: Optional[StrictStr] = Field(default=None, description="Status of the invoice posting", alias="postStatus")
    reversal_invoice_id: Optional[StrictInt] = Field(default=None, description="ID of the reversal invoice, if applicable", alias="reversalInvoiceId")
    due_date: StrictStr = Field(description="Due date of the invoice", alias="dueDate")
    post_date: Optional[StrictStr] = Field(default=None, description="Date when the invoice was posted", alias="postDate")
    invoice_note: Optional[StrictStr] = Field(default=None, description="Note related to the invoice", alias="invoiceNote")
    routing_tag_id: Optional[StrictStr] = Field(default=None, description="Routing tag identifier", alias="routingTagId")
    routing_tag_name: Optional[StrictStr] = Field(default=None, description="Name of the routing tag", alias="routingTagName")
    remittance: GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerRemittance
    vendor: GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerVendor
    account: Optional[GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerAccount] = None
    invoice_payments: GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerInvoicePayments = Field(alias="invoicePayments")
    sub_total: Optional[StrictStr] = Field(default=None, description="Subtotal of the invoice", alias="subTotal")
    tax_amount: Optional[StrictStr] = Field(default=None, description="Tax amount for the invoice", alias="taxAmount")
    shipping_amount: Optional[StrictStr] = Field(default=None, description="Shipping amount for the invoice", alias="shippingAmount")
    discount_amount: Optional[StrictStr] = Field(default=None, description="Discount amount on the invoice", alias="discountAmount")
    amount: StrictStr = Field(description="Total amount for the invoice")
    amount_due: StrictStr = Field(description="Amount due for the invoice", alias="amountDue")
    note: Optional[StrictStr] = Field(default=None, description="Invoice note")
    is_posted: StrictStr = Field(description="Flag indicating if the invoice has been posted", alias="isPosted")
    retention: Optional[StrictStr] = Field(default=None, description="Retention amount for the invoice")
    line_items: GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerLineItems = Field(alias="lineItems")
    __properties: ClassVar[List[str]] = ["id", "isOnHold", "invoiceNumber", "invoiceType", "date", "postMonth", "postStatus", "reversalInvoiceId", "dueDate", "postDate", "invoiceNote", "routingTagId", "routingTagName", "remittance", "vendor", "account", "invoicePayments", "subTotal", "taxAmount", "shippingAmount", "discountAmount", "amount", "amountDue", "note", "isPosted", "retention", "lineItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInvoicesR2SuccessResponseResultInvoicesInvoiceInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remittance
        if self.remittance:
            _dict['remittance'] = self.remittance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_payments
        if self.invoice_payments:
            _dict['invoicePayments'] = self.invoice_payments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of line_items
        if self.line_items:
            _dict['lineItems'] = self.line_items.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInvoicesR2SuccessResponseResultInvoicesInvoiceInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "isOnHold": obj.get("isOnHold"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "invoiceType": obj.get("invoiceType"),
            "date": obj.get("date"),
            "postMonth": obj.get("postMonth"),
            "postStatus": obj.get("postStatus"),
            "reversalInvoiceId": obj.get("reversalInvoiceId"),
            "dueDate": obj.get("dueDate"),
            "postDate": obj.get("postDate"),
            "invoiceNote": obj.get("invoiceNote"),
            "routingTagId": obj.get("routingTagId"),
            "routingTagName": obj.get("routingTagName"),
            "remittance": GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerRemittance.from_dict(obj["remittance"]) if obj.get("remittance") is not None else None,
            "vendor": GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "account": GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "invoicePayments": GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerInvoicePayments.from_dict(obj["invoicePayments"]) if obj.get("invoicePayments") is not None else None,
            "subTotal": obj.get("subTotal"),
            "taxAmount": obj.get("taxAmount"),
            "shippingAmount": obj.get("shippingAmount"),
            "discountAmount": obj.get("discountAmount"),
            "amount": obj.get("amount"),
            "amountDue": obj.get("amountDue"),
            "note": obj.get("note"),
            "isPosted": obj.get("isPosted"),
            "retention": obj.get("retention"),
            "lineItems": GetInvoicesR2SuccessResponseResultInvoicesInvoiceInnerLineItems.from_dict(obj["lineItems"]) if obj.get("lineItems") is not None else None
        })
        return _obj



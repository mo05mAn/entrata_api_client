# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InsertPricingMethodParams(BaseModel):
    """
    InsertPricingMethodParams
    """ # noqa: E501
    pricing_level_id: StrictInt = Field(description="This is a required field. This field accepts single value. Pricing level has four possible values, 1: property, 2: floor plan 3: Unit type 4: Unit space.", alias="pricingLevelId")
    pricing_level_reference_id: StrictInt = Field(description="This is a required field. This field accepts single value. This is Entrata`s record id depending on #pricingLevelId. E.g. If pric ingLevelId = 4 then pricingLevelReferenceId needs to be unit space id.", alias="pricingLevelReferenceId")
    charge_usage_id: StrictInt = Field(description="This is a required field. This field accepts single value. This helps to differentiate pricing usage. 1. Base 2: Amenity 3: Pet 4: Add-Ons 5: Risk Premium 7: Maintenance", alias="chargeUsageId")
    charge_usage_reference_id: StrictInt = Field(description="This is a required field. This field accepts single value. This value needs to set if needs to update pricing any other than base rent. E.g if want to update amenity rent then chargeUsageReferenceId should amenity id. In the case of base pricing, it needs to be 0.", alias="chargeUsageReferenceId")
    is_renewal: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Just to specify if it is renewal rent.", alias="isRenewal")
    charge_timing_id: StrictInt = Field(description="This is a required field. This field accepts single value. This explains when charge suppose to apply [charge trigger timing]. E .g. There are a number of possible values but common is 307: Monthly 202: Move In 206: Move Out 102: Application Completed", alias="chargeTimingId")
    charge_code_type_id: StrictInt = Field(description="This is a required field. This field accepts single value. This explains charge code types. 1: Payment 2: Rent 3: Other Income 7: Deposit", alias="chargeCodeTypeId")
    charge_code_id: StrictInt = Field(description="This is a required field. This field accepts single value. This is Entrata charge code id which we want to use.", alias="chargeCodeId")
    lease_term_months: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Most of the cases it will be zero but if the property has the setup to have term wise pricing/rent then you can send the different pricing f or different terms. Zero means single value for all lease terms.", alias="leaseTermMonths")
    lease_start_range_start: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This nodes allows to send different rent amount for different move in dates but with same intervals. Refer Property setting: Price By Lease Start Range. E.g Property has pricing setup to have 3 days interval pricing then data can looks like, leaseStartRangeStart:0 leaseStartRa ngeEnd:2 amount:700 Zero represents current date or unit`s available on the date [if available on a date is in future]. If sending \"isRenewal\" as true this value should always be sent as 0", alias="leaseStartRangeStart")
    lease_start_range_end: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This nodes allows to send different rent amount for different move in dates but with the same intervals. E.g Property has pricing setup to have 3 days interval pricing then data can look like, leaseStartRange Start:0 leaseStartRangeEnd:2 amount:700. If sending \"isRenewal\" as true this value should always be sent as 0", alias="leaseStartRangeEnd")
    amount: StrictInt = Field(description="This is a required field. This field accepts single value. Rate Amount.")
    lease_term_name: StrictStr = Field(description="This is a required field. This field accepts single value. If there are multiple lease terms with same length then this node is m andatory.", alias="leaseTermName")
    __properties: ClassVar[List[str]] = ["pricingLevelId", "pricingLevelReferenceId", "chargeUsageId", "chargeUsageReferenceId", "isRenewal", "chargeTimingId", "chargeCodeTypeId", "chargeCodeId", "leaseTermMonths", "leaseStartRangeStart", "leaseStartRangeEnd", "amount", "leaseTermName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsertPricingMethodParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsertPricingMethodParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pricingLevelId": obj.get("pricingLevelId"),
            "pricingLevelReferenceId": obj.get("pricingLevelReferenceId"),
            "chargeUsageId": obj.get("chargeUsageId"),
            "chargeUsageReferenceId": obj.get("chargeUsageReferenceId"),
            "isRenewal": obj.get("isRenewal"),
            "chargeTimingId": obj.get("chargeTimingId"),
            "chargeCodeTypeId": obj.get("chargeCodeTypeId"),
            "chargeCodeId": obj.get("chargeCodeId"),
            "leaseTermMonths": obj.get("leaseTermMonths"),
            "leaseStartRangeStart": obj.get("leaseStartRangeStart"),
            "leaseStartRangeEnd": obj.get("leaseStartRangeEnd"),
            "amount": obj.get("amount"),
            "leaseTermName": obj.get("leaseTermName")
        })
        return _obj



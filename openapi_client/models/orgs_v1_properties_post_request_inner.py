# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.delete_property_media import DeletePropertyMedia
from openapi_client.models.get_amenity_reservations import GetAmenityReservations
from openapi_client.models.get_calendar_availability_r1 import GetCalendarAvailabilityR1
from openapi_client.models.get_calendar_availability_r2 import GetCalendarAvailabilityR2
from openapi_client.models.get_floor_plans import GetFloorPlans
from openapi_client.models.get_pet_types import GetPetTypes
from openapi_client.models.get_phone_number import GetPhoneNumber
from openapi_client.models.get_properties import GetProperties
from openapi_client.models.get_property_add_ons import GetPropertyAddOns
from openapi_client.models.get_property_announcements import GetPropertyAnnouncements
from openapi_client.models.get_property_media import GetPropertyMedia
from openapi_client.models.get_property_pick_lists_r1 import GetPropertyPickListsR1
from openapi_client.models.get_property_pick_lists_r2 import GetPropertyPickListsR2
from openapi_client.models.get_rentable_items import GetRentableItems
from openapi_client.models.get_reservable_amenities import GetReservableAmenities
from openapi_client.models.get_websites import GetWebsites
from openapi_client.models.send_floorplans import SendFloorplans
from openapi_client.models.send_property_media import SendPropertyMedia
from openapi_client.models.send_rentable_items import SendRentableItems
from openapi_client.models.update_property_media import UpdatePropertyMedia
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1PROPERTIESPOSTREQUESTINNER_ONE_OF_SCHEMAS = ["DeletePropertyMedia", "GetAmenityReservations", "GetCalendarAvailabilityR1", "GetCalendarAvailabilityR2", "GetFloorPlans", "GetPetTypes", "GetPhoneNumber", "GetProperties", "GetPropertyAddOns", "GetPropertyAnnouncements", "GetPropertyMedia", "GetPropertyPickListsR1", "GetPropertyPickListsR2", "GetRentableItems", "GetReservableAmenities", "GetWebsites", "SendFloorplans", "SendPropertyMedia", "SendRentableItems", "UpdatePropertyMedia"]

class OrgsV1PropertiesPostRequestInner(BaseModel):
    """
    OrgsV1PropertiesPostRequestInner
    """
    # data type: GetAmenityReservations
    oneof_schema_1_validator: Optional[GetAmenityReservations] = None
    # data type: GetCalendarAvailabilityR1
    oneof_schema_2_validator: Optional[GetCalendarAvailabilityR1] = None
    # data type: GetCalendarAvailabilityR2
    oneof_schema_3_validator: Optional[GetCalendarAvailabilityR2] = None
    # data type: GetFloorPlans
    oneof_schema_4_validator: Optional[GetFloorPlans] = None
    # data type: GetPetTypes
    oneof_schema_5_validator: Optional[GetPetTypes] = None
    # data type: GetProperties
    oneof_schema_6_validator: Optional[GetProperties] = None
    # data type: GetPropertyAddOns
    oneof_schema_7_validator: Optional[GetPropertyAddOns] = None
    # data type: GetPropertyAnnouncements
    oneof_schema_8_validator: Optional[GetPropertyAnnouncements] = None
    # data type: GetPropertyPickListsR1
    oneof_schema_9_validator: Optional[GetPropertyPickListsR1] = None
    # data type: GetPropertyPickListsR2
    oneof_schema_10_validator: Optional[GetPropertyPickListsR2] = None
    # data type: GetRentableItems
    oneof_schema_11_validator: Optional[GetRentableItems] = None
    # data type: GetReservableAmenities
    oneof_schema_12_validator: Optional[GetReservableAmenities] = None
    # data type: GetWebsites
    oneof_schema_13_validator: Optional[GetWebsites] = None
    # data type: SendFloorplans
    oneof_schema_14_validator: Optional[SendFloorplans] = None
    # data type: SendRentableItems
    oneof_schema_15_validator: Optional[SendRentableItems] = None
    # data type: GetPropertyMedia
    oneof_schema_16_validator: Optional[GetPropertyMedia] = None
    # data type: SendPropertyMedia
    oneof_schema_17_validator: Optional[SendPropertyMedia] = None
    # data type: UpdatePropertyMedia
    oneof_schema_18_validator: Optional[UpdatePropertyMedia] = None
    # data type: DeletePropertyMedia
    oneof_schema_19_validator: Optional[DeletePropertyMedia] = None
    # data type: GetPhoneNumber
    oneof_schema_20_validator: Optional[GetPhoneNumber] = None
    actual_instance: Optional[Union[DeletePropertyMedia, GetAmenityReservations, GetCalendarAvailabilityR1, GetCalendarAvailabilityR2, GetFloorPlans, GetPetTypes, GetPhoneNumber, GetProperties, GetPropertyAddOns, GetPropertyAnnouncements, GetPropertyMedia, GetPropertyPickListsR1, GetPropertyPickListsR2, GetRentableItems, GetReservableAmenities, GetWebsites, SendFloorplans, SendPropertyMedia, SendRentableItems, UpdatePropertyMedia]] = None
    one_of_schemas: Set[str] = { "DeletePropertyMedia", "GetAmenityReservations", "GetCalendarAvailabilityR1", "GetCalendarAvailabilityR2", "GetFloorPlans", "GetPetTypes", "GetPhoneNumber", "GetProperties", "GetPropertyAddOns", "GetPropertyAnnouncements", "GetPropertyMedia", "GetPropertyPickListsR1", "GetPropertyPickListsR2", "GetRentableItems", "GetReservableAmenities", "GetWebsites", "SendFloorplans", "SendPropertyMedia", "SendRentableItems", "UpdatePropertyMedia" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1PropertiesPostRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetAmenityReservations
        if not isinstance(v, GetAmenityReservations):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetAmenityReservations`")
        else:
            match += 1
        # validate data type: GetCalendarAvailabilityR1
        if not isinstance(v, GetCalendarAvailabilityR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetCalendarAvailabilityR1`")
        else:
            match += 1
        # validate data type: GetCalendarAvailabilityR2
        if not isinstance(v, GetCalendarAvailabilityR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetCalendarAvailabilityR2`")
        else:
            match += 1
        # validate data type: GetFloorPlans
        if not isinstance(v, GetFloorPlans):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetFloorPlans`")
        else:
            match += 1
        # validate data type: GetPetTypes
        if not isinstance(v, GetPetTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPetTypes`")
        else:
            match += 1
        # validate data type: GetProperties
        if not isinstance(v, GetProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetProperties`")
        else:
            match += 1
        # validate data type: GetPropertyAddOns
        if not isinstance(v, GetPropertyAddOns):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyAddOns`")
        else:
            match += 1
        # validate data type: GetPropertyAnnouncements
        if not isinstance(v, GetPropertyAnnouncements):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyAnnouncements`")
        else:
            match += 1
        # validate data type: GetPropertyPickListsR1
        if not isinstance(v, GetPropertyPickListsR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyPickListsR1`")
        else:
            match += 1
        # validate data type: GetPropertyPickListsR2
        if not isinstance(v, GetPropertyPickListsR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyPickListsR2`")
        else:
            match += 1
        # validate data type: GetRentableItems
        if not isinstance(v, GetRentableItems):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetRentableItems`")
        else:
            match += 1
        # validate data type: GetReservableAmenities
        if not isinstance(v, GetReservableAmenities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetReservableAmenities`")
        else:
            match += 1
        # validate data type: GetWebsites
        if not isinstance(v, GetWebsites):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWebsites`")
        else:
            match += 1
        # validate data type: SendFloorplans
        if not isinstance(v, SendFloorplans):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendFloorplans`")
        else:
            match += 1
        # validate data type: SendRentableItems
        if not isinstance(v, SendRentableItems):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRentableItems`")
        else:
            match += 1
        # validate data type: GetPropertyMedia
        if not isinstance(v, GetPropertyMedia):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyMedia`")
        else:
            match += 1
        # validate data type: SendPropertyMedia
        if not isinstance(v, SendPropertyMedia):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendPropertyMedia`")
        else:
            match += 1
        # validate data type: UpdatePropertyMedia
        if not isinstance(v, UpdatePropertyMedia):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdatePropertyMedia`")
        else:
            match += 1
        # validate data type: DeletePropertyMedia
        if not isinstance(v, DeletePropertyMedia):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeletePropertyMedia`")
        else:
            match += 1
        # validate data type: GetPhoneNumber
        if not isinstance(v, GetPhoneNumber):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPhoneNumber`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1PropertiesPostRequestInner with oneOf schemas: DeletePropertyMedia, GetAmenityReservations, GetCalendarAvailabilityR1, GetCalendarAvailabilityR2, GetFloorPlans, GetPetTypes, GetPhoneNumber, GetProperties, GetPropertyAddOns, GetPropertyAnnouncements, GetPropertyMedia, GetPropertyPickListsR1, GetPropertyPickListsR2, GetRentableItems, GetReservableAmenities, GetWebsites, SendFloorplans, SendPropertyMedia, SendRentableItems, UpdatePropertyMedia. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1PropertiesPostRequestInner with oneOf schemas: DeletePropertyMedia, GetAmenityReservations, GetCalendarAvailabilityR1, GetCalendarAvailabilityR2, GetFloorPlans, GetPetTypes, GetPhoneNumber, GetProperties, GetPropertyAddOns, GetPropertyAnnouncements, GetPropertyMedia, GetPropertyPickListsR1, GetPropertyPickListsR2, GetRentableItems, GetReservableAmenities, GetWebsites, SendFloorplans, SendPropertyMedia, SendRentableItems, UpdatePropertyMedia. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetAmenityReservations
        try:
            instance.actual_instance = GetAmenityReservations.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetCalendarAvailabilityR1
        try:
            instance.actual_instance = GetCalendarAvailabilityR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetCalendarAvailabilityR2
        try:
            instance.actual_instance = GetCalendarAvailabilityR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetFloorPlans
        try:
            instance.actual_instance = GetFloorPlans.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPetTypes
        try:
            instance.actual_instance = GetPetTypes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetProperties
        try:
            instance.actual_instance = GetProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyAddOns
        try:
            instance.actual_instance = GetPropertyAddOns.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyAnnouncements
        try:
            instance.actual_instance = GetPropertyAnnouncements.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyPickListsR1
        try:
            instance.actual_instance = GetPropertyPickListsR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyPickListsR2
        try:
            instance.actual_instance = GetPropertyPickListsR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetRentableItems
        try:
            instance.actual_instance = GetRentableItems.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetReservableAmenities
        try:
            instance.actual_instance = GetReservableAmenities.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWebsites
        try:
            instance.actual_instance = GetWebsites.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendFloorplans
        try:
            instance.actual_instance = SendFloorplans.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRentableItems
        try:
            instance.actual_instance = SendRentableItems.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyMedia
        try:
            instance.actual_instance = GetPropertyMedia.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendPropertyMedia
        try:
            instance.actual_instance = SendPropertyMedia.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdatePropertyMedia
        try:
            instance.actual_instance = UpdatePropertyMedia.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeletePropertyMedia
        try:
            instance.actual_instance = DeletePropertyMedia.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPhoneNumber
        try:
            instance.actual_instance = GetPhoneNumber.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1PropertiesPostRequestInner with oneOf schemas: DeletePropertyMedia, GetAmenityReservations, GetCalendarAvailabilityR1, GetCalendarAvailabilityR2, GetFloorPlans, GetPetTypes, GetPhoneNumber, GetProperties, GetPropertyAddOns, GetPropertyAnnouncements, GetPropertyMedia, GetPropertyPickListsR1, GetPropertyPickListsR2, GetRentableItems, GetReservableAmenities, GetWebsites, SendFloorplans, SendPropertyMedia, SendRentableItems, UpdatePropertyMedia. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1PropertiesPostRequestInner with oneOf schemas: DeletePropertyMedia, GetAmenityReservations, GetCalendarAvailabilityR1, GetCalendarAvailabilityR2, GetFloorPlans, GetPetTypes, GetPhoneNumber, GetProperties, GetPropertyAddOns, GetPropertyAnnouncements, GetPropertyMedia, GetPropertyPickListsR1, GetPropertyPickListsR2, GetRentableItems, GetReservableAmenities, GetWebsites, SendFloorplans, SendPropertyMedia, SendRentableItems, UpdatePropertyMedia. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DeletePropertyMedia, GetAmenityReservations, GetCalendarAvailabilityR1, GetCalendarAvailabilityR2, GetFloorPlans, GetPetTypes, GetPhoneNumber, GetProperties, GetPropertyAddOns, GetPropertyAnnouncements, GetPropertyMedia, GetPropertyPickListsR1, GetPropertyPickListsR2, GetRentableItems, GetReservableAmenities, GetWebsites, SendFloorplans, SendPropertyMedia, SendRentableItems, UpdatePropertyMedia]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



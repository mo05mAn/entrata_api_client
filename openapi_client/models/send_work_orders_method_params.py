# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SendWorkOrdersMethodParams(BaseModel):
    """
    SendWorkOrdersMethodParams
    """ # noqa: E501
    property_id: StrictInt = Field(description="This is a required field. This field accepts single value. Property Id", alias="propertyId")
    customer_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Customer Id", alias="customerId")
    lease_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Lease ID", alias="leaseId")
    unit_number: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Unit mumber", alias="unitNumber")
    customer_first_name: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Customer First Name", alias="customerFirstName")
    customer_last_name: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Customer Last Name", alias="customerLastName")
    main_phone_number: StrictInt = Field(description="This is a required field. This field accepts single value. Main contact phone number", alias="mainPhoneNumber")
    alt_phone_number: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Alternate contact phone number", alias="altPhoneNumber")
    email_address: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Email Address", alias="emailAddress")
    permission_to_enter: StrictInt = Field(description="This is a required field. This field accepts single value. Permission to enter", alias="permissionToEnter")
    maintenance_location_id: StrictInt = Field(description="This is a required field. This field accepts single value. Maintenance location", alias="maintenanceLocationId")
    maintenance_category_id: StrictInt = Field(description="This is a required field. This field accepts single value. Maintenance Category Id", alias="maintenanceCategoryId")
    maintenance_problem_id: StrictInt = Field(description="This is a required field. This field accepts single value. Maintenance problem", alias="maintenanceProblemId")
    sub_maintenance_problem_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. SubMaintenance problem", alias="subMaintenanceProblemId")
    maintenance_priority_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Maintenance Priority", alias="maintenancePriorityId")
    problem_description: StrictStr = Field(description="This is a required field. This field accepts single value. Problem Description", alias="problemDescription")
    pets_description: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Pets Description is required if the lease has pets or if permission t o enter is denied so that a reason why entry is not permitted can be e xplained or a pet warning given.", alias="petsDescription")
    building_name: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. buildingName", alias="buildingName")
    assigned_to: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. assignedTo", alias="assignedTo")
    scheduled_start_date_time: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. scheduledStartDateTime", alias="scheduledStartDateTime")
    scheduled_end_date_time: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. scheduledEndDateTime", alias="scheduledEndDateTime")
    due_date: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. While optional by default, dueDate could become required depending on a property setting.", alias="dueDate")
    is_floating_work_order: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value.", alias="isFloatingWorkOrder")
    priority_order_num: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Negative numbers not allowed. This parameter is not applicable to mos t clients and should not be used without first checking with Entrata.", alias="priorityOrderNum")
    __properties: ClassVar[List[str]] = ["propertyId", "customerId", "leaseId", "unitNumber", "customerFirstName", "customerLastName", "mainPhoneNumber", "altPhoneNumber", "emailAddress", "permissionToEnter", "maintenanceLocationId", "maintenanceCategoryId", "maintenanceProblemId", "subMaintenanceProblemId", "maintenancePriorityId", "problemDescription", "petsDescription", "buildingName", "assignedTo", "scheduledStartDateTime", "scheduledEndDateTime", "dueDate", "isFloatingWorkOrder", "priorityOrderNum"]

    @field_validator('permission_to_enter')
    def permission_to_enter_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('is_floating_work_order')
    def is_floating_work_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendWorkOrdersMethodParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendWorkOrdersMethodParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyId": obj.get("propertyId"),
            "customerId": obj.get("customerId"),
            "leaseId": obj.get("leaseId"),
            "unitNumber": obj.get("unitNumber"),
            "customerFirstName": obj.get("customerFirstName"),
            "customerLastName": obj.get("customerLastName"),
            "mainPhoneNumber": obj.get("mainPhoneNumber"),
            "altPhoneNumber": obj.get("altPhoneNumber"),
            "emailAddress": obj.get("emailAddress"),
            "permissionToEnter": obj.get("permissionToEnter"),
            "maintenanceLocationId": obj.get("maintenanceLocationId"),
            "maintenanceCategoryId": obj.get("maintenanceCategoryId"),
            "maintenanceProblemId": obj.get("maintenanceProblemId"),
            "subMaintenanceProblemId": obj.get("subMaintenanceProblemId"),
            "maintenancePriorityId": obj.get("maintenancePriorityId"),
            "problemDescription": obj.get("problemDescription"),
            "petsDescription": obj.get("petsDescription"),
            "buildingName": obj.get("buildingName"),
            "assignedTo": obj.get("assignedTo"),
            "scheduledStartDateTime": obj.get("scheduledStartDateTime"),
            "scheduledEndDateTime": obj.get("scheduledEndDateTime"),
            "dueDate": obj.get("dueDate"),
            "isFloatingWorkOrder": obj.get("isFloatingWorkOrder"),
            "priorityOrderNum": obj.get("priorityOrderNum")
        })
        return _obj



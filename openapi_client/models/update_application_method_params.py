# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateApplicationMethodParams(BaseModel):
    """
    UpdateApplicationMethodParams
    """ # noqa: E501
    application_id: StrictInt = Field(description="This is a required field. This field accepts single value. This node accepts application id which needs to be updated.", alias="applicationId")
    property_id: StrictInt = Field(description="This is a required field. This field accepts single value. This node accepts the property id.", alias="propertyId")
    application_status_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accept the status id.", alias="applicationStatusId")
    floorplan_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accept the associated floorplan id or the floorplan which ne eds to be associated with the application.", alias="floorplanId")
    unit_space_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accept the associated unit space id or the unit space which needs to be associated with the application.", alias="unitSpaceId")
    lease_term_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts the lease length.", alias="leaseTermId")
    leasing_agent_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts the associated leasing agent or the leasing agent wh ich needs to be updated.", alias="leasingAgentId")
    move_in_date: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts the move-in date. In ISO format as well.", alias="moveInDate")
    originating_lead_source_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts the lead source id.", alias="originatingLeadSourceId")
    id: Optional[StrictInt] = Field(default=None, description="  This is an optional field. This field accepts single value. This node accepts the applicants id.")
    first_name: Optional[StrictStr] = Field(default=None, description="  This is an optional field. This field accepts single value. This node accepts the applicants first name.", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="  This is an optional field. This field accepts single value. This node accepts applicants last name.", alias="lastName")
    maternal_name: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts applicants maternal name.", alias="maternalName")
    preferred_name: Optional[StrictStr] = Field(default=None, description="  This is an optional field. This field accepts single value. This node accepts applicants preferred name.", alias="preferredName")
    birth_date: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts applicants birth date. Supports ISO format.", alias="birthDate")
    customer_relationship_type_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts customer relationship id.", alias="customerRelationshipTypeId")
    email: Optional[StrictStr] = Field(default=None, description="  This is an optional field. This field accepts single value. This node accepts the applicants email.")
    phone_number_type_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts applicants phone number type id. This is condition al mandatory node, if phoneNumber is provided then phoneNumberTypeId is required.", alias="phoneNumberTypeId")
    phone_number: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts applicants phone number. This is conditional manda tory node, if value for phoneNumberTypeId is provided then this node is required.", alias="phoneNumber")
    address_type_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts address type id.", alias="addressTypeId")
    address_line1: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value.", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value.", alias="addressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value.", alias="addressLine3")
    city: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value.")
    postal_code: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value.", alias="postalCode")
    state_code: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value.", alias="stateCode")
    __properties: ClassVar[List[str]] = ["applicationId", "propertyId", "applicationStatusId", "floorplanId", "unitSpaceId", "leaseTermId", "leasingAgentId", "moveInDate", "originatingLeadSourceId", "id", "firstName", "lastName", "maternalName", "preferredName", "birthDate", "customerRelationshipTypeId", "email", "phoneNumberTypeId", "phoneNumber", "addressTypeId", "addressLine1", "addressLine2", "addressLine3", "city", "postalCode", "stateCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateApplicationMethodParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateApplicationMethodParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationId": obj.get("applicationId"),
            "propertyId": obj.get("propertyId"),
            "applicationStatusId": obj.get("applicationStatusId"),
            "floorplanId": obj.get("floorplanId"),
            "unitSpaceId": obj.get("unitSpaceId"),
            "leaseTermId": obj.get("leaseTermId"),
            "leasingAgentId": obj.get("leasingAgentId"),
            "moveInDate": obj.get("moveInDate"),
            "originatingLeadSourceId": obj.get("originatingLeadSourceId"),
            "id": obj.get("id"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "maternalName": obj.get("maternalName"),
            "preferredName": obj.get("preferredName"),
            "birthDate": obj.get("birthDate"),
            "customerRelationshipTypeId": obj.get("customerRelationshipTypeId"),
            "email": obj.get("email"),
            "phoneNumberTypeId": obj.get("phoneNumberTypeId"),
            "phoneNumber": obj.get("phoneNumber"),
            "addressTypeId": obj.get("addressTypeId"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "addressLine3": obj.get("addressLine3"),
            "city": obj.get("city"),
            "postalCode": obj.get("postalCode"),
            "stateCode": obj.get("stateCode")
        })
        return _obj



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.get_amenities_success_response import GetAmenitiesSuccessResponse
from openapi_client.models.get_mits_property_units_success_response import GetMitsPropertyUnitsSuccessResponse
from openapi_client.models.get_property_units_success_response import GetPropertyUnitsSuccessResponse
from openapi_client.models.get_specials_r1_success_response import GetSpecialsR1SuccessResponse
from openapi_client.models.get_specials_r2_success_response import GetSpecialsR2SuccessResponse
from openapi_client.models.get_specials_r3_success_response import GetSpecialsR3SuccessResponse
from openapi_client.models.get_specials_r4_success_response import GetSpecialsR4SuccessResponse
from openapi_client.models.get_unit_types_success_response import GetUnitTypesSuccessResponse
from openapi_client.models.get_units_availability_and_pricing_success_response import GetUnitsAvailabilityAndPricingSuccessResponse
from openapi_client.models.send_amenities_success_response import SendAmenitiesSuccessResponse
from openapi_client.models.send_property_units_success_response import SendPropertyUnitsSuccessResponse
from openapi_client.models.send_special_group_success_response import SendSpecialGroupSuccessResponse
from openapi_client.models.update_amenities_success_response import UpdateAmenitiesSuccessResponse
from openapi_client.models.update_special_group_success_response import UpdateSpecialGroupSuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1PROPERTYUNITSPOST200RESPONSE_ONE_OF_SCHEMAS = ["GetAmenitiesSuccessResponse", "GetMitsPropertyUnitsSuccessResponse", "GetPropertyUnitsSuccessResponse", "GetSpecialsR1SuccessResponse", "GetSpecialsR2SuccessResponse", "GetSpecialsR3SuccessResponse", "GetSpecialsR4SuccessResponse", "GetUnitTypesSuccessResponse", "GetUnitsAvailabilityAndPricingSuccessResponse", "SendAmenitiesSuccessResponse", "SendPropertyUnitsSuccessResponse", "SendSpecialGroupSuccessResponse", "UpdateAmenitiesSuccessResponse", "UpdateSpecialGroupSuccessResponse"]

class OrgsV1PropertyunitsPost200Response(BaseModel):
    """
    OrgsV1PropertyunitsPost200Response
    """
    # data type: GetAmenitiesSuccessResponse
    oneof_schema_1_validator: Optional[GetAmenitiesSuccessResponse] = None
    # data type: GetMitsPropertyUnitsSuccessResponse
    oneof_schema_2_validator: Optional[GetMitsPropertyUnitsSuccessResponse] = None
    # data type: GetPropertyUnitsSuccessResponse
    oneof_schema_3_validator: Optional[GetPropertyUnitsSuccessResponse] = None
    # data type: GetSpecialsR1SuccessResponse
    oneof_schema_4_validator: Optional[GetSpecialsR1SuccessResponse] = None
    # data type: GetSpecialsR2SuccessResponse
    oneof_schema_5_validator: Optional[GetSpecialsR2SuccessResponse] = None
    # data type: GetSpecialsR3SuccessResponse
    oneof_schema_6_validator: Optional[GetSpecialsR3SuccessResponse] = None
    # data type: GetUnitsAvailabilityAndPricingSuccessResponse
    oneof_schema_7_validator: Optional[GetUnitsAvailabilityAndPricingSuccessResponse] = None
    # data type: GetUnitTypesSuccessResponse
    oneof_schema_8_validator: Optional[GetUnitTypesSuccessResponse] = None
    # data type: SendAmenitiesSuccessResponse
    oneof_schema_9_validator: Optional[SendAmenitiesSuccessResponse] = None
    # data type: SendPropertyUnitsSuccessResponse
    oneof_schema_10_validator: Optional[SendPropertyUnitsSuccessResponse] = None
    # data type: UpdateAmenitiesSuccessResponse
    oneof_schema_11_validator: Optional[UpdateAmenitiesSuccessResponse] = None
    # data type: SendSpecialGroupSuccessResponse
    oneof_schema_12_validator: Optional[SendSpecialGroupSuccessResponse] = None
    # data type: UpdateSpecialGroupSuccessResponse
    oneof_schema_13_validator: Optional[UpdateSpecialGroupSuccessResponse] = None
    # data type: GetSpecialsR4SuccessResponse
    oneof_schema_14_validator: Optional[GetSpecialsR4SuccessResponse] = None
    actual_instance: Optional[Union[GetAmenitiesSuccessResponse, GetMitsPropertyUnitsSuccessResponse, GetPropertyUnitsSuccessResponse, GetSpecialsR1SuccessResponse, GetSpecialsR2SuccessResponse, GetSpecialsR3SuccessResponse, GetSpecialsR4SuccessResponse, GetUnitTypesSuccessResponse, GetUnitsAvailabilityAndPricingSuccessResponse, SendAmenitiesSuccessResponse, SendPropertyUnitsSuccessResponse, SendSpecialGroupSuccessResponse, UpdateAmenitiesSuccessResponse, UpdateSpecialGroupSuccessResponse]] = None
    one_of_schemas: Set[str] = { "GetAmenitiesSuccessResponse", "GetMitsPropertyUnitsSuccessResponse", "GetPropertyUnitsSuccessResponse", "GetSpecialsR1SuccessResponse", "GetSpecialsR2SuccessResponse", "GetSpecialsR3SuccessResponse", "GetSpecialsR4SuccessResponse", "GetUnitTypesSuccessResponse", "GetUnitsAvailabilityAndPricingSuccessResponse", "SendAmenitiesSuccessResponse", "SendPropertyUnitsSuccessResponse", "SendSpecialGroupSuccessResponse", "UpdateAmenitiesSuccessResponse", "UpdateSpecialGroupSuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1PropertyunitsPost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetAmenitiesSuccessResponse
        if not isinstance(v, GetAmenitiesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetAmenitiesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetMitsPropertyUnitsSuccessResponse
        if not isinstance(v, GetMitsPropertyUnitsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsPropertyUnitsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPropertyUnitsSuccessResponse
        if not isinstance(v, GetPropertyUnitsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyUnitsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetSpecialsR1SuccessResponse
        if not isinstance(v, GetSpecialsR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetSpecialsR2SuccessResponse
        if not isinstance(v, GetSpecialsR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetSpecialsR3SuccessResponse
        if not isinstance(v, GetSpecialsR3SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR3SuccessResponse`")
        else:
            match += 1
        # validate data type: GetUnitsAvailabilityAndPricingSuccessResponse
        if not isinstance(v, GetUnitsAvailabilityAndPricingSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetUnitsAvailabilityAndPricingSuccessResponse`")
        else:
            match += 1
        # validate data type: GetUnitTypesSuccessResponse
        if not isinstance(v, GetUnitTypesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetUnitTypesSuccessResponse`")
        else:
            match += 1
        # validate data type: SendAmenitiesSuccessResponse
        if not isinstance(v, SendAmenitiesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendAmenitiesSuccessResponse`")
        else:
            match += 1
        # validate data type: SendPropertyUnitsSuccessResponse
        if not isinstance(v, SendPropertyUnitsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendPropertyUnitsSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateAmenitiesSuccessResponse
        if not isinstance(v, UpdateAmenitiesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateAmenitiesSuccessResponse`")
        else:
            match += 1
        # validate data type: SendSpecialGroupSuccessResponse
        if not isinstance(v, SendSpecialGroupSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendSpecialGroupSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateSpecialGroupSuccessResponse
        if not isinstance(v, UpdateSpecialGroupSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateSpecialGroupSuccessResponse`")
        else:
            match += 1
        # validate data type: GetSpecialsR4SuccessResponse
        if not isinstance(v, GetSpecialsR4SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR4SuccessResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1PropertyunitsPost200Response with oneOf schemas: GetAmenitiesSuccessResponse, GetMitsPropertyUnitsSuccessResponse, GetPropertyUnitsSuccessResponse, GetSpecialsR1SuccessResponse, GetSpecialsR2SuccessResponse, GetSpecialsR3SuccessResponse, GetSpecialsR4SuccessResponse, GetUnitTypesSuccessResponse, GetUnitsAvailabilityAndPricingSuccessResponse, SendAmenitiesSuccessResponse, SendPropertyUnitsSuccessResponse, SendSpecialGroupSuccessResponse, UpdateAmenitiesSuccessResponse, UpdateSpecialGroupSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1PropertyunitsPost200Response with oneOf schemas: GetAmenitiesSuccessResponse, GetMitsPropertyUnitsSuccessResponse, GetPropertyUnitsSuccessResponse, GetSpecialsR1SuccessResponse, GetSpecialsR2SuccessResponse, GetSpecialsR3SuccessResponse, GetSpecialsR4SuccessResponse, GetUnitTypesSuccessResponse, GetUnitsAvailabilityAndPricingSuccessResponse, SendAmenitiesSuccessResponse, SendPropertyUnitsSuccessResponse, SendSpecialGroupSuccessResponse, UpdateAmenitiesSuccessResponse, UpdateSpecialGroupSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetAmenitiesSuccessResponse
        try:
            instance.actual_instance = GetAmenitiesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsPropertyUnitsSuccessResponse
        try:
            instance.actual_instance = GetMitsPropertyUnitsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyUnitsSuccessResponse
        try:
            instance.actual_instance = GetPropertyUnitsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR1SuccessResponse
        try:
            instance.actual_instance = GetSpecialsR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR2SuccessResponse
        try:
            instance.actual_instance = GetSpecialsR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR3SuccessResponse
        try:
            instance.actual_instance = GetSpecialsR3SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetUnitsAvailabilityAndPricingSuccessResponse
        try:
            instance.actual_instance = GetUnitsAvailabilityAndPricingSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetUnitTypesSuccessResponse
        try:
            instance.actual_instance = GetUnitTypesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendAmenitiesSuccessResponse
        try:
            instance.actual_instance = SendAmenitiesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendPropertyUnitsSuccessResponse
        try:
            instance.actual_instance = SendPropertyUnitsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateAmenitiesSuccessResponse
        try:
            instance.actual_instance = UpdateAmenitiesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendSpecialGroupSuccessResponse
        try:
            instance.actual_instance = SendSpecialGroupSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateSpecialGroupSuccessResponse
        try:
            instance.actual_instance = UpdateSpecialGroupSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR4SuccessResponse
        try:
            instance.actual_instance = GetSpecialsR4SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1PropertyunitsPost200Response with oneOf schemas: GetAmenitiesSuccessResponse, GetMitsPropertyUnitsSuccessResponse, GetPropertyUnitsSuccessResponse, GetSpecialsR1SuccessResponse, GetSpecialsR2SuccessResponse, GetSpecialsR3SuccessResponse, GetSpecialsR4SuccessResponse, GetUnitTypesSuccessResponse, GetUnitsAvailabilityAndPricingSuccessResponse, SendAmenitiesSuccessResponse, SendPropertyUnitsSuccessResponse, SendSpecialGroupSuccessResponse, UpdateAmenitiesSuccessResponse, UpdateSpecialGroupSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1PropertyunitsPost200Response with oneOf schemas: GetAmenitiesSuccessResponse, GetMitsPropertyUnitsSuccessResponse, GetPropertyUnitsSuccessResponse, GetSpecialsR1SuccessResponse, GetSpecialsR2SuccessResponse, GetSpecialsR3SuccessResponse, GetSpecialsR4SuccessResponse, GetUnitTypesSuccessResponse, GetUnitsAvailabilityAndPricingSuccessResponse, SendAmenitiesSuccessResponse, SendPropertyUnitsSuccessResponse, SendSpecialGroupSuccessResponse, UpdateAmenitiesSuccessResponse, UpdateSpecialGroupSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetAmenitiesSuccessResponse, GetMitsPropertyUnitsSuccessResponse, GetPropertyUnitsSuccessResponse, GetSpecialsR1SuccessResponse, GetSpecialsR2SuccessResponse, GetSpecialsR3SuccessResponse, GetSpecialsR4SuccessResponse, GetUnitTypesSuccessResponse, GetUnitsAvailabilityAndPricingSuccessResponse, SendAmenitiesSuccessResponse, SendPropertyUnitsSuccessResponse, SendSpecialGroupSuccessResponse, UpdateAmenitiesSuccessResponse, UpdateSpecialGroupSuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



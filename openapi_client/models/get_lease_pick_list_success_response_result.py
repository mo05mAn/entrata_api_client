# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.get_lease_pick_list_success_response_result_charge_code_types import GetLeasePickListSuccessResponseResultChargeCodeTypes
from openapi_client.models.get_lease_pick_list_success_response_result_charge_timings import GetLeasePickListSuccessResponseResultChargeTimings
from openapi_client.models.get_lease_pick_list_success_response_result_event_tags import GetLeasePickListSuccessResponseResultEventTags
from openapi_client.models.get_lease_pick_list_success_response_result_lease_file_types import GetLeasePickListSuccessResponseResultLeaseFileTypes
from openapi_client.models.get_lease_pick_list_success_response_result_lease_status_types import GetLeasePickListSuccessResponseResultLeaseStatusTypes
from typing import Optional, Set
from typing_extensions import Self

class GetLeasePickListSuccessResponseResult(BaseModel):
    """
    GetLeasePickListSuccessResponseResult
    """ # noqa: E501
    lease_status_types: GetLeasePickListSuccessResponseResultLeaseStatusTypes = Field(alias="leaseStatusTypes")
    lease_file_types: GetLeasePickListSuccessResponseResultLeaseFileTypes = Field(alias="leaseFileTypes")
    charge_timings: GetLeasePickListSuccessResponseResultChargeTimings = Field(alias="chargeTimings")
    charge_code_types: GetLeasePickListSuccessResponseResultChargeCodeTypes = Field(alias="chargeCodeTypes")
    event_tags: GetLeasePickListSuccessResponseResultEventTags = Field(alias="eventTags")
    __properties: ClassVar[List[str]] = ["leaseStatusTypes", "leaseFileTypes", "chargeTimings", "chargeCodeTypes", "eventTags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLeasePickListSuccessResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lease_status_types
        if self.lease_status_types:
            _dict['leaseStatusTypes'] = self.lease_status_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lease_file_types
        if self.lease_file_types:
            _dict['leaseFileTypes'] = self.lease_file_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_timings
        if self.charge_timings:
            _dict['chargeTimings'] = self.charge_timings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_code_types
        if self.charge_code_types:
            _dict['chargeCodeTypes'] = self.charge_code_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_tags
        if self.event_tags:
            _dict['eventTags'] = self.event_tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLeasePickListSuccessResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "leaseStatusTypes": GetLeasePickListSuccessResponseResultLeaseStatusTypes.from_dict(obj["leaseStatusTypes"]) if obj.get("leaseStatusTypes") is not None else None,
            "leaseFileTypes": GetLeasePickListSuccessResponseResultLeaseFileTypes.from_dict(obj["leaseFileTypes"]) if obj.get("leaseFileTypes") is not None else None,
            "chargeTimings": GetLeasePickListSuccessResponseResultChargeTimings.from_dict(obj["chargeTimings"]) if obj.get("chargeTimings") is not None else None,
            "chargeCodeTypes": GetLeasePickListSuccessResponseResultChargeCodeTypes.from_dict(obj["chargeCodeTypes"]) if obj.get("chargeCodeTypes") is not None else None,
            "eventTags": GetLeasePickListSuccessResponseResultEventTags.from_dict(obj["eventTags"]) if obj.get("eventTags") is not None else None
        })
        return _obj



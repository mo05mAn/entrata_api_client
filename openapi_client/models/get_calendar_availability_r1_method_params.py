# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetCalendarAvailabilityR1MethodParams(BaseModel):
    """
    GetCalendarAvailabilityR1MethodParams
    """ # noqa: E501
    property_id: StrictInt = Field(description="This is a required field. This field accepts single value. propertyId", alias="propertyId")
    from_date: date = Field(description="This is a required field. This field accepts single value. fromDate indicates from which date we should start to include when ret urning available time periods off the property calendar. Only a 7 da y range is allowed per request and that range includes the fromDate an d toDate in it.", alias="fromDate")
    to_date: date = Field(description="This is a required field. This field accepts single value. toDate indicates up till which date we should include when returning a vailable time periods off the property calendar. Only a 7 day range is allowed per request and that range includes the fromDate and toDate in it.", alias="toDate")
    calendar_event_category_ids: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts comma seperated multiple values. Calendar Event type ids. Possible id: 1-General, 2-Resident, 3-Leasing , 4-Maintenance If no Id`s are passed only Resident and Leasing cat egories are considered by default.", alias="calendarEventCategoryIds")
    __properties: ClassVar[List[str]] = ["propertyId", "fromDate", "toDate", "calendarEventCategoryIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCalendarAvailabilityR1MethodParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCalendarAvailabilityR1MethodParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyId": obj.get("propertyId"),
            "fromDate": obj.get("fromDate"),
            "toDate": obj.get("toDate"),
            "calendarEventCategoryIds": obj.get("calendarEventCategoryIds")
        })
        return _obj



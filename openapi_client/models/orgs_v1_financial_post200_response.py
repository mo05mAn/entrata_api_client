# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.get_ap_codes_success_response import GetApCodesSuccessResponse
from openapi_client.models.get_bank_accounts_success_response import GetBankAccountsSuccessResponse
from openapi_client.models.get_budget_actuals_success_response import GetBudgetActualsSuccessResponse
from openapi_client.models.get_budgets_success_response import GetBudgetsSuccessResponse
from openapi_client.models.get_financial_pick_list_r1_success_response import GetFinancialPickListR1SuccessResponse
from openapi_client.models.get_financial_pick_list_r2_success_response import GetFinancialPickListR2SuccessResponse
from openapi_client.models.get_gl_transactions_success_response import GetGlTransactionsSuccessResponse
from openapi_client.models.get_gl_trees_r1_success_response import GetGlTreesR1SuccessResponse
from openapi_client.models.get_gl_trees_r2_success_response import GetGlTreesR2SuccessResponse
from openapi_client.models.get_job_categories_success_response import GetJobCategoriesSuccessResponse
from openapi_client.models.get_job_cost_budgets_success_response import GetJobCostBudgetsSuccessResponse
from openapi_client.models.get_jobs_success_response import GetJobsSuccessResponse
from openapi_client.models.get_transaction_tag_lists_success_response import GetTransactionTagListsSuccessResponse
from openapi_client.models.mark_gl_transactions_exported_success_response import MarkGlTransactionsExportedSuccessResponse
from openapi_client.models.send_budgets_success_response import SendBudgetsSuccessResponse
from openapi_client.models.send_journal_entries_success_response import SendJournalEntriesSuccessResponse
from openapi_client.models.update_budgets_success_response import UpdateBudgetsSuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1FINANCIALPOST200RESPONSE_ONE_OF_SCHEMAS = ["GetApCodesSuccessResponse", "GetBankAccountsSuccessResponse", "GetBudgetActualsSuccessResponse", "GetBudgetsSuccessResponse", "GetFinancialPickListR1SuccessResponse", "GetFinancialPickListR2SuccessResponse", "GetGlTransactionsSuccessResponse", "GetGlTreesR1SuccessResponse", "GetGlTreesR2SuccessResponse", "GetJobCategoriesSuccessResponse", "GetJobCostBudgetsSuccessResponse", "GetJobsSuccessResponse", "GetTransactionTagListsSuccessResponse", "MarkGlTransactionsExportedSuccessResponse", "SendBudgetsSuccessResponse", "SendJournalEntriesSuccessResponse", "UpdateBudgetsSuccessResponse"]

class OrgsV1FinancialPost200Response(BaseModel):
    """
    OrgsV1FinancialPost200Response
    """
    # data type: GetApCodesSuccessResponse
    oneof_schema_1_validator: Optional[GetApCodesSuccessResponse] = None
    # data type: GetBankAccountsSuccessResponse
    oneof_schema_2_validator: Optional[GetBankAccountsSuccessResponse] = None
    # data type: GetBudgetActualsSuccessResponse
    oneof_schema_3_validator: Optional[GetBudgetActualsSuccessResponse] = None
    # data type: GetBudgetsSuccessResponse
    oneof_schema_4_validator: Optional[GetBudgetsSuccessResponse] = None
    # data type: GetFinancialPickListR1SuccessResponse
    oneof_schema_5_validator: Optional[GetFinancialPickListR1SuccessResponse] = None
    # data type: GetFinancialPickListR2SuccessResponse
    oneof_schema_6_validator: Optional[GetFinancialPickListR2SuccessResponse] = None
    # data type: GetGlTransactionsSuccessResponse
    oneof_schema_7_validator: Optional[GetGlTransactionsSuccessResponse] = None
    # data type: GetGlTreesR1SuccessResponse
    oneof_schema_8_validator: Optional[GetGlTreesR1SuccessResponse] = None
    # data type: GetGlTreesR2SuccessResponse
    oneof_schema_9_validator: Optional[GetGlTreesR2SuccessResponse] = None
    # data type: GetJobCategoriesSuccessResponse
    oneof_schema_10_validator: Optional[GetJobCategoriesSuccessResponse] = None
    # data type: GetJobCostBudgetsSuccessResponse
    oneof_schema_11_validator: Optional[GetJobCostBudgetsSuccessResponse] = None
    # data type: GetJobsSuccessResponse
    oneof_schema_12_validator: Optional[GetJobsSuccessResponse] = None
    # data type: GetTransactionTagListsSuccessResponse
    oneof_schema_13_validator: Optional[GetTransactionTagListsSuccessResponse] = None
    # data type: MarkGlTransactionsExportedSuccessResponse
    oneof_schema_14_validator: Optional[MarkGlTransactionsExportedSuccessResponse] = None
    # data type: SendBudgetsSuccessResponse
    oneof_schema_15_validator: Optional[SendBudgetsSuccessResponse] = None
    # data type: SendJournalEntriesSuccessResponse
    oneof_schema_16_validator: Optional[SendJournalEntriesSuccessResponse] = None
    # data type: UpdateBudgetsSuccessResponse
    oneof_schema_17_validator: Optional[UpdateBudgetsSuccessResponse] = None
    actual_instance: Optional[Union[GetApCodesSuccessResponse, GetBankAccountsSuccessResponse, GetBudgetActualsSuccessResponse, GetBudgetsSuccessResponse, GetFinancialPickListR1SuccessResponse, GetFinancialPickListR2SuccessResponse, GetGlTransactionsSuccessResponse, GetGlTreesR1SuccessResponse, GetGlTreesR2SuccessResponse, GetJobCategoriesSuccessResponse, GetJobCostBudgetsSuccessResponse, GetJobsSuccessResponse, GetTransactionTagListsSuccessResponse, MarkGlTransactionsExportedSuccessResponse, SendBudgetsSuccessResponse, SendJournalEntriesSuccessResponse, UpdateBudgetsSuccessResponse]] = None
    one_of_schemas: Set[str] = { "GetApCodesSuccessResponse", "GetBankAccountsSuccessResponse", "GetBudgetActualsSuccessResponse", "GetBudgetsSuccessResponse", "GetFinancialPickListR1SuccessResponse", "GetFinancialPickListR2SuccessResponse", "GetGlTransactionsSuccessResponse", "GetGlTreesR1SuccessResponse", "GetGlTreesR2SuccessResponse", "GetJobCategoriesSuccessResponse", "GetJobCostBudgetsSuccessResponse", "GetJobsSuccessResponse", "GetTransactionTagListsSuccessResponse", "MarkGlTransactionsExportedSuccessResponse", "SendBudgetsSuccessResponse", "SendJournalEntriesSuccessResponse", "UpdateBudgetsSuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1FinancialPost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetApCodesSuccessResponse
        if not isinstance(v, GetApCodesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetApCodesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetBankAccountsSuccessResponse
        if not isinstance(v, GetBankAccountsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBankAccountsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetBudgetActualsSuccessResponse
        if not isinstance(v, GetBudgetActualsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBudgetActualsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetBudgetsSuccessResponse
        if not isinstance(v, GetBudgetsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBudgetsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetFinancialPickListR1SuccessResponse
        if not isinstance(v, GetFinancialPickListR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetFinancialPickListR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetFinancialPickListR2SuccessResponse
        if not isinstance(v, GetFinancialPickListR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetFinancialPickListR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetGlTransactionsSuccessResponse
        if not isinstance(v, GetGlTransactionsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGlTransactionsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetGlTreesR1SuccessResponse
        if not isinstance(v, GetGlTreesR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGlTreesR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetGlTreesR2SuccessResponse
        if not isinstance(v, GetGlTreesR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGlTreesR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetJobCategoriesSuccessResponse
        if not isinstance(v, GetJobCategoriesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetJobCategoriesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetJobCostBudgetsSuccessResponse
        if not isinstance(v, GetJobCostBudgetsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetJobCostBudgetsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetJobsSuccessResponse
        if not isinstance(v, GetJobsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetJobsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetTransactionTagListsSuccessResponse
        if not isinstance(v, GetTransactionTagListsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionTagListsSuccessResponse`")
        else:
            match += 1
        # validate data type: MarkGlTransactionsExportedSuccessResponse
        if not isinstance(v, MarkGlTransactionsExportedSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarkGlTransactionsExportedSuccessResponse`")
        else:
            match += 1
        # validate data type: SendBudgetsSuccessResponse
        if not isinstance(v, SendBudgetsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendBudgetsSuccessResponse`")
        else:
            match += 1
        # validate data type: SendJournalEntriesSuccessResponse
        if not isinstance(v, SendJournalEntriesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendJournalEntriesSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateBudgetsSuccessResponse
        if not isinstance(v, UpdateBudgetsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateBudgetsSuccessResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1FinancialPost200Response with oneOf schemas: GetApCodesSuccessResponse, GetBankAccountsSuccessResponse, GetBudgetActualsSuccessResponse, GetBudgetsSuccessResponse, GetFinancialPickListR1SuccessResponse, GetFinancialPickListR2SuccessResponse, GetGlTransactionsSuccessResponse, GetGlTreesR1SuccessResponse, GetGlTreesR2SuccessResponse, GetJobCategoriesSuccessResponse, GetJobCostBudgetsSuccessResponse, GetJobsSuccessResponse, GetTransactionTagListsSuccessResponse, MarkGlTransactionsExportedSuccessResponse, SendBudgetsSuccessResponse, SendJournalEntriesSuccessResponse, UpdateBudgetsSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1FinancialPost200Response with oneOf schemas: GetApCodesSuccessResponse, GetBankAccountsSuccessResponse, GetBudgetActualsSuccessResponse, GetBudgetsSuccessResponse, GetFinancialPickListR1SuccessResponse, GetFinancialPickListR2SuccessResponse, GetGlTransactionsSuccessResponse, GetGlTreesR1SuccessResponse, GetGlTreesR2SuccessResponse, GetJobCategoriesSuccessResponse, GetJobCostBudgetsSuccessResponse, GetJobsSuccessResponse, GetTransactionTagListsSuccessResponse, MarkGlTransactionsExportedSuccessResponse, SendBudgetsSuccessResponse, SendJournalEntriesSuccessResponse, UpdateBudgetsSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetApCodesSuccessResponse
        try:
            instance.actual_instance = GetApCodesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBankAccountsSuccessResponse
        try:
            instance.actual_instance = GetBankAccountsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBudgetActualsSuccessResponse
        try:
            instance.actual_instance = GetBudgetActualsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBudgetsSuccessResponse
        try:
            instance.actual_instance = GetBudgetsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetFinancialPickListR1SuccessResponse
        try:
            instance.actual_instance = GetFinancialPickListR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetFinancialPickListR2SuccessResponse
        try:
            instance.actual_instance = GetFinancialPickListR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGlTransactionsSuccessResponse
        try:
            instance.actual_instance = GetGlTransactionsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGlTreesR1SuccessResponse
        try:
            instance.actual_instance = GetGlTreesR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGlTreesR2SuccessResponse
        try:
            instance.actual_instance = GetGlTreesR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetJobCategoriesSuccessResponse
        try:
            instance.actual_instance = GetJobCategoriesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetJobCostBudgetsSuccessResponse
        try:
            instance.actual_instance = GetJobCostBudgetsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetJobsSuccessResponse
        try:
            instance.actual_instance = GetJobsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionTagListsSuccessResponse
        try:
            instance.actual_instance = GetTransactionTagListsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkGlTransactionsExportedSuccessResponse
        try:
            instance.actual_instance = MarkGlTransactionsExportedSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendBudgetsSuccessResponse
        try:
            instance.actual_instance = SendBudgetsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendJournalEntriesSuccessResponse
        try:
            instance.actual_instance = SendJournalEntriesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateBudgetsSuccessResponse
        try:
            instance.actual_instance = UpdateBudgetsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1FinancialPost200Response with oneOf schemas: GetApCodesSuccessResponse, GetBankAccountsSuccessResponse, GetBudgetActualsSuccessResponse, GetBudgetsSuccessResponse, GetFinancialPickListR1SuccessResponse, GetFinancialPickListR2SuccessResponse, GetGlTransactionsSuccessResponse, GetGlTreesR1SuccessResponse, GetGlTreesR2SuccessResponse, GetJobCategoriesSuccessResponse, GetJobCostBudgetsSuccessResponse, GetJobsSuccessResponse, GetTransactionTagListsSuccessResponse, MarkGlTransactionsExportedSuccessResponse, SendBudgetsSuccessResponse, SendJournalEntriesSuccessResponse, UpdateBudgetsSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1FinancialPost200Response with oneOf schemas: GetApCodesSuccessResponse, GetBankAccountsSuccessResponse, GetBudgetActualsSuccessResponse, GetBudgetsSuccessResponse, GetFinancialPickListR1SuccessResponse, GetFinancialPickListR2SuccessResponse, GetGlTransactionsSuccessResponse, GetGlTreesR1SuccessResponse, GetGlTreesR2SuccessResponse, GetJobCategoriesSuccessResponse, GetJobCostBudgetsSuccessResponse, GetJobsSuccessResponse, GetTransactionTagListsSuccessResponse, MarkGlTransactionsExportedSuccessResponse, SendBudgetsSuccessResponse, SendJournalEntriesSuccessResponse, UpdateBudgetsSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetApCodesSuccessResponse, GetBankAccountsSuccessResponse, GetBudgetActualsSuccessResponse, GetBudgetsSuccessResponse, GetFinancialPickListR1SuccessResponse, GetFinancialPickListR2SuccessResponse, GetGlTransactionsSuccessResponse, GetGlTreesR1SuccessResponse, GetGlTreesR2SuccessResponse, GetJobCategoriesSuccessResponse, GetJobCostBudgetsSuccessResponse, GetJobsSuccessResponse, GetTransactionTagListsSuccessResponse, MarkGlTransactionsExportedSuccessResponse, SendBudgetsSuccessResponse, SendJournalEntriesSuccessResponse, UpdateBudgetsSuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_vendor_pick_lists_success_response_result_ap_payee_status_types import GetVendorPickListsSuccessResponseResultApPayeeStatusTypes
from openapi_client.models.get_vendor_pick_lists_success_response_result_ap_payee_terms import GetVendorPickListsSuccessResponseResultApPayeeTerms
from openapi_client.models.get_vendor_pick_lists_success_response_result_ap_payee_types import GetVendorPickListsSuccessResponseResultApPayeeTypes
from openapi_client.models.get_vendor_pick_lists_success_response_result_ap_remittance_types import GetVendorPickListsSuccessResponseResultApRemittanceTypes
from openapi_client.models.get_vendor_pick_lists_success_response_result_bank_account_types import GetVendorPickListsSuccessResponseResultBankAccountTypes
from openapi_client.models.get_vendor_pick_lists_success_response_result_compliance_statuses import GetVendorPickListsSuccessResponseResultComplianceStatuses
from openapi_client.models.get_vendor_pick_lists_success_response_result_form1099_box_types import GetVendorPickListsSuccessResponseResultForm1099BoxTypes
from openapi_client.models.get_vendor_pick_lists_success_response_result_form1099_types import GetVendorPickListsSuccessResponseResultForm1099Types
from openapi_client.models.get_vendor_pick_lists_success_response_result_owner_types import GetVendorPickListsSuccessResponseResultOwnerTypes
from openapi_client.models.get_vendor_pick_lists_success_response_result_policies import GetVendorPickListsSuccessResponseResultPolicies
from openapi_client.models.get_vendor_pick_lists_success_response_result_routing_tags import GetVendorPickListsSuccessResponseResultRoutingTags
from openapi_client.models.get_vendor_pick_lists_success_response_result_units_of_measure import GetVendorPickListsSuccessResponseResultUnitsOfMeasure
from openapi_client.models.get_vendor_pick_lists_success_response_result_utility_bill_receipt_types import GetVendorPickListsSuccessResponseResultUtilityBillReceiptTypes
from openapi_client.models.get_vendor_pick_lists_success_response_result_vendor_category_types import GetVendorPickListsSuccessResponseResultVendorCategoryTypes
from typing import Optional, Set
from typing_extensions import Self

class GetVendorPickListsSuccessResponseResult(BaseModel):
    """
    GetVendorPickListsSuccessResponseResult
    """ # noqa: E501
    vendor_category_types: Optional[GetVendorPickListsSuccessResponseResultVendorCategoryTypes] = Field(default=None, alias="vendorCategoryTypes")
    owner_types: Optional[GetVendorPickListsSuccessResponseResultOwnerTypes] = Field(default=None, alias="ownerTypes")
    ap_payee_terms: Optional[GetVendorPickListsSuccessResponseResultApPayeeTerms] = Field(default=None, alias="apPayeeTerms")
    ap_payee_types: Optional[GetVendorPickListsSuccessResponseResultApPayeeTypes] = Field(default=None, alias="apPayeeTypes")
    ap_payee_status_types: Optional[GetVendorPickListsSuccessResponseResultApPayeeStatusTypes] = Field(default=None, alias="apPayeeStatusTypes")
    form1099_types: Optional[GetVendorPickListsSuccessResponseResultForm1099Types] = Field(default=None, alias="form1099Types")
    form1099_box_types: Optional[GetVendorPickListsSuccessResponseResultForm1099BoxTypes] = Field(default=None, alias="form1099BoxTypes")
    ap_remittance_types: Optional[GetVendorPickListsSuccessResponseResultApRemittanceTypes] = Field(default=None, alias="apRemittanceTypes")
    utility_bill_receipt_types: Optional[GetVendorPickListsSuccessResponseResultUtilityBillReceiptTypes] = Field(default=None, alias="utilityBillReceiptTypes")
    bank_account_types: Optional[GetVendorPickListsSuccessResponseResultBankAccountTypes] = Field(default=None, alias="bankAccountTypes")
    compliance_statuses: Optional[GetVendorPickListsSuccessResponseResultComplianceStatuses] = Field(default=None, alias="complianceStatuses")
    routing_tags: Optional[GetVendorPickListsSuccessResponseResultRoutingTags] = Field(default=None, alias="routingTags")
    units_of_measure: Optional[GetVendorPickListsSuccessResponseResultUnitsOfMeasure] = Field(default=None, alias="unitsOfMeasure")
    policies: Optional[GetVendorPickListsSuccessResponseResultPolicies] = None
    __properties: ClassVar[List[str]] = ["vendorCategoryTypes", "ownerTypes", "apPayeeTerms", "apPayeeTypes", "apPayeeStatusTypes", "form1099Types", "form1099BoxTypes", "apRemittanceTypes", "utilityBillReceiptTypes", "bankAccountTypes", "complianceStatuses", "routingTags", "unitsOfMeasure", "policies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetVendorPickListsSuccessResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vendor_category_types
        if self.vendor_category_types:
            _dict['vendorCategoryTypes'] = self.vendor_category_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_types
        if self.owner_types:
            _dict['ownerTypes'] = self.owner_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ap_payee_terms
        if self.ap_payee_terms:
            _dict['apPayeeTerms'] = self.ap_payee_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ap_payee_types
        if self.ap_payee_types:
            _dict['apPayeeTypes'] = self.ap_payee_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ap_payee_status_types
        if self.ap_payee_status_types:
            _dict['apPayeeStatusTypes'] = self.ap_payee_status_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form1099_types
        if self.form1099_types:
            _dict['form1099Types'] = self.form1099_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form1099_box_types
        if self.form1099_box_types:
            _dict['form1099BoxTypes'] = self.form1099_box_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ap_remittance_types
        if self.ap_remittance_types:
            _dict['apRemittanceTypes'] = self.ap_remittance_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of utility_bill_receipt_types
        if self.utility_bill_receipt_types:
            _dict['utilityBillReceiptTypes'] = self.utility_bill_receipt_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account_types
        if self.bank_account_types:
            _dict['bankAccountTypes'] = self.bank_account_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compliance_statuses
        if self.compliance_statuses:
            _dict['complianceStatuses'] = self.compliance_statuses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routing_tags
        if self.routing_tags:
            _dict['routingTags'] = self.routing_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of units_of_measure
        if self.units_of_measure:
            _dict['unitsOfMeasure'] = self.units_of_measure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetVendorPickListsSuccessResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "vendorCategoryTypes": GetVendorPickListsSuccessResponseResultVendorCategoryTypes.from_dict(obj["vendorCategoryTypes"]) if obj.get("vendorCategoryTypes") is not None else None,
            "ownerTypes": GetVendorPickListsSuccessResponseResultOwnerTypes.from_dict(obj["ownerTypes"]) if obj.get("ownerTypes") is not None else None,
            "apPayeeTerms": GetVendorPickListsSuccessResponseResultApPayeeTerms.from_dict(obj["apPayeeTerms"]) if obj.get("apPayeeTerms") is not None else None,
            "apPayeeTypes": GetVendorPickListsSuccessResponseResultApPayeeTypes.from_dict(obj["apPayeeTypes"]) if obj.get("apPayeeTypes") is not None else None,
            "apPayeeStatusTypes": GetVendorPickListsSuccessResponseResultApPayeeStatusTypes.from_dict(obj["apPayeeStatusTypes"]) if obj.get("apPayeeStatusTypes") is not None else None,
            "form1099Types": GetVendorPickListsSuccessResponseResultForm1099Types.from_dict(obj["form1099Types"]) if obj.get("form1099Types") is not None else None,
            "form1099BoxTypes": GetVendorPickListsSuccessResponseResultForm1099BoxTypes.from_dict(obj["form1099BoxTypes"]) if obj.get("form1099BoxTypes") is not None else None,
            "apRemittanceTypes": GetVendorPickListsSuccessResponseResultApRemittanceTypes.from_dict(obj["apRemittanceTypes"]) if obj.get("apRemittanceTypes") is not None else None,
            "utilityBillReceiptTypes": GetVendorPickListsSuccessResponseResultUtilityBillReceiptTypes.from_dict(obj["utilityBillReceiptTypes"]) if obj.get("utilityBillReceiptTypes") is not None else None,
            "bankAccountTypes": GetVendorPickListsSuccessResponseResultBankAccountTypes.from_dict(obj["bankAccountTypes"]) if obj.get("bankAccountTypes") is not None else None,
            "complianceStatuses": GetVendorPickListsSuccessResponseResultComplianceStatuses.from_dict(obj["complianceStatuses"]) if obj.get("complianceStatuses") is not None else None,
            "routingTags": GetVendorPickListsSuccessResponseResultRoutingTags.from_dict(obj["routingTags"]) if obj.get("routingTags") is not None else None,
            "unitsOfMeasure": GetVendorPickListsSuccessResponseResultUnitsOfMeasure.from_dict(obj["unitsOfMeasure"]) if obj.get("unitsOfMeasure") is not None else None,
            "policies": GetVendorPickListsSuccessResponseResultPolicies.from_dict(obj["policies"]) if obj.get("policies") is not None else None
        })
        return _obj



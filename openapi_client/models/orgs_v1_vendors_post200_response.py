# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.get_invoices_r1_success_response import GetInvoicesR1SuccessResponse
from openapi_client.models.get_invoices_r2_success_response import GetInvoicesR2SuccessResponse
from openapi_client.models.get_po_receiving_records_success_response import GetPoReceivingRecordsSuccessResponse
from openapi_client.models.get_purchase_orders_success_response import GetPurchaseOrdersSuccessResponse
from openapi_client.models.get_tax_form_data_success_response import GetTaxFormDataSuccessResponse
from openapi_client.models.get_vendor_locations_success_response import GetVendorLocationsSuccessResponse
from openapi_client.models.get_vendor_pick_lists_success_response import GetVendorPickListsSuccessResponse
from openapi_client.models.get_vendors_success_response import GetVendorsSuccessResponse
from openapi_client.models.mark_invoices_exported_success_response import MarkInvoicesExportedSuccessResponse
from openapi_client.models.send_invoices_r1_success_response import SendInvoicesR1SuccessResponse
from openapi_client.models.send_invoices_r2_success_response import SendInvoicesR2SuccessResponse
from openapi_client.models.send_purchase_orders_success_response import SendPurchaseOrdersSuccessResponse
from openapi_client.models.send_vendors_success_response import SendVendorsSuccessResponse
from openapi_client.models.update_invoices_success_response import UpdateInvoicesSuccessResponse
from openapi_client.models.update_vendors_success_response import UpdateVendorsSuccessResponse
from openapi_client.models.void_ap_payments_success_response import VoidApPaymentsSuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1VENDORSPOST200RESPONSE_ONE_OF_SCHEMAS = ["GetInvoicesR1SuccessResponse", "GetInvoicesR2SuccessResponse", "GetPoReceivingRecordsSuccessResponse", "GetPurchaseOrdersSuccessResponse", "GetTaxFormDataSuccessResponse", "GetVendorLocationsSuccessResponse", "GetVendorPickListsSuccessResponse", "GetVendorsSuccessResponse", "MarkInvoicesExportedSuccessResponse", "SendInvoicesR1SuccessResponse", "SendInvoicesR2SuccessResponse", "SendPurchaseOrdersSuccessResponse", "SendVendorsSuccessResponse", "UpdateInvoicesSuccessResponse", "UpdateVendorsSuccessResponse", "VoidApPaymentsSuccessResponse"]

class OrgsV1VendorsPost200Response(BaseModel):
    """
    OrgsV1VendorsPost200Response
    """
    # data type: GetInvoicesR1SuccessResponse
    oneof_schema_1_validator: Optional[GetInvoicesR1SuccessResponse] = None
    # data type: GetInvoicesR2SuccessResponse
    oneof_schema_2_validator: Optional[GetInvoicesR2SuccessResponse] = None
    # data type: GetPoReceivingRecordsSuccessResponse
    oneof_schema_3_validator: Optional[GetPoReceivingRecordsSuccessResponse] = None
    # data type: GetPurchaseOrdersSuccessResponse
    oneof_schema_4_validator: Optional[GetPurchaseOrdersSuccessResponse] = None
    # data type: GetTaxFormDataSuccessResponse
    oneof_schema_5_validator: Optional[GetTaxFormDataSuccessResponse] = None
    # data type: GetVendorLocationsSuccessResponse
    oneof_schema_6_validator: Optional[GetVendorLocationsSuccessResponse] = None
    # data type: GetVendorPickListsSuccessResponse
    oneof_schema_7_validator: Optional[GetVendorPickListsSuccessResponse] = None
    # data type: GetVendorsSuccessResponse
    oneof_schema_8_validator: Optional[GetVendorsSuccessResponse] = None
    # data type: MarkInvoicesExportedSuccessResponse
    oneof_schema_9_validator: Optional[MarkInvoicesExportedSuccessResponse] = None
    # data type: SendInvoicesR1SuccessResponse
    oneof_schema_10_validator: Optional[SendInvoicesR1SuccessResponse] = None
    # data type: SendInvoicesR2SuccessResponse
    oneof_schema_11_validator: Optional[SendInvoicesR2SuccessResponse] = None
    # data type: SendPurchaseOrdersSuccessResponse
    oneof_schema_12_validator: Optional[SendPurchaseOrdersSuccessResponse] = None
    # data type: SendVendorsSuccessResponse
    oneof_schema_13_validator: Optional[SendVendorsSuccessResponse] = None
    # data type: UpdateInvoicesSuccessResponse
    oneof_schema_14_validator: Optional[UpdateInvoicesSuccessResponse] = None
    # data type: UpdateVendorsSuccessResponse
    oneof_schema_15_validator: Optional[UpdateVendorsSuccessResponse] = None
    # data type: VoidApPaymentsSuccessResponse
    oneof_schema_16_validator: Optional[VoidApPaymentsSuccessResponse] = None
    actual_instance: Optional[Union[GetInvoicesR1SuccessResponse, GetInvoicesR2SuccessResponse, GetPoReceivingRecordsSuccessResponse, GetPurchaseOrdersSuccessResponse, GetTaxFormDataSuccessResponse, GetVendorLocationsSuccessResponse, GetVendorPickListsSuccessResponse, GetVendorsSuccessResponse, MarkInvoicesExportedSuccessResponse, SendInvoicesR1SuccessResponse, SendInvoicesR2SuccessResponse, SendPurchaseOrdersSuccessResponse, SendVendorsSuccessResponse, UpdateInvoicesSuccessResponse, UpdateVendorsSuccessResponse, VoidApPaymentsSuccessResponse]] = None
    one_of_schemas: Set[str] = { "GetInvoicesR1SuccessResponse", "GetInvoicesR2SuccessResponse", "GetPoReceivingRecordsSuccessResponse", "GetPurchaseOrdersSuccessResponse", "GetTaxFormDataSuccessResponse", "GetVendorLocationsSuccessResponse", "GetVendorPickListsSuccessResponse", "GetVendorsSuccessResponse", "MarkInvoicesExportedSuccessResponse", "SendInvoicesR1SuccessResponse", "SendInvoicesR2SuccessResponse", "SendPurchaseOrdersSuccessResponse", "SendVendorsSuccessResponse", "UpdateInvoicesSuccessResponse", "UpdateVendorsSuccessResponse", "VoidApPaymentsSuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1VendorsPost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetInvoicesR1SuccessResponse
        if not isinstance(v, GetInvoicesR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetInvoicesR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetInvoicesR2SuccessResponse
        if not isinstance(v, GetInvoicesR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetInvoicesR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetPoReceivingRecordsSuccessResponse
        if not isinstance(v, GetPoReceivingRecordsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPoReceivingRecordsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPurchaseOrdersSuccessResponse
        if not isinstance(v, GetPurchaseOrdersSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPurchaseOrdersSuccessResponse`")
        else:
            match += 1
        # validate data type: GetTaxFormDataSuccessResponse
        if not isinstance(v, GetTaxFormDataSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTaxFormDataSuccessResponse`")
        else:
            match += 1
        # validate data type: GetVendorLocationsSuccessResponse
        if not isinstance(v, GetVendorLocationsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetVendorLocationsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetVendorPickListsSuccessResponse
        if not isinstance(v, GetVendorPickListsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetVendorPickListsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetVendorsSuccessResponse
        if not isinstance(v, GetVendorsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetVendorsSuccessResponse`")
        else:
            match += 1
        # validate data type: MarkInvoicesExportedSuccessResponse
        if not isinstance(v, MarkInvoicesExportedSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarkInvoicesExportedSuccessResponse`")
        else:
            match += 1
        # validate data type: SendInvoicesR1SuccessResponse
        if not isinstance(v, SendInvoicesR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendInvoicesR1SuccessResponse`")
        else:
            match += 1
        # validate data type: SendInvoicesR2SuccessResponse
        if not isinstance(v, SendInvoicesR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendInvoicesR2SuccessResponse`")
        else:
            match += 1
        # validate data type: SendPurchaseOrdersSuccessResponse
        if not isinstance(v, SendPurchaseOrdersSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendPurchaseOrdersSuccessResponse`")
        else:
            match += 1
        # validate data type: SendVendorsSuccessResponse
        if not isinstance(v, SendVendorsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendVendorsSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateInvoicesSuccessResponse
        if not isinstance(v, UpdateInvoicesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateInvoicesSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateVendorsSuccessResponse
        if not isinstance(v, UpdateVendorsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateVendorsSuccessResponse`")
        else:
            match += 1
        # validate data type: VoidApPaymentsSuccessResponse
        if not isinstance(v, VoidApPaymentsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoidApPaymentsSuccessResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1VendorsPost200Response with oneOf schemas: GetInvoicesR1SuccessResponse, GetInvoicesR2SuccessResponse, GetPoReceivingRecordsSuccessResponse, GetPurchaseOrdersSuccessResponse, GetTaxFormDataSuccessResponse, GetVendorLocationsSuccessResponse, GetVendorPickListsSuccessResponse, GetVendorsSuccessResponse, MarkInvoicesExportedSuccessResponse, SendInvoicesR1SuccessResponse, SendInvoicesR2SuccessResponse, SendPurchaseOrdersSuccessResponse, SendVendorsSuccessResponse, UpdateInvoicesSuccessResponse, UpdateVendorsSuccessResponse, VoidApPaymentsSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1VendorsPost200Response with oneOf schemas: GetInvoicesR1SuccessResponse, GetInvoicesR2SuccessResponse, GetPoReceivingRecordsSuccessResponse, GetPurchaseOrdersSuccessResponse, GetTaxFormDataSuccessResponse, GetVendorLocationsSuccessResponse, GetVendorPickListsSuccessResponse, GetVendorsSuccessResponse, MarkInvoicesExportedSuccessResponse, SendInvoicesR1SuccessResponse, SendInvoicesR2SuccessResponse, SendPurchaseOrdersSuccessResponse, SendVendorsSuccessResponse, UpdateInvoicesSuccessResponse, UpdateVendorsSuccessResponse, VoidApPaymentsSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetInvoicesR1SuccessResponse
        try:
            instance.actual_instance = GetInvoicesR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetInvoicesR2SuccessResponse
        try:
            instance.actual_instance = GetInvoicesR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPoReceivingRecordsSuccessResponse
        try:
            instance.actual_instance = GetPoReceivingRecordsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPurchaseOrdersSuccessResponse
        try:
            instance.actual_instance = GetPurchaseOrdersSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTaxFormDataSuccessResponse
        try:
            instance.actual_instance = GetTaxFormDataSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetVendorLocationsSuccessResponse
        try:
            instance.actual_instance = GetVendorLocationsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetVendorPickListsSuccessResponse
        try:
            instance.actual_instance = GetVendorPickListsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetVendorsSuccessResponse
        try:
            instance.actual_instance = GetVendorsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkInvoicesExportedSuccessResponse
        try:
            instance.actual_instance = MarkInvoicesExportedSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendInvoicesR1SuccessResponse
        try:
            instance.actual_instance = SendInvoicesR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendInvoicesR2SuccessResponse
        try:
            instance.actual_instance = SendInvoicesR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendPurchaseOrdersSuccessResponse
        try:
            instance.actual_instance = SendPurchaseOrdersSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendVendorsSuccessResponse
        try:
            instance.actual_instance = SendVendorsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateInvoicesSuccessResponse
        try:
            instance.actual_instance = UpdateInvoicesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateVendorsSuccessResponse
        try:
            instance.actual_instance = UpdateVendorsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoidApPaymentsSuccessResponse
        try:
            instance.actual_instance = VoidApPaymentsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1VendorsPost200Response with oneOf schemas: GetInvoicesR1SuccessResponse, GetInvoicesR2SuccessResponse, GetPoReceivingRecordsSuccessResponse, GetPurchaseOrdersSuccessResponse, GetTaxFormDataSuccessResponse, GetVendorLocationsSuccessResponse, GetVendorPickListsSuccessResponse, GetVendorsSuccessResponse, MarkInvoicesExportedSuccessResponse, SendInvoicesR1SuccessResponse, SendInvoicesR2SuccessResponse, SendPurchaseOrdersSuccessResponse, SendVendorsSuccessResponse, UpdateInvoicesSuccessResponse, UpdateVendorsSuccessResponse, VoidApPaymentsSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1VendorsPost200Response with oneOf schemas: GetInvoicesR1SuccessResponse, GetInvoicesR2SuccessResponse, GetPoReceivingRecordsSuccessResponse, GetPurchaseOrdersSuccessResponse, GetTaxFormDataSuccessResponse, GetVendorLocationsSuccessResponse, GetVendorPickListsSuccessResponse, GetVendorsSuccessResponse, MarkInvoicesExportedSuccessResponse, SendInvoicesR1SuccessResponse, SendInvoicesR2SuccessResponse, SendPurchaseOrdersSuccessResponse, SendVendorsSuccessResponse, UpdateInvoicesSuccessResponse, UpdateVendorsSuccessResponse, VoidApPaymentsSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetInvoicesR1SuccessResponse, GetInvoicesR2SuccessResponse, GetPoReceivingRecordsSuccessResponse, GetPurchaseOrdersSuccessResponse, GetTaxFormDataSuccessResponse, GetVendorLocationsSuccessResponse, GetVendorPickListsSuccessResponse, GetVendorsSuccessResponse, MarkInvoicesExportedSuccessResponse, SendInvoicesR1SuccessResponse, SendInvoicesR2SuccessResponse, SendPurchaseOrdersSuccessResponse, SendVendorsSuccessResponse, UpdateInvoicesSuccessResponse, UpdateVendorsSuccessResponse, VoidApPaymentsSuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



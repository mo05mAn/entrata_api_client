# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_vendors_success_response_result_vendors_vendor_inner_accounts import GetVendorsSuccessResponseResultVendorsVendorInnerAccounts
from openapi_client.models.get_vendors_success_response_result_vendors_vendor_inner_ap_remittances import GetVendorsSuccessResponseResultVendorsVendorInnerApRemittances
from openapi_client.models.get_vendors_success_response_result_vendors_vendor_inner_compliances import GetVendorsSuccessResponseResultVendorsVendorInnerCompliances
from openapi_client.models.get_vendors_success_response_result_vendors_vendor_inner_contacts import GetVendorsSuccessResponseResultVendorsVendorInnerContacts
from openapi_client.models.get_vendors_success_response_result_vendors_vendor_inner_legal_entities import GetVendorsSuccessResponseResultVendorsVendorInnerLegalEntities
from openapi_client.models.get_vendors_success_response_result_vendors_vendor_inner_locations import GetVendorsSuccessResponseResultVendorsVendorInnerLocations
from typing import Optional, Set
from typing_extensions import Self

class GetVendorsSuccessResponseResultVendorsVendorInner(BaseModel):
    """
    GetVendorsSuccessResponseResultVendorsVendorInner
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the vendor.")
    vendor_name: StrictStr = Field(description="Name of the vendor.", alias="vendorName")
    vendor_type_id: StrictStr = Field(description="Unique identifier for the vendor type.", alias="vendorTypeId")
    vendor_type: StrictStr = Field(description="Name of the vendor type.", alias="vendorType")
    status_type_id: StrictStr = Field(description="Unique identifier for the status type.", alias="statusTypeId")
    status: StrictStr = Field(description="Status of the vendor.")
    term_id: StrictStr = Field(description="Unique identifier for the term.", alias="termId")
    term: StrictStr = Field(description="Payment term for the vendor.")
    is_consolidated: StrictStr = Field(description="Indicates if the vendor is consolidated.", alias="isConsolidated")
    external_id: StrictStr = Field(description="External identifier for the vendor.", alias="externalId")
    is_on_site: StrictStr = Field(description="Indicates if the vendor is on site.", alias="isOnSite")
    vendor_category_type_id: StrictStr = Field(description="Unique identifier for the vendor category.", alias="vendorCategoryTypeId")
    vendor_category_type: StrictStr = Field(description="Name of the vendor category.", alias="vendorCategoryType")
    website: StrictStr = Field(description="Website URL of the vendor.")
    notes: Optional[StrictStr] = Field(default=None, description="Notes associated with the vendor.")
    legal_entities: GetVendorsSuccessResponseResultVendorsVendorInnerLegalEntities = Field(alias="legalEntities")
    ap_remittances: GetVendorsSuccessResponseResultVendorsVendorInnerApRemittances = Field(alias="apRemittances")
    contacts: GetVendorsSuccessResponseResultVendorsVendorInnerContacts
    locations: GetVendorsSuccessResponseResultVendorsVendorInnerLocations
    compliances: GetVendorsSuccessResponseResultVendorsVendorInnerCompliances
    accounts: GetVendorsSuccessResponseResultVendorsVendorInnerAccounts
    __properties: ClassVar[List[str]] = ["id", "vendorName", "vendorTypeId", "vendorType", "statusTypeId", "status", "termId", "term", "isConsolidated", "externalId", "isOnSite", "vendorCategoryTypeId", "vendorCategoryType", "website", "notes", "legalEntities", "apRemittances", "contacts", "locations", "compliances", "accounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetVendorsSuccessResponseResultVendorsVendorInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of legal_entities
        if self.legal_entities:
            _dict['legalEntities'] = self.legal_entities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ap_remittances
        if self.ap_remittances:
            _dict['apRemittances'] = self.ap_remittances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contacts
        if self.contacts:
            _dict['contacts'] = self.contacts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locations
        if self.locations:
            _dict['locations'] = self.locations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compliances
        if self.compliances:
            _dict['compliances'] = self.compliances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounts
        if self.accounts:
            _dict['accounts'] = self.accounts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetVendorsSuccessResponseResultVendorsVendorInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "vendorName": obj.get("vendorName"),
            "vendorTypeId": obj.get("vendorTypeId"),
            "vendorType": obj.get("vendorType"),
            "statusTypeId": obj.get("statusTypeId"),
            "status": obj.get("status"),
            "termId": obj.get("termId"),
            "term": obj.get("term"),
            "isConsolidated": obj.get("isConsolidated"),
            "externalId": obj.get("externalId"),
            "isOnSite": obj.get("isOnSite"),
            "vendorCategoryTypeId": obj.get("vendorCategoryTypeId"),
            "vendorCategoryType": obj.get("vendorCategoryType"),
            "website": obj.get("website"),
            "notes": obj.get("notes"),
            "legalEntities": GetVendorsSuccessResponseResultVendorsVendorInnerLegalEntities.from_dict(obj["legalEntities"]) if obj.get("legalEntities") is not None else None,
            "apRemittances": GetVendorsSuccessResponseResultVendorsVendorInnerApRemittances.from_dict(obj["apRemittances"]) if obj.get("apRemittances") is not None else None,
            "contacts": GetVendorsSuccessResponseResultVendorsVendorInnerContacts.from_dict(obj["contacts"]) if obj.get("contacts") is not None else None,
            "locations": GetVendorsSuccessResponseResultVendorsVendorInnerLocations.from_dict(obj["locations"]) if obj.get("locations") is not None else None,
            "compliances": GetVendorsSuccessResponseResultVendorsVendorInnerCompliances.from_dict(obj["compliances"]) if obj.get("compliances") is not None else None,
            "accounts": GetVendorsSuccessResponseResultVendorsVendorInnerAccounts.from_dict(obj["accounts"]) if obj.get("accounts") is not None else None
        })
        return _obj



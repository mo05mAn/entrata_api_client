# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.get_amenities import GetAmenities
from openapi_client.models.get_mits_property_units import GetMitsPropertyUnits
from openapi_client.models.get_property_units import GetPropertyUnits
from openapi_client.models.get_specials_r1 import GetSpecialsR1
from openapi_client.models.get_specials_r2 import GetSpecialsR2
from openapi_client.models.get_specials_r3 import GetSpecialsR3
from openapi_client.models.get_specials_r4 import GetSpecialsR4
from openapi_client.models.get_unit_types import GetUnitTypes
from openapi_client.models.get_units_availability_and_pricing import GetUnitsAvailabilityAndPricing
from openapi_client.models.send_amenities import SendAmenities
from openapi_client.models.send_property_units import SendPropertyUnits
from openapi_client.models.send_special_group import SendSpecialGroup
from openapi_client.models.update_amenities import UpdateAmenities
from openapi_client.models.update_special_group import UpdateSpecialGroup
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1PROPERTYUNITSPOSTREQUESTINNER_ONE_OF_SCHEMAS = ["GetAmenities", "GetMitsPropertyUnits", "GetPropertyUnits", "GetSpecialsR1", "GetSpecialsR2", "GetSpecialsR3", "GetSpecialsR4", "GetUnitTypes", "GetUnitsAvailabilityAndPricing", "SendAmenities", "SendPropertyUnits", "SendSpecialGroup", "UpdateAmenities", "UpdateSpecialGroup"]

class OrgsV1PropertyunitsPostRequestInner(BaseModel):
    """
    OrgsV1PropertyunitsPostRequestInner
    """
    # data type: GetAmenities
    oneof_schema_1_validator: Optional[GetAmenities] = None
    # data type: GetMitsPropertyUnits
    oneof_schema_2_validator: Optional[GetMitsPropertyUnits] = None
    # data type: GetPropertyUnits
    oneof_schema_3_validator: Optional[GetPropertyUnits] = None
    # data type: GetSpecialsR1
    oneof_schema_4_validator: Optional[GetSpecialsR1] = None
    # data type: GetSpecialsR2
    oneof_schema_5_validator: Optional[GetSpecialsR2] = None
    # data type: GetSpecialsR3
    oneof_schema_6_validator: Optional[GetSpecialsR3] = None
    # data type: GetSpecialsR4
    oneof_schema_7_validator: Optional[GetSpecialsR4] = None
    # data type: GetUnitsAvailabilityAndPricing
    oneof_schema_8_validator: Optional[GetUnitsAvailabilityAndPricing] = None
    # data type: GetUnitTypes
    oneof_schema_9_validator: Optional[GetUnitTypes] = None
    # data type: SendAmenities
    oneof_schema_10_validator: Optional[SendAmenities] = None
    # data type: SendPropertyUnits
    oneof_schema_11_validator: Optional[SendPropertyUnits] = None
    # data type: SendSpecialGroup
    oneof_schema_12_validator: Optional[SendSpecialGroup] = None
    # data type: UpdateAmenities
    oneof_schema_13_validator: Optional[UpdateAmenities] = None
    # data type: UpdateSpecialGroup
    oneof_schema_14_validator: Optional[UpdateSpecialGroup] = None
    actual_instance: Optional[Union[GetAmenities, GetMitsPropertyUnits, GetPropertyUnits, GetSpecialsR1, GetSpecialsR2, GetSpecialsR3, GetSpecialsR4, GetUnitTypes, GetUnitsAvailabilityAndPricing, SendAmenities, SendPropertyUnits, SendSpecialGroup, UpdateAmenities, UpdateSpecialGroup]] = None
    one_of_schemas: Set[str] = { "GetAmenities", "GetMitsPropertyUnits", "GetPropertyUnits", "GetSpecialsR1", "GetSpecialsR2", "GetSpecialsR3", "GetSpecialsR4", "GetUnitTypes", "GetUnitsAvailabilityAndPricing", "SendAmenities", "SendPropertyUnits", "SendSpecialGroup", "UpdateAmenities", "UpdateSpecialGroup" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1PropertyunitsPostRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetAmenities
        if not isinstance(v, GetAmenities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetAmenities`")
        else:
            match += 1
        # validate data type: GetMitsPropertyUnits
        if not isinstance(v, GetMitsPropertyUnits):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsPropertyUnits`")
        else:
            match += 1
        # validate data type: GetPropertyUnits
        if not isinstance(v, GetPropertyUnits):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyUnits`")
        else:
            match += 1
        # validate data type: GetSpecialsR1
        if not isinstance(v, GetSpecialsR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR1`")
        else:
            match += 1
        # validate data type: GetSpecialsR2
        if not isinstance(v, GetSpecialsR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR2`")
        else:
            match += 1
        # validate data type: GetSpecialsR3
        if not isinstance(v, GetSpecialsR3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR3`")
        else:
            match += 1
        # validate data type: GetSpecialsR4
        if not isinstance(v, GetSpecialsR4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSpecialsR4`")
        else:
            match += 1
        # validate data type: GetUnitsAvailabilityAndPricing
        if not isinstance(v, GetUnitsAvailabilityAndPricing):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetUnitsAvailabilityAndPricing`")
        else:
            match += 1
        # validate data type: GetUnitTypes
        if not isinstance(v, GetUnitTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetUnitTypes`")
        else:
            match += 1
        # validate data type: SendAmenities
        if not isinstance(v, SendAmenities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendAmenities`")
        else:
            match += 1
        # validate data type: SendPropertyUnits
        if not isinstance(v, SendPropertyUnits):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendPropertyUnits`")
        else:
            match += 1
        # validate data type: SendSpecialGroup
        if not isinstance(v, SendSpecialGroup):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendSpecialGroup`")
        else:
            match += 1
        # validate data type: UpdateAmenities
        if not isinstance(v, UpdateAmenities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateAmenities`")
        else:
            match += 1
        # validate data type: UpdateSpecialGroup
        if not isinstance(v, UpdateSpecialGroup):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateSpecialGroup`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1PropertyunitsPostRequestInner with oneOf schemas: GetAmenities, GetMitsPropertyUnits, GetPropertyUnits, GetSpecialsR1, GetSpecialsR2, GetSpecialsR3, GetSpecialsR4, GetUnitTypes, GetUnitsAvailabilityAndPricing, SendAmenities, SendPropertyUnits, SendSpecialGroup, UpdateAmenities, UpdateSpecialGroup. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1PropertyunitsPostRequestInner with oneOf schemas: GetAmenities, GetMitsPropertyUnits, GetPropertyUnits, GetSpecialsR1, GetSpecialsR2, GetSpecialsR3, GetSpecialsR4, GetUnitTypes, GetUnitsAvailabilityAndPricing, SendAmenities, SendPropertyUnits, SendSpecialGroup, UpdateAmenities, UpdateSpecialGroup. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetAmenities
        try:
            instance.actual_instance = GetAmenities.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsPropertyUnits
        try:
            instance.actual_instance = GetMitsPropertyUnits.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyUnits
        try:
            instance.actual_instance = GetPropertyUnits.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR1
        try:
            instance.actual_instance = GetSpecialsR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR2
        try:
            instance.actual_instance = GetSpecialsR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR3
        try:
            instance.actual_instance = GetSpecialsR3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSpecialsR4
        try:
            instance.actual_instance = GetSpecialsR4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetUnitsAvailabilityAndPricing
        try:
            instance.actual_instance = GetUnitsAvailabilityAndPricing.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetUnitTypes
        try:
            instance.actual_instance = GetUnitTypes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendAmenities
        try:
            instance.actual_instance = SendAmenities.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendPropertyUnits
        try:
            instance.actual_instance = SendPropertyUnits.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendSpecialGroup
        try:
            instance.actual_instance = SendSpecialGroup.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateAmenities
        try:
            instance.actual_instance = UpdateAmenities.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateSpecialGroup
        try:
            instance.actual_instance = UpdateSpecialGroup.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1PropertyunitsPostRequestInner with oneOf schemas: GetAmenities, GetMitsPropertyUnits, GetPropertyUnits, GetSpecialsR1, GetSpecialsR2, GetSpecialsR3, GetSpecialsR4, GetUnitTypes, GetUnitsAvailabilityAndPricing, SendAmenities, SendPropertyUnits, SendSpecialGroup, UpdateAmenities, UpdateSpecialGroup. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1PropertyunitsPostRequestInner with oneOf schemas: GetAmenities, GetMitsPropertyUnits, GetPropertyUnits, GetSpecialsR1, GetSpecialsR2, GetSpecialsR3, GetSpecialsR4, GetUnitTypes, GetUnitsAvailabilityAndPricing, SendAmenities, SendPropertyUnits, SendSpecialGroup, UpdateAmenities, UpdateSpecialGroup. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetAmenities, GetMitsPropertyUnits, GetPropertyUnits, GetSpecialsR1, GetSpecialsR2, GetSpecialsR3, GetSpecialsR4, GetUnitTypes, GetUnitsAvailabilityAndPricing, SendAmenities, SendPropertyUnits, SendSpecialGroup, UpdateAmenities, UpdateSpecialGroup]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



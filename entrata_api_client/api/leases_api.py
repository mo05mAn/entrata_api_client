# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.orgs_v1_leases_post200_response import OrgsV1LeasesPost200Response
from openapi_client.models.orgs_v1_leases_post_request_inner import OrgsV1LeasesPostRequestInner

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LeasesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def orgs_v1_leases_post(
        self,
        orgs: Annotated[StrictStr, Field(description="Client subdomain.")],
        orgs_v1_leases_post_request_inner: Annotated[List[OrgsV1LeasesPostRequestInner], Field(description="## Note:   **sendLeaseDocuments** API accepts files as a form file upload, Please select the option `multipart/form-data` from the Request body dropdown to see further details.  To test the sendLeaseDocuments API or see the additional details, please click the `Try it out` button. ")],
        page_no: Annotated[Optional[StrictInt], Field(description="The page number of paginated respons.")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=5)]], Field(description="The number of items returned in the respnose")] = None,
        x_send_pagination_links: Annotated[Optional[StrictInt], Field(description="Send Pagination Links in Response Body.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrgsV1LeasesPost200Response:
        """Leases related APIs

        ## Note:   **Pagination supported APIs**: `getLeaseActivities, getLeaseDetails(r2), getLeaseDocumentsList, getParcelAlerts, getLeases(r1), getLease(r2)`. 

        :param orgs: Client subdomain. (required)
        :type orgs: str
        :param orgs_v1_leases_post_request_inner: ## Note:   **sendLeaseDocuments** API accepts files as a form file upload, Please select the option `multipart/form-data` from the Request body dropdown to see further details.  To test the sendLeaseDocuments API or see the additional details, please click the `Try it out` button.  (required)
        :type orgs_v1_leases_post_request_inner: List[OrgsV1LeasesPostRequestInner]
        :param page_no: The page number of paginated respons.
        :type page_no: int
        :param per_page: The number of items returned in the respnose
        :type per_page: int
        :param x_send_pagination_links: Send Pagination Links in Response Body.
        :type x_send_pagination_links: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_v1_leases_post_serialize(
            orgs=orgs,
            orgs_v1_leases_post_request_inner=orgs_v1_leases_post_request_inner,
            page_no=page_no,
            per_page=per_page,
            x_send_pagination_links=x_send_pagination_links,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrgsV1LeasesPost200Response",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def orgs_v1_leases_post_with_http_info(
        self,
        orgs: Annotated[StrictStr, Field(description="Client subdomain.")],
        orgs_v1_leases_post_request_inner: Annotated[List[OrgsV1LeasesPostRequestInner], Field(description="## Note:   **sendLeaseDocuments** API accepts files as a form file upload, Please select the option `multipart/form-data` from the Request body dropdown to see further details.  To test the sendLeaseDocuments API or see the additional details, please click the `Try it out` button. ")],
        page_no: Annotated[Optional[StrictInt], Field(description="The page number of paginated respons.")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=5)]], Field(description="The number of items returned in the respnose")] = None,
        x_send_pagination_links: Annotated[Optional[StrictInt], Field(description="Send Pagination Links in Response Body.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrgsV1LeasesPost200Response]:
        """Leases related APIs

        ## Note:   **Pagination supported APIs**: `getLeaseActivities, getLeaseDetails(r2), getLeaseDocumentsList, getParcelAlerts, getLeases(r1), getLease(r2)`. 

        :param orgs: Client subdomain. (required)
        :type orgs: str
        :param orgs_v1_leases_post_request_inner: ## Note:   **sendLeaseDocuments** API accepts files as a form file upload, Please select the option `multipart/form-data` from the Request body dropdown to see further details.  To test the sendLeaseDocuments API or see the additional details, please click the `Try it out` button.  (required)
        :type orgs_v1_leases_post_request_inner: List[OrgsV1LeasesPostRequestInner]
        :param page_no: The page number of paginated respons.
        :type page_no: int
        :param per_page: The number of items returned in the respnose
        :type per_page: int
        :param x_send_pagination_links: Send Pagination Links in Response Body.
        :type x_send_pagination_links: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_v1_leases_post_serialize(
            orgs=orgs,
            orgs_v1_leases_post_request_inner=orgs_v1_leases_post_request_inner,
            page_no=page_no,
            per_page=per_page,
            x_send_pagination_links=x_send_pagination_links,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrgsV1LeasesPost200Response",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def orgs_v1_leases_post_without_preload_content(
        self,
        orgs: Annotated[StrictStr, Field(description="Client subdomain.")],
        orgs_v1_leases_post_request_inner: Annotated[List[OrgsV1LeasesPostRequestInner], Field(description="## Note:   **sendLeaseDocuments** API accepts files as a form file upload, Please select the option `multipart/form-data` from the Request body dropdown to see further details.  To test the sendLeaseDocuments API or see the additional details, please click the `Try it out` button. ")],
        page_no: Annotated[Optional[StrictInt], Field(description="The page number of paginated respons.")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=5)]], Field(description="The number of items returned in the respnose")] = None,
        x_send_pagination_links: Annotated[Optional[StrictInt], Field(description="Send Pagination Links in Response Body.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Leases related APIs

        ## Note:   **Pagination supported APIs**: `getLeaseActivities, getLeaseDetails(r2), getLeaseDocumentsList, getParcelAlerts, getLeases(r1), getLease(r2)`. 

        :param orgs: Client subdomain. (required)
        :type orgs: str
        :param orgs_v1_leases_post_request_inner: ## Note:   **sendLeaseDocuments** API accepts files as a form file upload, Please select the option `multipart/form-data` from the Request body dropdown to see further details.  To test the sendLeaseDocuments API or see the additional details, please click the `Try it out` button.  (required)
        :type orgs_v1_leases_post_request_inner: List[OrgsV1LeasesPostRequestInner]
        :param page_no: The page number of paginated respons.
        :type page_no: int
        :param per_page: The number of items returned in the respnose
        :type per_page: int
        :param x_send_pagination_links: Send Pagination Links in Response Body.
        :type x_send_pagination_links: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_v1_leases_post_serialize(
            orgs=orgs,
            orgs_v1_leases_post_request_inner=orgs_v1_leases_post_request_inner,
            page_no=page_no,
            per_page=per_page,
            x_send_pagination_links=x_send_pagination_links,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrgsV1LeasesPost200Response",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_v1_leases_post_serialize(
        self,
        orgs,
        orgs_v1_leases_post_request_inner,
        page_no,
        per_page,
        x_send_pagination_links,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'OrgsV1LeasesPostRequestInner': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if orgs is not None:
            _path_params['orgs'] = orgs
        # process the query parameters
        if page_no is not None:
            
            _query_params.append(('page_no', page_no))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if x_send_pagination_links is not None:
            _header_params['X-Send-Pagination-Links'] = x_send_pagination_links
        # process the form parameters
        # process the body parameter
        if orgs_v1_leases_post_request_inner is not None:
            _body_params = orgs_v1_leases_post_request_inner


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{orgs}/v1/leases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_specials_r4_success_response_response_result_special_groups_inner_associations import GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerAssociations
from openapi_client.models.get_specials_r4_success_response_response_result_special_groups_inner_lead_source_details_inner import GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerLeadSourceDetailsInner
from openapi_client.models.get_specials_r4_success_response_response_result_special_groups_inner_lease_term_details_inner import GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerLeaseTermDetailsInner
from openapi_client.models.get_specials_r4_success_response_response_result_special_groups_inner_space_configuration_details_inner import GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpaceConfigurationDetailsInner
from openapi_client.models.get_specials_r4_success_response_response_result_special_groups_inner_special_recipient_details_inner import GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialRecipientDetailsInner
from openapi_client.models.get_specials_r4_success_response_response_result_special_groups_inner_special_recipient_trigger_type_details_inner import GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialRecipientTriggerTypeDetailsInner
from openapi_client.models.get_specials_r4_success_response_response_result_special_groups_inner_specials_inner import GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialsInner
from typing import Optional, Set
from typing_extensions import Self

class GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInner(BaseModel):
    """
    GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInner
    """ # noqa: E501
    special_group_id: Optional[StrictStr] = Field(default=None, alias="specialGroupId")
    special_group_name: Optional[StrictStr] = Field(default=None, alias="specialGroupName")
    quantity_budgeted: Optional[StrictStr] = Field(default=None, alias="quantityBudgeted")
    quantity_remaining: Optional[StrictStr] = Field(default=None, alias="quantityRemaining")
    is_active: Optional[StrictStr] = Field(default=None, alias="isActive")
    is_advertised: Optional[StrictStr] = Field(default=None, alias="isAdvertised")
    show_on_website: Optional[StrictStr] = Field(default=None, alias="showOnWebsite")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, alias="endDate")
    description: Optional[StrictStr] = None
    internal_description: Optional[StrictStr] = Field(default=None, alias="internalDescription")
    coupon_code: Optional[StrictStr] = Field(default=None, alias="couponCode")
    special_recipient_details: Optional[List[GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialRecipientDetailsInner]] = Field(default=None, alias="specialRecipientDetails")
    limit_quantity: Optional[StrictStr] = Field(default=None, alias="limitQuantity")
    terms_and_conditions: Optional[StrictStr] = Field(default=None, alias="termsAndConditions")
    lead_source_details: Optional[List[GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerLeadSourceDetailsInner]] = Field(default=None, alias="leadSourceDetails")
    renewal_lease_start_date_range: Optional[StrictStr] = Field(default=None, alias="renewalLeaseStartDateRange")
    prospect_lease_start_date_range: Optional[StrictStr] = Field(default=None, alias="prospectLeaseStartDateRange")
    space_configuration_details: Optional[List[GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpaceConfigurationDetailsInner]] = Field(default=None, alias="spaceConfigurationDetails")
    incentive_limit: Optional[StrictStr] = Field(default=None, alias="incentiveLimit")
    is_selectable: Optional[StrictStr] = Field(default=None, alias="isSelectable")
    associations: Optional[GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerAssociations] = None
    special_recipient_trigger_type_details: Optional[List[GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialRecipientTriggerTypeDetailsInner]] = Field(default=None, alias="specialRecipientTriggerTypeDetails")
    lease_term_details: Optional[List[GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerLeaseTermDetailsInner]] = Field(default=None, alias="leaseTermDetails")
    specials: Optional[List[GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialsInner]] = None
    __properties: ClassVar[List[str]] = ["specialGroupId", "specialGroupName", "quantityBudgeted", "quantityRemaining", "isActive", "isAdvertised", "showOnWebsite", "startDate", "endDate", "description", "internalDescription", "couponCode", "specialRecipientDetails", "limitQuantity", "termsAndConditions", "leadSourceDetails", "renewalLeaseStartDateRange", "prospectLeaseStartDateRange", "spaceConfigurationDetails", "incentiveLimit", "isSelectable", "associations", "specialRecipientTriggerTypeDetails", "leaseTermDetails", "specials"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in special_recipient_details (list)
        _items = []
        if self.special_recipient_details:
            for _item in self.special_recipient_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specialRecipientDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lead_source_details (list)
        _items = []
        if self.lead_source_details:
            for _item in self.lead_source_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['leadSourceDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in space_configuration_details (list)
        _items = []
        if self.space_configuration_details:
            for _item in self.space_configuration_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spaceConfigurationDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of associations
        if self.associations:
            _dict['associations'] = self.associations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in special_recipient_trigger_type_details (list)
        _items = []
        if self.special_recipient_trigger_type_details:
            for _item in self.special_recipient_trigger_type_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specialRecipientTriggerTypeDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lease_term_details (list)
        _items = []
        if self.lease_term_details:
            for _item in self.lease_term_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['leaseTermDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in specials (list)
        _items = []
        if self.specials:
            for _item in self.specials:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specials'] = _items
        # set to None if quantity_budgeted (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_budgeted is None and "quantity_budgeted" in self.model_fields_set:
            _dict['quantityBudgeted'] = None

        # set to None if quantity_remaining (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_remaining is None and "quantity_remaining" in self.model_fields_set:
            _dict['quantityRemaining'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['endDate'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if internal_description (nullable) is None
        # and model_fields_set contains the field
        if self.internal_description is None and "internal_description" in self.model_fields_set:
            _dict['internalDescription'] = None

        # set to None if coupon_code (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_code is None and "coupon_code" in self.model_fields_set:
            _dict['couponCode'] = None

        # set to None if terms_and_conditions (nullable) is None
        # and model_fields_set contains the field
        if self.terms_and_conditions is None and "terms_and_conditions" in self.model_fields_set:
            _dict['termsAndConditions'] = None

        # set to None if renewal_lease_start_date_range (nullable) is None
        # and model_fields_set contains the field
        if self.renewal_lease_start_date_range is None and "renewal_lease_start_date_range" in self.model_fields_set:
            _dict['renewalLeaseStartDateRange'] = None

        # set to None if prospect_lease_start_date_range (nullable) is None
        # and model_fields_set contains the field
        if self.prospect_lease_start_date_range is None and "prospect_lease_start_date_range" in self.model_fields_set:
            _dict['prospectLeaseStartDateRange'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "specialGroupId": obj.get("specialGroupId"),
            "specialGroupName": obj.get("specialGroupName"),
            "quantityBudgeted": obj.get("quantityBudgeted"),
            "quantityRemaining": obj.get("quantityRemaining"),
            "isActive": obj.get("isActive"),
            "isAdvertised": obj.get("isAdvertised"),
            "showOnWebsite": obj.get("showOnWebsite"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "description": obj.get("description"),
            "internalDescription": obj.get("internalDescription"),
            "couponCode": obj.get("couponCode"),
            "specialRecipientDetails": [GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialRecipientDetailsInner.from_dict(_item) for _item in obj["specialRecipientDetails"]] if obj.get("specialRecipientDetails") is not None else None,
            "limitQuantity": obj.get("limitQuantity"),
            "termsAndConditions": obj.get("termsAndConditions"),
            "leadSourceDetails": [GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerLeadSourceDetailsInner.from_dict(_item) for _item in obj["leadSourceDetails"]] if obj.get("leadSourceDetails") is not None else None,
            "renewalLeaseStartDateRange": obj.get("renewalLeaseStartDateRange"),
            "prospectLeaseStartDateRange": obj.get("prospectLeaseStartDateRange"),
            "spaceConfigurationDetails": [GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpaceConfigurationDetailsInner.from_dict(_item) for _item in obj["spaceConfigurationDetails"]] if obj.get("spaceConfigurationDetails") is not None else None,
            "incentiveLimit": obj.get("incentiveLimit"),
            "isSelectable": obj.get("isSelectable"),
            "associations": GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerAssociations.from_dict(obj["associations"]) if obj.get("associations") is not None else None,
            "specialRecipientTriggerTypeDetails": [GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialRecipientTriggerTypeDetailsInner.from_dict(_item) for _item in obj["specialRecipientTriggerTypeDetails"]] if obj.get("specialRecipientTriggerTypeDetails") is not None else None,
            "leaseTermDetails": [GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerLeaseTermDetailsInner.from_dict(_item) for _item in obj["leaseTermDetails"]] if obj.get("leaseTermDetails") is not None else None,
            "specials": [GetSpecialsR4SuccessResponseResponseResultSpecialGroupsInnerSpecialsInner.from_dict(_item) for _item in obj["specials"]] if obj.get("specials") is not None else None
        })
        return _obj



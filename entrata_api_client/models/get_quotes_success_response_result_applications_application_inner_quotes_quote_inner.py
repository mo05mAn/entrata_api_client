# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from entrata_api_client.models.get_quotes_success_response_result_applications_application_inner_quotes_quote_inner_charges import GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerCharges
from entrata_api_client.models.get_quotes_success_response_result_applications_application_inner_quotes_quote_inner_lease_terms import GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerLeaseTerms
from entrata_api_client.models.get_quotes_success_response_result_applications_application_inner_quotes_quote_inner_optional_items import GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerOptionalItems
from entrata_api_client.models.get_quotes_success_response_result_applications_application_inner_quotes_quote_inner_pets import GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerPets
from entrata_api_client.models.get_quotes_success_response_result_applications_application_inner_quotes_quote_inner_quote_provisions import GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerQuoteProvisions
from entrata_api_client.models.get_quotes_success_response_result_applications_application_inner_quotes_quote_inner_services import GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerServices
from typing import Optional, Set
from typing_extensions import Self

class GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInner(BaseModel):
    """
    GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the quote.")
    move_in_date: Optional[StrictStr] = Field(default=None, description="The move-in date for the quoted lease.", alias="moveInDate")
    created_on: Optional[StrictStr] = Field(default=None, description="The date and time when the quote was created.", alias="createdOn")
    accepted_on: Optional[StrictStr] = Field(default=None, description="The date when the quote was accepted.", alias="acceptedOn")
    expires_on: Optional[StrictStr] = Field(default=None, description="The expiration date of the quote.", alias="expiresOn")
    is_selected: Optional[StrictStr] = Field(default=None, description="Indicates whether the quote is selected.", alias="isSelected")
    building_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the building.", alias="buildingId")
    building_name: Optional[StrictStr] = Field(default=None, description="The name of the building.", alias="buildingName")
    floor_plan_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the floor plan.", alias="floorPlanId")
    floor_plan_name: Optional[StrictStr] = Field(default=None, description="The name of the floor plan.", alias="floorPlanName")
    unit_number: Optional[StrictStr] = Field(default=None, description="The unit number for the quoted lease.", alias="unitNumber")
    number_of_bed_rooms: Optional[StrictStr] = Field(default=None, description="The number of bedrooms in the unit.", alias="numberOfBedRooms")
    number_of_bath_rooms: Optional[StrictStr] = Field(default=None, description="The number of bathrooms in the unit.", alias="numberOfBathRooms")
    lease_terms: Optional[GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerLeaseTerms] = Field(default=None, alias="leaseTerms")
    quote_provisions: Optional[GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerQuoteProvisions] = Field(default=None, alias="quoteProvisions")
    optional_items: Optional[GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerOptionalItems] = Field(default=None, alias="optionalItems")
    services: Optional[GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerServices] = None
    pets: Optional[GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerPets] = None
    charges: Optional[GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerCharges] = None
    __properties: ClassVar[List[str]] = ["id", "moveInDate", "createdOn", "acceptedOn", "expiresOn", "isSelected", "buildingId", "buildingName", "floorPlanId", "floorPlanName", "unitNumber", "numberOfBedRooms", "numberOfBathRooms", "leaseTerms", "quoteProvisions", "optionalItems", "services", "pets", "charges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lease_terms
        if self.lease_terms:
            _dict['leaseTerms'] = self.lease_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_provisions
        if self.quote_provisions:
            _dict['quoteProvisions'] = self.quote_provisions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of optional_items
        if self.optional_items:
            _dict['optionalItems'] = self.optional_items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of services
        if self.services:
            _dict['services'] = self.services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pets
        if self.pets:
            _dict['pets'] = self.pets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charges
        if self.charges:
            _dict['charges'] = self.charges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "moveInDate": obj.get("moveInDate"),
            "createdOn": obj.get("createdOn"),
            "acceptedOn": obj.get("acceptedOn"),
            "expiresOn": obj.get("expiresOn"),
            "isSelected": obj.get("isSelected"),
            "buildingId": obj.get("buildingId"),
            "buildingName": obj.get("buildingName"),
            "floorPlanId": obj.get("floorPlanId"),
            "floorPlanName": obj.get("floorPlanName"),
            "unitNumber": obj.get("unitNumber"),
            "numberOfBedRooms": obj.get("numberOfBedRooms"),
            "numberOfBathRooms": obj.get("numberOfBathRooms"),
            "leaseTerms": GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerLeaseTerms.from_dict(obj["leaseTerms"]) if obj.get("leaseTerms") is not None else None,
            "quoteProvisions": GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerQuoteProvisions.from_dict(obj["quoteProvisions"]) if obj.get("quoteProvisions") is not None else None,
            "optionalItems": GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerOptionalItems.from_dict(obj["optionalItems"]) if obj.get("optionalItems") is not None else None,
            "services": GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerServices.from_dict(obj["services"]) if obj.get("services") is not None else None,
            "pets": GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerPets.from_dict(obj["pets"]) if obj.get("pets") is not None else None,
            "charges": GetQuotesSuccessResponseResultApplicationsApplicationInnerQuotesQuoteInnerCharges.from_dict(obj["charges"]) if obj.get("charges") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetUnitsAvailabilityAndPricingMethodParams(BaseModel):
    """
    GetUnitsAvailabilityAndPricingMethodParams
    """ # noqa: E501
    property_id: StrictInt = Field(description="This is a required field. This field accepts single value. Property Id", alias="propertyId")
    floorplan_id: Optional[StrictInt] = Field(default=None, description="  This is an optional field. This field accepts single value. Floorplan Id", alias="floorplanId")
    unit_type_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Unit Type Id", alias="unitTypeId")
    property_unit_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Property Unit Id", alias="propertyUnitId")
    available_units_only: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. If provided as 1 response will contain only available units. And If pr ovided as 0 response will contain all available and unavailable units", alias="availableUnitsOnly")
    unavailable_units_only: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. If provided value as 1 then will return only unavailable units in the response.", alias="unavailableUnitsOnly")
    skip_pricing: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. If provided value as 1 then will not show the rates(default API will r eturn the pricing)", alias="skipPricing")
    show_child_properties: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Shows child properties in result, by default child properties will be included in result.", alias="showChildProperties")
    include_disabled_floorplans: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Flag for implementing Disabled Floorplans on result.", alias="includeDisabledFloorplans")
    include_disabled_units: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Flag for implementing Disabled Units on result.", alias="includeDisabledUnits")
    show_unit_spaces: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. showUnitSpaces", alias="showUnitSpaces")
    use_space_configuration: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Considered if the property has space configuration setup then the rate should return as per space configuration.", alias="useSpaceConfiguration")
    allow_lease_expiration_override: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. If \"1\" is sent then we should override any lease expiration limits aff ecting available units returned/ If \"0\" or node is missing then do cur rent default functionality", alias="allowLeaseExpirationOverride")
    move_in_start_date: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. Desired move in start date for finding unit availability and pricing.", alias="moveInStartDate")
    move_in_end_date: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. Desired move in end date for finding unit availability and pricing.", alias="moveInEndDate")
    __properties: ClassVar[List[str]] = ["propertyId", "floorplanId", "unitTypeId", "propertyUnitId", "availableUnitsOnly", "unavailableUnitsOnly", "skipPricing", "showChildProperties", "includeDisabledFloorplans", "includeDisabledUnits", "showUnitSpaces", "useSpaceConfiguration", "allowLeaseExpirationOverride", "moveInStartDate", "moveInEndDate"]

    @field_validator('available_units_only')
    def available_units_only_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('unavailable_units_only')
    def unavailable_units_only_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('skip_pricing')
    def skip_pricing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('show_child_properties')
    def show_child_properties_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('include_disabled_floorplans')
    def include_disabled_floorplans_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('include_disabled_units')
    def include_disabled_units_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('show_unit_spaces')
    def show_unit_spaces_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('use_space_configuration')
    def use_space_configuration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('allow_lease_expiration_override')
    def allow_lease_expiration_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetUnitsAvailabilityAndPricingMethodParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetUnitsAvailabilityAndPricingMethodParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyId": obj.get("propertyId"),
            "floorplanId": obj.get("floorplanId"),
            "unitTypeId": obj.get("unitTypeId"),
            "propertyUnitId": obj.get("propertyUnitId"),
            "availableUnitsOnly": obj.get("availableUnitsOnly"),
            "unavailableUnitsOnly": obj.get("unavailableUnitsOnly"),
            "skipPricing": obj.get("skipPricing"),
            "showChildProperties": obj.get("showChildProperties"),
            "includeDisabledFloorplans": obj.get("includeDisabledFloorplans"),
            "includeDisabledUnits": obj.get("includeDisabledUnits"),
            "showUnitSpaces": obj.get("showUnitSpaces"),
            "useSpaceConfiguration": obj.get("useSpaceConfiguration"),
            "allowLeaseExpirationOverride": obj.get("allowLeaseExpirationOverride"),
            "moveInStartDate": obj.get("moveInStartDate"),
            "moveInEndDate": obj.get("moveInEndDate")
        })
        return _obj



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from entrata_api_client.models.get_invoices_r1_success_response_result_invoices_invoice_invoice_payments import GetInvoicesR1SuccessResponseResultInvoicesInvoiceInvoicePayments
from entrata_api_client.models.get_invoices_r1_success_response_result_invoices_invoice_line_items import GetInvoicesR1SuccessResponseResultInvoicesInvoiceLineItems
from entrata_api_client.models.get_invoices_r1_success_response_result_invoices_invoice_remittance import GetInvoicesR1SuccessResponseResultInvoicesInvoiceRemittance
from entrata_api_client.models.get_invoices_r1_success_response_result_invoices_invoice_vendor import GetInvoicesR1SuccessResponseResultInvoicesInvoiceVendor
from typing import Optional, Set
from typing_extensions import Self

class GetInvoicesR1SuccessResponseResultInvoicesInvoice(BaseModel):
    """
    GetInvoicesR1SuccessResponseResultInvoicesInvoice
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the invoice")
    is_on_hold: StrictStr = Field(description="Flag indicating if the invoice is on hold", alias="isOnHold")
    invoice_number: StrictStr = Field(description="Invoice number", alias="invoiceNumber")
    var_date: StrictStr = Field(description="Invoice date", alias="date")
    post_month: StrictStr = Field(description="The month the invoice was posted", alias="postMonth")
    due_date: StrictStr = Field(description="Due date of the invoice", alias="dueDate")
    remittance: GetInvoicesR1SuccessResponseResultInvoicesInvoiceRemittance
    vendor: GetInvoicesR1SuccessResponseResultInvoicesInvoiceVendor
    invoice_payments: GetInvoicesR1SuccessResponseResultInvoicesInvoiceInvoicePayments = Field(alias="invoicePayments")
    amount: StrictStr = Field(description="Total invoice amount")
    amount_due: StrictStr = Field(description="Amount due on the invoice", alias="amountDue")
    note: StrictStr = Field(description="Additional note regarding the invoice")
    is_posted: StrictStr = Field(description="Flag indicating if the invoice is posted", alias="isPosted")
    line_items: GetInvoicesR1SuccessResponseResultInvoicesInvoiceLineItems = Field(alias="lineItems")
    __properties: ClassVar[List[str]] = ["id", "isOnHold", "invoiceNumber", "date", "postMonth", "dueDate", "remittance", "vendor", "invoicePayments", "amount", "amountDue", "note", "isPosted", "lineItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInvoicesR1SuccessResponseResultInvoicesInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remittance
        if self.remittance:
            _dict['remittance'] = self.remittance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_payments
        if self.invoice_payments:
            _dict['invoicePayments'] = self.invoice_payments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of line_items
        if self.line_items:
            _dict['lineItems'] = self.line_items.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInvoicesR1SuccessResponseResultInvoicesInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "isOnHold": obj.get("isOnHold"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "date": obj.get("date"),
            "postMonth": obj.get("postMonth"),
            "dueDate": obj.get("dueDate"),
            "remittance": GetInvoicesR1SuccessResponseResultInvoicesInvoiceRemittance.from_dict(obj["remittance"]) if obj.get("remittance") is not None else None,
            "vendor": GetInvoicesR1SuccessResponseResultInvoicesInvoiceVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "invoicePayments": GetInvoicesR1SuccessResponseResultInvoicesInvoiceInvoicePayments.from_dict(obj["invoicePayments"]) if obj.get("invoicePayments") is not None else None,
            "amount": obj.get("amount"),
            "amountDue": obj.get("amountDue"),
            "note": obj.get("note"),
            "isPosted": obj.get("isPosted"),
            "lineItems": GetInvoicesR1SuccessResponseResultInvoicesInvoiceLineItems.from_dict(obj["lineItems"]) if obj.get("lineItems") is not None else None
        })
        return _obj



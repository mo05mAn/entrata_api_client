# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.apply_quote_success_response import ApplyQuoteSuccessResponse
from openapi_client.models.generate_quotes_success_response import GenerateQuotesSuccessResponse
from openapi_client.models.get_lead_events_success_response import GetLeadEventsSuccessResponse
from openapi_client.models.get_lead_pick_lists_r1_success_response import GetLeadPickListsR1SuccessResponse
from openapi_client.models.get_lead_pick_lists_r2_success_response import GetLeadPickListsR2SuccessResponse
from openapi_client.models.get_leads_success_response import GetLeadsSuccessResponse
from openapi_client.models.get_mits_leads_success_response import GetMitsLeadsSuccessResponse
from openapi_client.models.get_quotes_success_response import GetQuotesSuccessResponse
from openapi_client.models.send_leads_success_response import SendLeadsSuccessResponse
from openapi_client.models.send_mits_leads_success_response import SendMitsLeadsSuccessResponse
from openapi_client.models.update_leads_r1_success_response import UpdateLeadsR1SuccessResponse
from openapi_client.models.update_leads_r2_success_response import UpdateLeadsR2SuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1LEADSPOST200RESPONSE_ONE_OF_SCHEMAS = ["ApplyQuoteSuccessResponse", "GenerateQuotesSuccessResponse", "GetLeadEventsSuccessResponse", "GetLeadPickListsR1SuccessResponse", "GetLeadPickListsR2SuccessResponse", "GetLeadsSuccessResponse", "GetMitsLeadsSuccessResponse", "GetQuotesSuccessResponse", "SendLeadsSuccessResponse", "SendMitsLeadsSuccessResponse", "UpdateLeadsR1SuccessResponse", "UpdateLeadsR2SuccessResponse"]

class OrgsV1LeadsPost200Response(BaseModel):
    """
    OrgsV1LeadsPost200Response
    """
    # data type: GetLeadsSuccessResponse
    oneof_schema_1_validator: Optional[GetLeadsSuccessResponse] = None
    # data type: GetLeadEventsSuccessResponse
    oneof_schema_2_validator: Optional[GetLeadEventsSuccessResponse] = None
    # data type: ApplyQuoteSuccessResponse
    oneof_schema_3_validator: Optional[ApplyQuoteSuccessResponse] = None
    # data type: GenerateQuotesSuccessResponse
    oneof_schema_4_validator: Optional[GenerateQuotesSuccessResponse] = None
    # data type: GetLeadPickListsR1SuccessResponse
    oneof_schema_5_validator: Optional[GetLeadPickListsR1SuccessResponse] = None
    # data type: GetLeadPickListsR2SuccessResponse
    oneof_schema_6_validator: Optional[GetLeadPickListsR2SuccessResponse] = None
    # data type: GetMitsLeadsSuccessResponse
    oneof_schema_7_validator: Optional[GetMitsLeadsSuccessResponse] = None
    # data type: GetQuotesSuccessResponse
    oneof_schema_8_validator: Optional[GetQuotesSuccessResponse] = None
    # data type: SendLeadsSuccessResponse
    oneof_schema_9_validator: Optional[SendLeadsSuccessResponse] = None
    # data type: SendMitsLeadsSuccessResponse
    oneof_schema_10_validator: Optional[SendMitsLeadsSuccessResponse] = None
    # data type: UpdateLeadsR1SuccessResponse
    oneof_schema_11_validator: Optional[UpdateLeadsR1SuccessResponse] = None
    # data type: UpdateLeadsR2SuccessResponse
    oneof_schema_12_validator: Optional[UpdateLeadsR2SuccessResponse] = None
    actual_instance: Optional[Union[ApplyQuoteSuccessResponse, GenerateQuotesSuccessResponse, GetLeadEventsSuccessResponse, GetLeadPickListsR1SuccessResponse, GetLeadPickListsR2SuccessResponse, GetLeadsSuccessResponse, GetMitsLeadsSuccessResponse, GetQuotesSuccessResponse, SendLeadsSuccessResponse, SendMitsLeadsSuccessResponse, UpdateLeadsR1SuccessResponse, UpdateLeadsR2SuccessResponse]] = None
    one_of_schemas: Set[str] = { "ApplyQuoteSuccessResponse", "GenerateQuotesSuccessResponse", "GetLeadEventsSuccessResponse", "GetLeadPickListsR1SuccessResponse", "GetLeadPickListsR2SuccessResponse", "GetLeadsSuccessResponse", "GetMitsLeadsSuccessResponse", "GetQuotesSuccessResponse", "SendLeadsSuccessResponse", "SendMitsLeadsSuccessResponse", "UpdateLeadsR1SuccessResponse", "UpdateLeadsR2SuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1LeadsPost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetLeadsSuccessResponse
        if not isinstance(v, GetLeadsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeadsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeadEventsSuccessResponse
        if not isinstance(v, GetLeadEventsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeadEventsSuccessResponse`")
        else:
            match += 1
        # validate data type: ApplyQuoteSuccessResponse
        if not isinstance(v, ApplyQuoteSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplyQuoteSuccessResponse`")
        else:
            match += 1
        # validate data type: GenerateQuotesSuccessResponse
        if not isinstance(v, GenerateQuotesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GenerateQuotesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeadPickListsR1SuccessResponse
        if not isinstance(v, GetLeadPickListsR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeadPickListsR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeadPickListsR2SuccessResponse
        if not isinstance(v, GetLeadPickListsR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeadPickListsR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetMitsLeadsSuccessResponse
        if not isinstance(v, GetMitsLeadsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsLeadsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetQuotesSuccessResponse
        if not isinstance(v, GetQuotesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetQuotesSuccessResponse`")
        else:
            match += 1
        # validate data type: SendLeadsSuccessResponse
        if not isinstance(v, SendLeadsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendLeadsSuccessResponse`")
        else:
            match += 1
        # validate data type: SendMitsLeadsSuccessResponse
        if not isinstance(v, SendMitsLeadsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMitsLeadsSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateLeadsR1SuccessResponse
        if not isinstance(v, UpdateLeadsR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLeadsR1SuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateLeadsR2SuccessResponse
        if not isinstance(v, UpdateLeadsR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLeadsR2SuccessResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1LeadsPost200Response with oneOf schemas: ApplyQuoteSuccessResponse, GenerateQuotesSuccessResponse, GetLeadEventsSuccessResponse, GetLeadPickListsR1SuccessResponse, GetLeadPickListsR2SuccessResponse, GetLeadsSuccessResponse, GetMitsLeadsSuccessResponse, GetQuotesSuccessResponse, SendLeadsSuccessResponse, SendMitsLeadsSuccessResponse, UpdateLeadsR1SuccessResponse, UpdateLeadsR2SuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1LeadsPost200Response with oneOf schemas: ApplyQuoteSuccessResponse, GenerateQuotesSuccessResponse, GetLeadEventsSuccessResponse, GetLeadPickListsR1SuccessResponse, GetLeadPickListsR2SuccessResponse, GetLeadsSuccessResponse, GetMitsLeadsSuccessResponse, GetQuotesSuccessResponse, SendLeadsSuccessResponse, SendMitsLeadsSuccessResponse, UpdateLeadsR1SuccessResponse, UpdateLeadsR2SuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetLeadsSuccessResponse
        try:
            instance.actual_instance = GetLeadsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeadEventsSuccessResponse
        try:
            instance.actual_instance = GetLeadEventsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplyQuoteSuccessResponse
        try:
            instance.actual_instance = ApplyQuoteSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GenerateQuotesSuccessResponse
        try:
            instance.actual_instance = GenerateQuotesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeadPickListsR1SuccessResponse
        try:
            instance.actual_instance = GetLeadPickListsR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeadPickListsR2SuccessResponse
        try:
            instance.actual_instance = GetLeadPickListsR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsLeadsSuccessResponse
        try:
            instance.actual_instance = GetMitsLeadsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetQuotesSuccessResponse
        try:
            instance.actual_instance = GetQuotesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendLeadsSuccessResponse
        try:
            instance.actual_instance = SendLeadsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendMitsLeadsSuccessResponse
        try:
            instance.actual_instance = SendMitsLeadsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLeadsR1SuccessResponse
        try:
            instance.actual_instance = UpdateLeadsR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLeadsR2SuccessResponse
        try:
            instance.actual_instance = UpdateLeadsR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1LeadsPost200Response with oneOf schemas: ApplyQuoteSuccessResponse, GenerateQuotesSuccessResponse, GetLeadEventsSuccessResponse, GetLeadPickListsR1SuccessResponse, GetLeadPickListsR2SuccessResponse, GetLeadsSuccessResponse, GetMitsLeadsSuccessResponse, GetQuotesSuccessResponse, SendLeadsSuccessResponse, SendMitsLeadsSuccessResponse, UpdateLeadsR1SuccessResponse, UpdateLeadsR2SuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1LeadsPost200Response with oneOf schemas: ApplyQuoteSuccessResponse, GenerateQuotesSuccessResponse, GetLeadEventsSuccessResponse, GetLeadPickListsR1SuccessResponse, GetLeadPickListsR2SuccessResponse, GetLeadsSuccessResponse, GetMitsLeadsSuccessResponse, GetQuotesSuccessResponse, SendLeadsSuccessResponse, SendMitsLeadsSuccessResponse, UpdateLeadsR1SuccessResponse, UpdateLeadsR2SuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ApplyQuoteSuccessResponse, GenerateQuotesSuccessResponse, GetLeadEventsSuccessResponse, GetLeadPickListsR1SuccessResponse, GetLeadPickListsR2SuccessResponse, GetLeadsSuccessResponse, GetMitsLeadsSuccessResponse, GetQuotesSuccessResponse, SendLeadsSuccessResponse, SendMitsLeadsSuccessResponse, UpdateLeadsR1SuccessResponse, UpdateLeadsR2SuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



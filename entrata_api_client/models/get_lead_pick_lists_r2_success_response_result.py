# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_customer_relationship_types import GetLeadPickListsR2SuccessResponseResultCustomerRelationshipTypes
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_event_results import GetLeadPickListsR2SuccessResponseResultEventResults
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_event_sub_types import GetLeadPickListsR2SuccessResponseResultEventSubTypes
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_event_types import GetLeadPickListsR2SuccessResponseResultEventTypes
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_lead_statuses import GetLeadPickListsR2SuccessResponseResultLeadStatuses
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_list_item_types import GetLeadPickListsR2SuccessResponseResultListItemTypes
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_property import GetLeadPickListsR2SuccessResponseResultProperty
from openapi_client.models.get_lead_pick_lists_r2_success_response_result_ps_products import GetLeadPickListsR2SuccessResponseResultPsProducts
from typing import Optional, Set
from typing_extensions import Self

class GetLeadPickListsR2SuccessResponseResult(BaseModel):
    """
    The result data of the request.
    """ # noqa: E501
    event_types: Optional[GetLeadPickListsR2SuccessResponseResultEventTypes] = Field(default=None, alias="eventTypes")
    event_sub_types: Optional[GetLeadPickListsR2SuccessResponseResultEventSubTypes] = Field(default=None, alias="eventSubTypes")
    var_property: Optional[GetLeadPickListsR2SuccessResponseResultProperty] = Field(default=None, alias="property")
    event_results: Optional[GetLeadPickListsR2SuccessResponseResultEventResults] = Field(default=None, alias="eventResults")
    lead_statuses: Optional[GetLeadPickListsR2SuccessResponseResultLeadStatuses] = Field(default=None, alias="leadStatuses")
    ps_products: Optional[GetLeadPickListsR2SuccessResponseResultPsProducts] = Field(default=None, alias="psProducts")
    list_item_types: Optional[GetLeadPickListsR2SuccessResponseResultListItemTypes] = Field(default=None, alias="listItemTypes")
    customer_relationship_types: Optional[GetLeadPickListsR2SuccessResponseResultCustomerRelationshipTypes] = Field(default=None, alias="customerRelationshipTypes")
    __properties: ClassVar[List[str]] = ["eventTypes", "eventSubTypes", "property", "eventResults", "leadStatuses", "psProducts", "listItemTypes", "customerRelationshipTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLeadPickListsR2SuccessResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_types
        if self.event_types:
            _dict['eventTypes'] = self.event_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_sub_types
        if self.event_sub_types:
            _dict['eventSubTypes'] = self.event_sub_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_results
        if self.event_results:
            _dict['eventResults'] = self.event_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lead_statuses
        if self.lead_statuses:
            _dict['leadStatuses'] = self.lead_statuses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ps_products
        if self.ps_products:
            _dict['psProducts'] = self.ps_products.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_item_types
        if self.list_item_types:
            _dict['listItemTypes'] = self.list_item_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_relationship_types
        if self.customer_relationship_types:
            _dict['customerRelationshipTypes'] = self.customer_relationship_types.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLeadPickListsR2SuccessResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventTypes": GetLeadPickListsR2SuccessResponseResultEventTypes.from_dict(obj["eventTypes"]) if obj.get("eventTypes") is not None else None,
            "eventSubTypes": GetLeadPickListsR2SuccessResponseResultEventSubTypes.from_dict(obj["eventSubTypes"]) if obj.get("eventSubTypes") is not None else None,
            "property": GetLeadPickListsR2SuccessResponseResultProperty.from_dict(obj["property"]) if obj.get("property") is not None else None,
            "eventResults": GetLeadPickListsR2SuccessResponseResultEventResults.from_dict(obj["eventResults"]) if obj.get("eventResults") is not None else None,
            "leadStatuses": GetLeadPickListsR2SuccessResponseResultLeadStatuses.from_dict(obj["leadStatuses"]) if obj.get("leadStatuses") is not None else None,
            "psProducts": GetLeadPickListsR2SuccessResponseResultPsProducts.from_dict(obj["psProducts"]) if obj.get("psProducts") is not None else None,
            "listItemTypes": GetLeadPickListsR2SuccessResponseResultListItemTypes.from_dict(obj["listItemTypes"]) if obj.get("listItemTypes") is not None else None,
            "customerRelationshipTypes": GetLeadPickListsR2SuccessResponseResultCustomerRelationshipTypes.from_dict(obj["customerRelationshipTypes"]) if obj.get("customerRelationshipTypes") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.get_financial_pick_list_r1_success_response_result_budgets import GetFinancialPickListR1SuccessResponseResultBudgets
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_account_types import GetFinancialPickListR1SuccessResponseResultGlAccountTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_books import GetFinancialPickListR1SuccessResponseResultGlBooks
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_branch_types import GetFinancialPickListR1SuccessResponseResultGlBranchTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_export_batch_types import GetFinancialPickListR1SuccessResponseResultGlExportBatchTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_group_types import GetFinancialPickListR1SuccessResponseResultGlGroupTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_header_status_types import GetFinancialPickListR1SuccessResponseResultGlHeaderStatusTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_header_types import GetFinancialPickListR1SuccessResponseResultGlHeaderTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_ledger_types import GetFinancialPickListR1SuccessResponseResultGlLedgerTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_reconciliation_status_types import GetFinancialPickListR1SuccessResponseResultGlReconciliationStatusTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_transaction_types import GetFinancialPickListR1SuccessResponseResultGlTransactionTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_gl_tree_types import GetFinancialPickListR1SuccessResponseResultGlTreeTypes
from openapi_client.models.get_financial_pick_list_r1_success_response_result_ledger_ids import GetFinancialPickListR1SuccessResponseResultLedgerIds
from typing import Optional, Set
from typing_extensions import Self

class GetFinancialPickListR1SuccessResponseResult(BaseModel):
    """
    GetFinancialPickListR1SuccessResponseResult
    """ # noqa: E501
    gl_group_types: GetFinancialPickListR1SuccessResponseResultGlGroupTypes = Field(alias="GlGroupTypes")
    gl_tree_types: GetFinancialPickListR1SuccessResponseResultGlTreeTypes = Field(alias="GlTreeTypes")
    gl_account_types: GetFinancialPickListR1SuccessResponseResultGlAccountTypes = Field(alias="GlAccountTypes")
    gl_books: GetFinancialPickListR1SuccessResponseResultGlBooks = Field(alias="GlBooks")
    gl_branch_types: GetFinancialPickListR1SuccessResponseResultGlBranchTypes = Field(alias="GlBranchTypes")
    gl_export_batch_types: GetFinancialPickListR1SuccessResponseResultGlExportBatchTypes = Field(alias="GlExportBatchTypes")
    gl_header_status_types: GetFinancialPickListR1SuccessResponseResultGlHeaderStatusTypes = Field(alias="GlHeaderStatusTypes")
    gl_header_types: GetFinancialPickListR1SuccessResponseResultGlHeaderTypes = Field(alias="GlHeaderTypes")
    gl_ledger_types: GetFinancialPickListR1SuccessResponseResultGlLedgerTypes = Field(alias="GlLedgerTypes")
    gl_reconciliation_status_types: GetFinancialPickListR1SuccessResponseResultGlReconciliationStatusTypes = Field(alias="GlReconciliationStatusTypes")
    gl_transaction_types: GetFinancialPickListR1SuccessResponseResultGlTransactionTypes = Field(alias="GlTransactionTypes")
    budgets: GetFinancialPickListR1SuccessResponseResultBudgets = Field(alias="Budgets")
    ledger_ids: GetFinancialPickListR1SuccessResponseResultLedgerIds = Field(alias="LedgerIds")
    __properties: ClassVar[List[str]] = ["GlGroupTypes", "GlTreeTypes", "GlAccountTypes", "GlBooks", "GlBranchTypes", "GlExportBatchTypes", "GlHeaderStatusTypes", "GlHeaderTypes", "GlLedgerTypes", "GlReconciliationStatusTypes", "GlTransactionTypes", "Budgets", "LedgerIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetFinancialPickListR1SuccessResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gl_group_types
        if self.gl_group_types:
            _dict['GlGroupTypes'] = self.gl_group_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_tree_types
        if self.gl_tree_types:
            _dict['GlTreeTypes'] = self.gl_tree_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_account_types
        if self.gl_account_types:
            _dict['GlAccountTypes'] = self.gl_account_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_books
        if self.gl_books:
            _dict['GlBooks'] = self.gl_books.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_branch_types
        if self.gl_branch_types:
            _dict['GlBranchTypes'] = self.gl_branch_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_export_batch_types
        if self.gl_export_batch_types:
            _dict['GlExportBatchTypes'] = self.gl_export_batch_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_header_status_types
        if self.gl_header_status_types:
            _dict['GlHeaderStatusTypes'] = self.gl_header_status_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_header_types
        if self.gl_header_types:
            _dict['GlHeaderTypes'] = self.gl_header_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_ledger_types
        if self.gl_ledger_types:
            _dict['GlLedgerTypes'] = self.gl_ledger_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_reconciliation_status_types
        if self.gl_reconciliation_status_types:
            _dict['GlReconciliationStatusTypes'] = self.gl_reconciliation_status_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_transaction_types
        if self.gl_transaction_types:
            _dict['GlTransactionTypes'] = self.gl_transaction_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of budgets
        if self.budgets:
            _dict['Budgets'] = self.budgets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ledger_ids
        if self.ledger_ids:
            _dict['LedgerIds'] = self.ledger_ids.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetFinancialPickListR1SuccessResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "GlGroupTypes": GetFinancialPickListR1SuccessResponseResultGlGroupTypes.from_dict(obj["GlGroupTypes"]) if obj.get("GlGroupTypes") is not None else None,
            "GlTreeTypes": GetFinancialPickListR1SuccessResponseResultGlTreeTypes.from_dict(obj["GlTreeTypes"]) if obj.get("GlTreeTypes") is not None else None,
            "GlAccountTypes": GetFinancialPickListR1SuccessResponseResultGlAccountTypes.from_dict(obj["GlAccountTypes"]) if obj.get("GlAccountTypes") is not None else None,
            "GlBooks": GetFinancialPickListR1SuccessResponseResultGlBooks.from_dict(obj["GlBooks"]) if obj.get("GlBooks") is not None else None,
            "GlBranchTypes": GetFinancialPickListR1SuccessResponseResultGlBranchTypes.from_dict(obj["GlBranchTypes"]) if obj.get("GlBranchTypes") is not None else None,
            "GlExportBatchTypes": GetFinancialPickListR1SuccessResponseResultGlExportBatchTypes.from_dict(obj["GlExportBatchTypes"]) if obj.get("GlExportBatchTypes") is not None else None,
            "GlHeaderStatusTypes": GetFinancialPickListR1SuccessResponseResultGlHeaderStatusTypes.from_dict(obj["GlHeaderStatusTypes"]) if obj.get("GlHeaderStatusTypes") is not None else None,
            "GlHeaderTypes": GetFinancialPickListR1SuccessResponseResultGlHeaderTypes.from_dict(obj["GlHeaderTypes"]) if obj.get("GlHeaderTypes") is not None else None,
            "GlLedgerTypes": GetFinancialPickListR1SuccessResponseResultGlLedgerTypes.from_dict(obj["GlLedgerTypes"]) if obj.get("GlLedgerTypes") is not None else None,
            "GlReconciliationStatusTypes": GetFinancialPickListR1SuccessResponseResultGlReconciliationStatusTypes.from_dict(obj["GlReconciliationStatusTypes"]) if obj.get("GlReconciliationStatusTypes") is not None else None,
            "GlTransactionTypes": GetFinancialPickListR1SuccessResponseResultGlTransactionTypes.from_dict(obj["GlTransactionTypes"]) if obj.get("GlTransactionTypes") is not None else None,
            "Budgets": GetFinancialPickListR1SuccessResponseResultBudgets.from_dict(obj["Budgets"]) if obj.get("Budgets") is not None else None,
            "LedgerIds": GetFinancialPickListR1SuccessResponseResultLedgerIds.from_dict(obj["LedgerIds"]) if obj.get("LedgerIds") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from entrata_api_client.models.get_ar_payments_success_response_response_result_ar_payments_ar_payment_inner_ar_allocations import GetArPaymentsSuccessResponseResponseResultArPaymentsArPaymentInnerArAllocations
from typing import Optional, Set
from typing_extensions import Self

class GetArPaymentsSuccessResponseResponseResultArPaymentsArPaymentInner(BaseModel):
    """
    GetArPaymentsSuccessResponseResponseResultArPaymentsArPaymentInner
    """ # noqa: E501
    ar_payment_id: Optional[StrictInt] = Field(default=None, description="The ID of the AR payment.", alias="ArPaymentId")
    property_name: Optional[StrictStr] = Field(default=None, description="The name of the property associated with the payment.", alias="PropertyName")
    customer_id: Optional[StrictInt] = Field(default=None, description="The ID of the customer making the payment.", alias="CustomerId")
    customer_first_name: Optional[StrictStr] = Field(default=None, description="The first name of the customer.", alias="CustomerFirstName")
    customer_last_name: Optional[StrictStr] = Field(default=None, description="The last name of the customer.", alias="CustomerLastName")
    unit_number: Optional[StrictInt] = Field(default=None, description="The unit number associated with the property.", alias="UnitNumber")
    email_address: Optional[StrictStr] = Field(default=None, description="The email address of the customer.", alias="EmailAddress")
    payment_amount: Optional[StrictInt] = Field(default=None, description="The amount of the payment.", alias="PaymentAmount")
    payment_date: Optional[StrictStr] = Field(default=None, description="The date when the payment was made.", alias="PaymentDate")
    payment_type: Optional[StrictStr] = Field(default=None, description="The method of payment used.", alias="PaymentType")
    payment_status: Optional[StrictStr] = Field(default=None, description="The status of the payment.", alias="PaymentStatus")
    external_id: Optional[StrictStr] = Field(default=None, description="Customer's secondary number/external identifier.", alias="ExternalId")
    street_line1: Optional[StrictStr] = Field(default=None, description="First line of billing street address.", alias="StreetLine1")
    street_line2: Optional[StrictStr] = Field(default=None, description="Second line of billing street address.", alias="StreetLine2")
    street_line3: Optional[StrictStr] = Field(default=None, description="Third line of billing street address.", alias="StreetLine3")
    city: Optional[StrictStr] = Field(default=None, description="Billing city.", alias="City")
    state_code: Optional[StrictStr] = Field(default=None, description="Billing state code.", alias="StateCode")
    postal_code: Optional[StrictStr] = Field(default=None, description="Billing postal/zip code.", alias="PostalCode")
    phone_number: Optional[StrictStr] = Field(default=None, description="Customer's phone number (processed to remove country code).", alias="PhoneNumber")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code for the payment based on property.", alias="CurrencyCode")
    captured_on: Optional[StrictStr] = Field(default=None, description="Date/time when payment was captured (truncated to 16 characters).", alias="CapturedOn")
    distribute_on: Optional[StrictStr] = Field(default=None, description="Date/time when payment was distributed (truncated to 16 characters).", alias="DistributeOn")
    returned_on: Optional[StrictStr] = Field(default=None, description="Date/time when payment was returned (truncated to 16 characters).", alias="ReturnedOn")
    ar_allocations: GetArPaymentsSuccessResponseResponseResultArPaymentsArPaymentInnerArAllocations = Field(alias="ArAllocations")
    __properties: ClassVar[List[str]] = ["ArPaymentId", "PropertyName", "CustomerId", "CustomerFirstName", "CustomerLastName", "UnitNumber", "EmailAddress", "PaymentAmount", "PaymentDate", "PaymentType", "PaymentStatus", "ExternalId", "StreetLine1", "StreetLine2", "StreetLine3", "City", "StateCode", "PostalCode", "PhoneNumber", "CurrencyCode", "CapturedOn", "DistributeOn", "ReturnedOn", "ArAllocations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetArPaymentsSuccessResponseResponseResultArPaymentsArPaymentInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ar_allocations
        if self.ar_allocations:
            _dict['ArAllocations'] = self.ar_allocations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetArPaymentsSuccessResponseResponseResultArPaymentsArPaymentInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ArPaymentId": obj.get("ArPaymentId"),
            "PropertyName": obj.get("PropertyName"),
            "CustomerId": obj.get("CustomerId"),
            "CustomerFirstName": obj.get("CustomerFirstName"),
            "CustomerLastName": obj.get("CustomerLastName"),
            "UnitNumber": obj.get("UnitNumber"),
            "EmailAddress": obj.get("EmailAddress"),
            "PaymentAmount": obj.get("PaymentAmount"),
            "PaymentDate": obj.get("PaymentDate"),
            "PaymentType": obj.get("PaymentType"),
            "PaymentStatus": obj.get("PaymentStatus"),
            "ExternalId": obj.get("ExternalId"),
            "StreetLine1": obj.get("StreetLine1"),
            "StreetLine2": obj.get("StreetLine2"),
            "StreetLine3": obj.get("StreetLine3"),
            "City": obj.get("City"),
            "StateCode": obj.get("StateCode"),
            "PostalCode": obj.get("PostalCode"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "CurrencyCode": obj.get("CurrencyCode"),
            "CapturedOn": obj.get("CapturedOn"),
            "DistributeOn": obj.get("DistributeOn"),
            "ReturnedOn": obj.get("ReturnedOn"),
            "ArAllocations": GetArPaymentsSuccessResponseResponseResultArPaymentsArPaymentInnerArAllocations.from_dict(obj["ArAllocations"]) if obj.get("ArAllocations") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from entrata_api_client.models.send_special_group_method_params_special_group_lease_term_details_inner import SendSpecialGroupMethodParamsSpecialGroupLeaseTermDetailsInner
from entrata_api_client.models.send_special_group_method_params_special_group_special_recipient_details import SendSpecialGroupMethodParamsSpecialGroupSpecialRecipientDetails
from entrata_api_client.models.send_special_group_method_params_special_group_specials_inner import SendSpecialGroupMethodParamsSpecialGroupSpecialsInner
from typing import Optional, Set
from typing_extensions import Self

class SendSpecialGroupMethodParamsSpecialGroup(BaseModel):
    """
    SendSpecialGroupMethodParamsSpecialGroup
    """ # noqa: E501
    special_group_name: StrictStr = Field(description="This is a required field. This accepts the Special Group name.", alias="specialGroupName")
    internal_description: Optional[StrictStr] = Field(default=None, description="This is an optional field. Internal description not visible to residents.", alias="internalDescription")
    floor_plan_ids: Optional[StrictStr] = Field(default=None, description="This is an optional field. Comma separated floor plan IDs.", alias="floorPlanIds")
    unit_type_ids: Optional[StrictStr] = Field(default=None, description="This is an optional field. Comma separated unit type IDs.", alias="unitTypeIds")
    unit_space_ids: Optional[StrictStr] = Field(default=None, description="This is an optional field. Comma separated unit space IDs.", alias="unitSpaceIds")
    is_active: Optional[StrictStr] = Field(default=None, description="This is an optional field. Determines if special is eligible to be used.", alias="isActive")
    is_web_visible: Optional[StrictStr] = Field(default=None, description="This is an optional field. Determines if special will be shown in advertising.", alias="isWebVisible")
    start_date: Optional[StrictStr] = Field(default=None, description="This is an optional field. Date special will be advertised from.", alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, description="This is an optional field. Date special will be advertised to.", alias="endDate")
    hide_end_date: Optional[StrictStr] = Field(default=None, description="This is an optional field. Determines if special end date will be advertised.", alias="hideEndDate")
    marketing_description: Optional[StrictStr] = Field(default=None, description="This is an optional field. Description shown to residents.", alias="marketingDescription")
    terms_and_conditions: Optional[StrictStr] = Field(default=None, description="This is an optional field. Terms and conditions for specials.", alias="termsAndConditions")
    is_advertised: Optional[StrictStr] = Field(default=None, description="This is an optional field. Determines if special is manual only.", alias="isAdvertised")
    move_in_date_from: Optional[StrictStr] = Field(default=None, description="This is an optional field. Start of move-in date range.", alias="moveInDateFrom")
    move_in_date_to: Optional[StrictStr] = Field(default=None, description="This is an optional field. End of move-in date range.", alias="moveInDateTo")
    renewal_start_date_from: Optional[StrictStr] = Field(default=None, description="This is an optional field. Start of renewal date range.", alias="renewalStartDateFrom")
    renewal_start_date_to: Optional[StrictStr] = Field(default=None, description="This is an optional field. End of renewal date range.", alias="renewalStartDateTo")
    limit_quantity: Optional[StrictStr] = Field(default=None, description="This is an optional field. Allows setting limits on specials.", alias="limitQuantity")
    quantity_budgeted: Optional[StrictStr] = Field(default=None, description="This is an optional field. Limits number of specials given.", alias="quantityBudgeted")
    coupon_code: Optional[StrictStr] = Field(default=None, description="This is an optional field. Promotional code required during application.", alias="couponCode")
    lead_source_id: Optional[StrictStr] = Field(default=None, description="This is an optional field. Source of promo code.", alias="leadSourceId")
    incentive_limit: Optional[StrictStr] = Field(default=None, description="This is an optional field. Number of incentives resident receives.", alias="incentiveLimit")
    is_selectable: Optional[StrictStr] = Field(default=None, description="This is an optional field. If specials incentive count matches limit.", alias="isSelectable")
    lease_term_details: Optional[List[SendSpecialGroupMethodParamsSpecialGroupLeaseTermDetailsInner]] = Field(default=None, alias="leaseTermDetails")
    special_recipient_details: Optional[SendSpecialGroupMethodParamsSpecialGroupSpecialRecipientDetails] = Field(default=None, alias="specialRecipientDetails")
    special_group_space_configuration_ids: Optional[StrictStr] = Field(default=None, description="This is an optional field. Comma separated space configuration IDs.", alias="specialGroupSpaceConfigurationIds")
    specials: Optional[List[SendSpecialGroupMethodParamsSpecialGroupSpecialsInner]] = None
    __properties: ClassVar[List[str]] = ["specialGroupName", "internalDescription", "floorPlanIds", "unitTypeIds", "unitSpaceIds", "isActive", "isWebVisible", "startDate", "endDate", "hideEndDate", "marketingDescription", "termsAndConditions", "isAdvertised", "moveInDateFrom", "moveInDateTo", "renewalStartDateFrom", "renewalStartDateTo", "limitQuantity", "quantityBudgeted", "couponCode", "leadSourceId", "incentiveLimit", "isSelectable", "leaseTermDetails", "specialRecipientDetails", "specialGroupSpaceConfigurationIds", "specials"]

    @field_validator('is_active')
    def is_active_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['0', '1']):
            raise ValueError("must be one of enum values ('0', '1')")
        return value

    @field_validator('is_web_visible')
    def is_web_visible_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['0', '1']):
            raise ValueError("must be one of enum values ('0', '1')")
        return value

    @field_validator('hide_end_date')
    def hide_end_date_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['0', '1']):
            raise ValueError("must be one of enum values ('0', '1')")
        return value

    @field_validator('is_advertised')
    def is_advertised_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['0', '1']):
            raise ValueError("must be one of enum values ('0', '1')")
        return value

    @field_validator('limit_quantity')
    def limit_quantity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['0', '1']):
            raise ValueError("must be one of enum values ('0', '1')")
        return value

    @field_validator('is_selectable')
    def is_selectable_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['0', '1']):
            raise ValueError("must be one of enum values ('0', '1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendSpecialGroupMethodParamsSpecialGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lease_term_details (list)
        _items = []
        if self.lease_term_details:
            for _item in self.lease_term_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['leaseTermDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of special_recipient_details
        if self.special_recipient_details:
            _dict['specialRecipientDetails'] = self.special_recipient_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in specials (list)
        _items = []
        if self.specials:
            for _item in self.specials:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendSpecialGroupMethodParamsSpecialGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "specialGroupName": obj.get("specialGroupName"),
            "internalDescription": obj.get("internalDescription"),
            "floorPlanIds": obj.get("floorPlanIds"),
            "unitTypeIds": obj.get("unitTypeIds"),
            "unitSpaceIds": obj.get("unitSpaceIds"),
            "isActive": obj.get("isActive"),
            "isWebVisible": obj.get("isWebVisible"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "hideEndDate": obj.get("hideEndDate"),
            "marketingDescription": obj.get("marketingDescription"),
            "termsAndConditions": obj.get("termsAndConditions"),
            "isAdvertised": obj.get("isAdvertised"),
            "moveInDateFrom": obj.get("moveInDateFrom"),
            "moveInDateTo": obj.get("moveInDateTo"),
            "renewalStartDateFrom": obj.get("renewalStartDateFrom"),
            "renewalStartDateTo": obj.get("renewalStartDateTo"),
            "limitQuantity": obj.get("limitQuantity"),
            "quantityBudgeted": obj.get("quantityBudgeted"),
            "couponCode": obj.get("couponCode"),
            "leadSourceId": obj.get("leadSourceId"),
            "incentiveLimit": obj.get("incentiveLimit"),
            "isSelectable": obj.get("isSelectable"),
            "leaseTermDetails": [SendSpecialGroupMethodParamsSpecialGroupLeaseTermDetailsInner.from_dict(_item) for _item in obj["leaseTermDetails"]] if obj.get("leaseTermDetails") is not None else None,
            "specialRecipientDetails": SendSpecialGroupMethodParamsSpecialGroupSpecialRecipientDetails.from_dict(obj["specialRecipientDetails"]) if obj.get("specialRecipientDetails") is not None else None,
            "specialGroupSpaceConfigurationIds": obj.get("specialGroupSpaceConfigurationIds"),
            "specials": [SendSpecialGroupMethodParamsSpecialGroupSpecialsInner.from_dict(_item) for _item in obj["specials"]] if obj.get("specials") is not None else None
        })
        return _obj



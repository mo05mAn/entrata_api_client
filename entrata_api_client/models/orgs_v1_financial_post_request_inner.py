# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from entrata_api_client.models.get_ap_codes import GetApCodes
from entrata_api_client.models.get_bank_accounts import GetBankAccounts
from entrata_api_client.models.get_budget_actuals import GetBudgetActuals
from entrata_api_client.models.get_budgets import GetBudgets
from entrata_api_client.models.get_financial_pick_list_r1 import GetFinancialPickListR1
from entrata_api_client.models.get_financial_pick_list_r2 import GetFinancialPickListR2
from entrata_api_client.models.get_gl_transactions import GetGlTransactions
from entrata_api_client.models.get_gl_trees_r1 import GetGlTreesR1
from entrata_api_client.models.get_gl_trees_r2 import GetGlTreesR2
from entrata_api_client.models.get_job_categories import GetJobCategories
from entrata_api_client.models.get_job_cost_budgets import GetJobCostBudgets
from entrata_api_client.models.get_jobs import GetJobs
from entrata_api_client.models.get_transaction_tag_lists import GetTransactionTagLists
from entrata_api_client.models.mark_gl_transactions_exported import MarkGlTransactionsExported
from entrata_api_client.models.send_budgets import SendBudgets
from entrata_api_client.models.send_journal_entries import SendJournalEntries
from entrata_api_client.models.update_budgets import UpdateBudgets
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1FINANCIALPOSTREQUESTINNER_ONE_OF_SCHEMAS = ["GetApCodes", "GetBankAccounts", "GetBudgetActuals", "GetBudgets", "GetFinancialPickListR1", "GetFinancialPickListR2", "GetGlTransactions", "GetGlTreesR1", "GetGlTreesR2", "GetJobCategories", "GetJobCostBudgets", "GetJobs", "GetTransactionTagLists", "MarkGlTransactionsExported", "SendBudgets", "SendJournalEntries", "UpdateBudgets"]

class OrgsV1FinancialPostRequestInner(BaseModel):
    """
    OrgsV1FinancialPostRequestInner
    """
    # data type: GetApCodes
    oneof_schema_1_validator: Optional[GetApCodes] = None
    # data type: GetBankAccounts
    oneof_schema_2_validator: Optional[GetBankAccounts] = None
    # data type: GetBudgetActuals
    oneof_schema_3_validator: Optional[GetBudgetActuals] = None
    # data type: GetBudgets
    oneof_schema_4_validator: Optional[GetBudgets] = None
    # data type: GetFinancialPickListR1
    oneof_schema_5_validator: Optional[GetFinancialPickListR1] = None
    # data type: GetFinancialPickListR2
    oneof_schema_6_validator: Optional[GetFinancialPickListR2] = None
    # data type: GetGlTransactions
    oneof_schema_7_validator: Optional[GetGlTransactions] = None
    # data type: GetGlTreesR1
    oneof_schema_8_validator: Optional[GetGlTreesR1] = None
    # data type: GetGlTreesR2
    oneof_schema_9_validator: Optional[GetGlTreesR2] = None
    # data type: GetJobCategories
    oneof_schema_10_validator: Optional[GetJobCategories] = None
    # data type: GetJobCostBudgets
    oneof_schema_11_validator: Optional[GetJobCostBudgets] = None
    # data type: GetJobs
    oneof_schema_12_validator: Optional[GetJobs] = None
    # data type: GetTransactionTagLists
    oneof_schema_13_validator: Optional[GetTransactionTagLists] = None
    # data type: MarkGlTransactionsExported
    oneof_schema_14_validator: Optional[MarkGlTransactionsExported] = None
    # data type: SendBudgets
    oneof_schema_15_validator: Optional[SendBudgets] = None
    # data type: SendJournalEntries
    oneof_schema_16_validator: Optional[SendJournalEntries] = None
    # data type: UpdateBudgets
    oneof_schema_17_validator: Optional[UpdateBudgets] = None
    actual_instance: Optional[Union[GetApCodes, GetBankAccounts, GetBudgetActuals, GetBudgets, GetFinancialPickListR1, GetFinancialPickListR2, GetGlTransactions, GetGlTreesR1, GetGlTreesR2, GetJobCategories, GetJobCostBudgets, GetJobs, GetTransactionTagLists, MarkGlTransactionsExported, SendBudgets, SendJournalEntries, UpdateBudgets]] = None
    one_of_schemas: Set[str] = { "GetApCodes", "GetBankAccounts", "GetBudgetActuals", "GetBudgets", "GetFinancialPickListR1", "GetFinancialPickListR2", "GetGlTransactions", "GetGlTreesR1", "GetGlTreesR2", "GetJobCategories", "GetJobCostBudgets", "GetJobs", "GetTransactionTagLists", "MarkGlTransactionsExported", "SendBudgets", "SendJournalEntries", "UpdateBudgets" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1FinancialPostRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetApCodes
        if not isinstance(v, GetApCodes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetApCodes`")
        else:
            match += 1
        # validate data type: GetBankAccounts
        if not isinstance(v, GetBankAccounts):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBankAccounts`")
        else:
            match += 1
        # validate data type: GetBudgetActuals
        if not isinstance(v, GetBudgetActuals):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBudgetActuals`")
        else:
            match += 1
        # validate data type: GetBudgets
        if not isinstance(v, GetBudgets):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBudgets`")
        else:
            match += 1
        # validate data type: GetFinancialPickListR1
        if not isinstance(v, GetFinancialPickListR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetFinancialPickListR1`")
        else:
            match += 1
        # validate data type: GetFinancialPickListR2
        if not isinstance(v, GetFinancialPickListR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetFinancialPickListR2`")
        else:
            match += 1
        # validate data type: GetGlTransactions
        if not isinstance(v, GetGlTransactions):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGlTransactions`")
        else:
            match += 1
        # validate data type: GetGlTreesR1
        if not isinstance(v, GetGlTreesR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGlTreesR1`")
        else:
            match += 1
        # validate data type: GetGlTreesR2
        if not isinstance(v, GetGlTreesR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGlTreesR2`")
        else:
            match += 1
        # validate data type: GetJobCategories
        if not isinstance(v, GetJobCategories):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetJobCategories`")
        else:
            match += 1
        # validate data type: GetJobCostBudgets
        if not isinstance(v, GetJobCostBudgets):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetJobCostBudgets`")
        else:
            match += 1
        # validate data type: GetJobs
        if not isinstance(v, GetJobs):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetJobs`")
        else:
            match += 1
        # validate data type: GetTransactionTagLists
        if not isinstance(v, GetTransactionTagLists):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionTagLists`")
        else:
            match += 1
        # validate data type: MarkGlTransactionsExported
        if not isinstance(v, MarkGlTransactionsExported):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarkGlTransactionsExported`")
        else:
            match += 1
        # validate data type: SendBudgets
        if not isinstance(v, SendBudgets):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendBudgets`")
        else:
            match += 1
        # validate data type: SendJournalEntries
        if not isinstance(v, SendJournalEntries):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendJournalEntries`")
        else:
            match += 1
        # validate data type: UpdateBudgets
        if not isinstance(v, UpdateBudgets):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateBudgets`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1FinancialPostRequestInner with oneOf schemas: GetApCodes, GetBankAccounts, GetBudgetActuals, GetBudgets, GetFinancialPickListR1, GetFinancialPickListR2, GetGlTransactions, GetGlTreesR1, GetGlTreesR2, GetJobCategories, GetJobCostBudgets, GetJobs, GetTransactionTagLists, MarkGlTransactionsExported, SendBudgets, SendJournalEntries, UpdateBudgets. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1FinancialPostRequestInner with oneOf schemas: GetApCodes, GetBankAccounts, GetBudgetActuals, GetBudgets, GetFinancialPickListR1, GetFinancialPickListR2, GetGlTransactions, GetGlTreesR1, GetGlTreesR2, GetJobCategories, GetJobCostBudgets, GetJobs, GetTransactionTagLists, MarkGlTransactionsExported, SendBudgets, SendJournalEntries, UpdateBudgets. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetApCodes
        try:
            instance.actual_instance = GetApCodes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBankAccounts
        try:
            instance.actual_instance = GetBankAccounts.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBudgetActuals
        try:
            instance.actual_instance = GetBudgetActuals.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBudgets
        try:
            instance.actual_instance = GetBudgets.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetFinancialPickListR1
        try:
            instance.actual_instance = GetFinancialPickListR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetFinancialPickListR2
        try:
            instance.actual_instance = GetFinancialPickListR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGlTransactions
        try:
            instance.actual_instance = GetGlTransactions.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGlTreesR1
        try:
            instance.actual_instance = GetGlTreesR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGlTreesR2
        try:
            instance.actual_instance = GetGlTreesR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetJobCategories
        try:
            instance.actual_instance = GetJobCategories.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetJobCostBudgets
        try:
            instance.actual_instance = GetJobCostBudgets.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetJobs
        try:
            instance.actual_instance = GetJobs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionTagLists
        try:
            instance.actual_instance = GetTransactionTagLists.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkGlTransactionsExported
        try:
            instance.actual_instance = MarkGlTransactionsExported.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendBudgets
        try:
            instance.actual_instance = SendBudgets.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendJournalEntries
        try:
            instance.actual_instance = SendJournalEntries.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateBudgets
        try:
            instance.actual_instance = UpdateBudgets.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1FinancialPostRequestInner with oneOf schemas: GetApCodes, GetBankAccounts, GetBudgetActuals, GetBudgets, GetFinancialPickListR1, GetFinancialPickListR2, GetGlTransactions, GetGlTreesR1, GetGlTreesR2, GetJobCategories, GetJobCostBudgets, GetJobs, GetTransactionTagLists, MarkGlTransactionsExported, SendBudgets, SendJournalEntries, UpdateBudgets. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1FinancialPostRequestInner with oneOf schemas: GetApCodes, GetBankAccounts, GetBudgetActuals, GetBudgets, GetFinancialPickListR1, GetFinancialPickListR2, GetGlTransactions, GetGlTreesR1, GetGlTreesR2, GetJobCategories, GetJobCostBudgets, GetJobs, GetTransactionTagLists, MarkGlTransactionsExported, SendBudgets, SendJournalEntries, UpdateBudgets. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetApCodes, GetBankAccounts, GetBudgetActuals, GetBudgets, GetFinancialPickListR1, GetFinancialPickListR2, GetGlTransactions, GetGlTreesR1, GetGlTreesR2, GetJobCategories, GetJobCostBudgets, GetJobs, GetTransactionTagLists, MarkGlTransactionsExported, SendBudgets, SendJournalEntries, UpdateBudgets]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



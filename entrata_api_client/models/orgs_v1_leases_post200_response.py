# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.cancel_lease_success_response import CancelLeaseSuccessResponse
from openapi_client.models.get_evicted_leases_success_response import GetEvictedLeasesSuccessResponse
from openapi_client.models.get_expiring_leases_success_response import GetExpiringLeasesSuccessResponse
from openapi_client.models.get_lease_activities_success_response import GetLeaseActivitiesSuccessResponse
from openapi_client.models.get_lease_details_r1_success_response import GetLeaseDetailsR1SuccessResponse
from openapi_client.models.get_lease_details_r2_success_response import GetLeaseDetailsR2SuccessResponse
from openapi_client.models.get_lease_documents_list_success_response import GetLeaseDocumentsListSuccessResponse
from openapi_client.models.get_lease_documents_success_response import GetLeaseDocumentsSuccessResponse
from openapi_client.models.get_lease_pick_list_success_response import GetLeasePickListSuccessResponse
from openapi_client.models.get_leases_r1_success_response import GetLeasesR1SuccessResponse
from openapi_client.models.get_leases_r2_success_response import GetLeasesR2SuccessResponse
from openapi_client.models.get_mits_collections_success_response import GetMitsCollectionsSuccessResponse
from openapi_client.models.get_mits_leases_success_response import GetMitsLeasesSuccessResponse
from openapi_client.models.get_parcel_alerts_success_response import GetParcelAlertsSuccessResponse
from openapi_client.models.get_renters_insurance_policies_success_response import GetRentersInsurancePoliciesSuccessResponse
from openapi_client.models.move_in_lease_success_response import MoveInLeaseSuccessResponse
from openapi_client.models.move_out_lease_success_response import MoveOutLeaseSuccessResponse
from openapi_client.models.on_notice_lease_success_response import OnNoticeLeaseSuccessResponse
from openapi_client.models.send_lease_activities_success_response import SendLeaseActivitiesSuccessResponse
from openapi_client.models.send_lease_documents_success_response import SendLeaseDocumentsSuccessResponse
from openapi_client.models.send_leases_success_response import SendLeasesSuccessResponse
from openapi_client.models.send_renters_insurance_policies_r1_success_response import SendRentersInsurancePoliciesR1SuccessResponse
from openapi_client.models.send_renters_insurance_policies_r2_success_response import SendRentersInsurancePoliciesR2SuccessResponse
from openapi_client.models.send_roommate_groups_r2_success_response import SendRoommateGroupsR2SuccessResponse
from openapi_client.models.send_scheduled_charges_success_response import SendScheduledChargesSuccessResponse
from openapi_client.models.update_lease_success_response import UpdateLeaseSuccessResponse
from openapi_client.models.update_scheduled_charges_r1_success_response import UpdateScheduledChargesR1SuccessResponse
from openapi_client.models.update_scheduled_charges_r2_success_response import UpdateScheduledChargesR2SuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1LEASESPOST200RESPONSE_ONE_OF_SCHEMAS = ["CancelLeaseSuccessResponse", "GetEvictedLeasesSuccessResponse", "GetExpiringLeasesSuccessResponse", "GetLeaseActivitiesSuccessResponse", "GetLeaseDetailsR1SuccessResponse", "GetLeaseDetailsR2SuccessResponse", "GetLeaseDocumentsListSuccessResponse", "GetLeaseDocumentsSuccessResponse", "GetLeasePickListSuccessResponse", "GetLeasesR1SuccessResponse", "GetLeasesR2SuccessResponse", "GetMitsCollectionsSuccessResponse", "GetMitsLeasesSuccessResponse", "GetParcelAlertsSuccessResponse", "GetRentersInsurancePoliciesSuccessResponse", "MoveInLeaseSuccessResponse", "MoveOutLeaseSuccessResponse", "OnNoticeLeaseSuccessResponse", "SendLeaseActivitiesSuccessResponse", "SendLeaseDocumentsSuccessResponse", "SendLeasesSuccessResponse", "SendRentersInsurancePoliciesR1SuccessResponse", "SendRentersInsurancePoliciesR2SuccessResponse", "SendRoommateGroupsR2SuccessResponse", "SendScheduledChargesSuccessResponse", "UpdateLeaseSuccessResponse", "UpdateScheduledChargesR1SuccessResponse", "UpdateScheduledChargesR2SuccessResponse"]

class OrgsV1LeasesPost200Response(BaseModel):
    """
    OrgsV1LeasesPost200Response
    """
    # data type: CancelLeaseSuccessResponse
    oneof_schema_1_validator: Optional[CancelLeaseSuccessResponse] = None
    # data type: GetEvictedLeasesSuccessResponse
    oneof_schema_2_validator: Optional[GetEvictedLeasesSuccessResponse] = None
    # data type: GetExpiringLeasesSuccessResponse
    oneof_schema_3_validator: Optional[GetExpiringLeasesSuccessResponse] = None
    # data type: GetLeaseActivitiesSuccessResponse
    oneof_schema_4_validator: Optional[GetLeaseActivitiesSuccessResponse] = None
    # data type: GetLeaseDetailsR1SuccessResponse
    oneof_schema_5_validator: Optional[GetLeaseDetailsR1SuccessResponse] = None
    # data type: GetLeaseDetailsR2SuccessResponse
    oneof_schema_6_validator: Optional[GetLeaseDetailsR2SuccessResponse] = None
    # data type: GetLeaseDocumentsSuccessResponse
    oneof_schema_7_validator: Optional[GetLeaseDocumentsSuccessResponse] = None
    # data type: GetLeaseDocumentsListSuccessResponse
    oneof_schema_8_validator: Optional[GetLeaseDocumentsListSuccessResponse] = None
    # data type: GetLeasePickListSuccessResponse
    oneof_schema_9_validator: Optional[GetLeasePickListSuccessResponse] = None
    # data type: GetLeasesR1SuccessResponse
    oneof_schema_10_validator: Optional[GetLeasesR1SuccessResponse] = None
    # data type: GetLeasesR2SuccessResponse
    oneof_schema_11_validator: Optional[GetLeasesR2SuccessResponse] = None
    # data type: GetMitsCollectionsSuccessResponse
    oneof_schema_12_validator: Optional[GetMitsCollectionsSuccessResponse] = None
    # data type: GetMitsLeasesSuccessResponse
    oneof_schema_13_validator: Optional[GetMitsLeasesSuccessResponse] = None
    # data type: GetParcelAlertsSuccessResponse
    oneof_schema_14_validator: Optional[GetParcelAlertsSuccessResponse] = None
    # data type: GetRentersInsurancePoliciesSuccessResponse
    oneof_schema_15_validator: Optional[GetRentersInsurancePoliciesSuccessResponse] = None
    # data type: MoveInLeaseSuccessResponse
    oneof_schema_16_validator: Optional[MoveInLeaseSuccessResponse] = None
    # data type: MoveOutLeaseSuccessResponse
    oneof_schema_17_validator: Optional[MoveOutLeaseSuccessResponse] = None
    # data type: OnNoticeLeaseSuccessResponse
    oneof_schema_18_validator: Optional[OnNoticeLeaseSuccessResponse] = None
    # data type: SendLeaseActivitiesSuccessResponse
    oneof_schema_19_validator: Optional[SendLeaseActivitiesSuccessResponse] = None
    # data type: SendLeaseDocumentsSuccessResponse
    oneof_schema_20_validator: Optional[SendLeaseDocumentsSuccessResponse] = None
    # data type: SendLeasesSuccessResponse
    oneof_schema_21_validator: Optional[SendLeasesSuccessResponse] = None
    # data type: SendRentersInsurancePoliciesR1SuccessResponse
    oneof_schema_22_validator: Optional[SendRentersInsurancePoliciesR1SuccessResponse] = None
    # data type: SendRentersInsurancePoliciesR2SuccessResponse
    oneof_schema_23_validator: Optional[SendRentersInsurancePoliciesR2SuccessResponse] = None
    # data type: SendRoommateGroupsR2SuccessResponse
    oneof_schema_24_validator: Optional[SendRoommateGroupsR2SuccessResponse] = None
    # data type: SendScheduledChargesSuccessResponse
    oneof_schema_25_validator: Optional[SendScheduledChargesSuccessResponse] = None
    # data type: UpdateLeaseSuccessResponse
    oneof_schema_26_validator: Optional[UpdateLeaseSuccessResponse] = None
    # data type: UpdateScheduledChargesR1SuccessResponse
    oneof_schema_27_validator: Optional[UpdateScheduledChargesR1SuccessResponse] = None
    # data type: UpdateScheduledChargesR2SuccessResponse
    oneof_schema_28_validator: Optional[UpdateScheduledChargesR2SuccessResponse] = None
    actual_instance: Optional[Union[CancelLeaseSuccessResponse, GetEvictedLeasesSuccessResponse, GetExpiringLeasesSuccessResponse, GetLeaseActivitiesSuccessResponse, GetLeaseDetailsR1SuccessResponse, GetLeaseDetailsR2SuccessResponse, GetLeaseDocumentsListSuccessResponse, GetLeaseDocumentsSuccessResponse, GetLeasePickListSuccessResponse, GetLeasesR1SuccessResponse, GetLeasesR2SuccessResponse, GetMitsCollectionsSuccessResponse, GetMitsLeasesSuccessResponse, GetParcelAlertsSuccessResponse, GetRentersInsurancePoliciesSuccessResponse, MoveInLeaseSuccessResponse, MoveOutLeaseSuccessResponse, OnNoticeLeaseSuccessResponse, SendLeaseActivitiesSuccessResponse, SendLeaseDocumentsSuccessResponse, SendLeasesSuccessResponse, SendRentersInsurancePoliciesR1SuccessResponse, SendRentersInsurancePoliciesR2SuccessResponse, SendRoommateGroupsR2SuccessResponse, SendScheduledChargesSuccessResponse, UpdateLeaseSuccessResponse, UpdateScheduledChargesR1SuccessResponse, UpdateScheduledChargesR2SuccessResponse]] = None
    one_of_schemas: Set[str] = { "CancelLeaseSuccessResponse", "GetEvictedLeasesSuccessResponse", "GetExpiringLeasesSuccessResponse", "GetLeaseActivitiesSuccessResponse", "GetLeaseDetailsR1SuccessResponse", "GetLeaseDetailsR2SuccessResponse", "GetLeaseDocumentsListSuccessResponse", "GetLeaseDocumentsSuccessResponse", "GetLeasePickListSuccessResponse", "GetLeasesR1SuccessResponse", "GetLeasesR2SuccessResponse", "GetMitsCollectionsSuccessResponse", "GetMitsLeasesSuccessResponse", "GetParcelAlertsSuccessResponse", "GetRentersInsurancePoliciesSuccessResponse", "MoveInLeaseSuccessResponse", "MoveOutLeaseSuccessResponse", "OnNoticeLeaseSuccessResponse", "SendLeaseActivitiesSuccessResponse", "SendLeaseDocumentsSuccessResponse", "SendLeasesSuccessResponse", "SendRentersInsurancePoliciesR1SuccessResponse", "SendRentersInsurancePoliciesR2SuccessResponse", "SendRoommateGroupsR2SuccessResponse", "SendScheduledChargesSuccessResponse", "UpdateLeaseSuccessResponse", "UpdateScheduledChargesR1SuccessResponse", "UpdateScheduledChargesR2SuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1LeasesPost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: CancelLeaseSuccessResponse
        if not isinstance(v, CancelLeaseSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CancelLeaseSuccessResponse`")
        else:
            match += 1
        # validate data type: GetEvictedLeasesSuccessResponse
        if not isinstance(v, GetEvictedLeasesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetEvictedLeasesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetExpiringLeasesSuccessResponse
        if not isinstance(v, GetExpiringLeasesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetExpiringLeasesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeaseActivitiesSuccessResponse
        if not isinstance(v, GetLeaseActivitiesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseActivitiesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeaseDetailsR1SuccessResponse
        if not isinstance(v, GetLeaseDetailsR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDetailsR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeaseDetailsR2SuccessResponse
        if not isinstance(v, GetLeaseDetailsR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDetailsR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeaseDocumentsSuccessResponse
        if not isinstance(v, GetLeaseDocumentsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDocumentsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeaseDocumentsListSuccessResponse
        if not isinstance(v, GetLeaseDocumentsListSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDocumentsListSuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeasePickListSuccessResponse
        if not isinstance(v, GetLeasePickListSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeasePickListSuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeasesR1SuccessResponse
        if not isinstance(v, GetLeasesR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeasesR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetLeasesR2SuccessResponse
        if not isinstance(v, GetLeasesR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeasesR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetMitsCollectionsSuccessResponse
        if not isinstance(v, GetMitsCollectionsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsCollectionsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetMitsLeasesSuccessResponse
        if not isinstance(v, GetMitsLeasesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsLeasesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetParcelAlertsSuccessResponse
        if not isinstance(v, GetParcelAlertsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetParcelAlertsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetRentersInsurancePoliciesSuccessResponse
        if not isinstance(v, GetRentersInsurancePoliciesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetRentersInsurancePoliciesSuccessResponse`")
        else:
            match += 1
        # validate data type: MoveInLeaseSuccessResponse
        if not isinstance(v, MoveInLeaseSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MoveInLeaseSuccessResponse`")
        else:
            match += 1
        # validate data type: MoveOutLeaseSuccessResponse
        if not isinstance(v, MoveOutLeaseSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MoveOutLeaseSuccessResponse`")
        else:
            match += 1
        # validate data type: OnNoticeLeaseSuccessResponse
        if not isinstance(v, OnNoticeLeaseSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OnNoticeLeaseSuccessResponse`")
        else:
            match += 1
        # validate data type: SendLeaseActivitiesSuccessResponse
        if not isinstance(v, SendLeaseActivitiesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendLeaseActivitiesSuccessResponse`")
        else:
            match += 1
        # validate data type: SendLeaseDocumentsSuccessResponse
        if not isinstance(v, SendLeaseDocumentsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendLeaseDocumentsSuccessResponse`")
        else:
            match += 1
        # validate data type: SendLeasesSuccessResponse
        if not isinstance(v, SendLeasesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendLeasesSuccessResponse`")
        else:
            match += 1
        # validate data type: SendRentersInsurancePoliciesR1SuccessResponse
        if not isinstance(v, SendRentersInsurancePoliciesR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRentersInsurancePoliciesR1SuccessResponse`")
        else:
            match += 1
        # validate data type: SendRentersInsurancePoliciesR2SuccessResponse
        if not isinstance(v, SendRentersInsurancePoliciesR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRentersInsurancePoliciesR2SuccessResponse`")
        else:
            match += 1
        # validate data type: SendRoommateGroupsR2SuccessResponse
        if not isinstance(v, SendRoommateGroupsR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRoommateGroupsR2SuccessResponse`")
        else:
            match += 1
        # validate data type: SendScheduledChargesSuccessResponse
        if not isinstance(v, SendScheduledChargesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendScheduledChargesSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateLeaseSuccessResponse
        if not isinstance(v, UpdateLeaseSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLeaseSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateScheduledChargesR1SuccessResponse
        if not isinstance(v, UpdateScheduledChargesR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateScheduledChargesR1SuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateScheduledChargesR2SuccessResponse
        if not isinstance(v, UpdateScheduledChargesR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateScheduledChargesR2SuccessResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1LeasesPost200Response with oneOf schemas: CancelLeaseSuccessResponse, GetEvictedLeasesSuccessResponse, GetExpiringLeasesSuccessResponse, GetLeaseActivitiesSuccessResponse, GetLeaseDetailsR1SuccessResponse, GetLeaseDetailsR2SuccessResponse, GetLeaseDocumentsListSuccessResponse, GetLeaseDocumentsSuccessResponse, GetLeasePickListSuccessResponse, GetLeasesR1SuccessResponse, GetLeasesR2SuccessResponse, GetMitsCollectionsSuccessResponse, GetMitsLeasesSuccessResponse, GetParcelAlertsSuccessResponse, GetRentersInsurancePoliciesSuccessResponse, MoveInLeaseSuccessResponse, MoveOutLeaseSuccessResponse, OnNoticeLeaseSuccessResponse, SendLeaseActivitiesSuccessResponse, SendLeaseDocumentsSuccessResponse, SendLeasesSuccessResponse, SendRentersInsurancePoliciesR1SuccessResponse, SendRentersInsurancePoliciesR2SuccessResponse, SendRoommateGroupsR2SuccessResponse, SendScheduledChargesSuccessResponse, UpdateLeaseSuccessResponse, UpdateScheduledChargesR1SuccessResponse, UpdateScheduledChargesR2SuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1LeasesPost200Response with oneOf schemas: CancelLeaseSuccessResponse, GetEvictedLeasesSuccessResponse, GetExpiringLeasesSuccessResponse, GetLeaseActivitiesSuccessResponse, GetLeaseDetailsR1SuccessResponse, GetLeaseDetailsR2SuccessResponse, GetLeaseDocumentsListSuccessResponse, GetLeaseDocumentsSuccessResponse, GetLeasePickListSuccessResponse, GetLeasesR1SuccessResponse, GetLeasesR2SuccessResponse, GetMitsCollectionsSuccessResponse, GetMitsLeasesSuccessResponse, GetParcelAlertsSuccessResponse, GetRentersInsurancePoliciesSuccessResponse, MoveInLeaseSuccessResponse, MoveOutLeaseSuccessResponse, OnNoticeLeaseSuccessResponse, SendLeaseActivitiesSuccessResponse, SendLeaseDocumentsSuccessResponse, SendLeasesSuccessResponse, SendRentersInsurancePoliciesR1SuccessResponse, SendRentersInsurancePoliciesR2SuccessResponse, SendRoommateGroupsR2SuccessResponse, SendScheduledChargesSuccessResponse, UpdateLeaseSuccessResponse, UpdateScheduledChargesR1SuccessResponse, UpdateScheduledChargesR2SuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into CancelLeaseSuccessResponse
        try:
            instance.actual_instance = CancelLeaseSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetEvictedLeasesSuccessResponse
        try:
            instance.actual_instance = GetEvictedLeasesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetExpiringLeasesSuccessResponse
        try:
            instance.actual_instance = GetExpiringLeasesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseActivitiesSuccessResponse
        try:
            instance.actual_instance = GetLeaseActivitiesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDetailsR1SuccessResponse
        try:
            instance.actual_instance = GetLeaseDetailsR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDetailsR2SuccessResponse
        try:
            instance.actual_instance = GetLeaseDetailsR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDocumentsSuccessResponse
        try:
            instance.actual_instance = GetLeaseDocumentsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDocumentsListSuccessResponse
        try:
            instance.actual_instance = GetLeaseDocumentsListSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeasePickListSuccessResponse
        try:
            instance.actual_instance = GetLeasePickListSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeasesR1SuccessResponse
        try:
            instance.actual_instance = GetLeasesR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeasesR2SuccessResponse
        try:
            instance.actual_instance = GetLeasesR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsCollectionsSuccessResponse
        try:
            instance.actual_instance = GetMitsCollectionsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsLeasesSuccessResponse
        try:
            instance.actual_instance = GetMitsLeasesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetParcelAlertsSuccessResponse
        try:
            instance.actual_instance = GetParcelAlertsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetRentersInsurancePoliciesSuccessResponse
        try:
            instance.actual_instance = GetRentersInsurancePoliciesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MoveInLeaseSuccessResponse
        try:
            instance.actual_instance = MoveInLeaseSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MoveOutLeaseSuccessResponse
        try:
            instance.actual_instance = MoveOutLeaseSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OnNoticeLeaseSuccessResponse
        try:
            instance.actual_instance = OnNoticeLeaseSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendLeaseActivitiesSuccessResponse
        try:
            instance.actual_instance = SendLeaseActivitiesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendLeaseDocumentsSuccessResponse
        try:
            instance.actual_instance = SendLeaseDocumentsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendLeasesSuccessResponse
        try:
            instance.actual_instance = SendLeasesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRentersInsurancePoliciesR1SuccessResponse
        try:
            instance.actual_instance = SendRentersInsurancePoliciesR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRentersInsurancePoliciesR2SuccessResponse
        try:
            instance.actual_instance = SendRentersInsurancePoliciesR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRoommateGroupsR2SuccessResponse
        try:
            instance.actual_instance = SendRoommateGroupsR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendScheduledChargesSuccessResponse
        try:
            instance.actual_instance = SendScheduledChargesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLeaseSuccessResponse
        try:
            instance.actual_instance = UpdateLeaseSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateScheduledChargesR1SuccessResponse
        try:
            instance.actual_instance = UpdateScheduledChargesR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateScheduledChargesR2SuccessResponse
        try:
            instance.actual_instance = UpdateScheduledChargesR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1LeasesPost200Response with oneOf schemas: CancelLeaseSuccessResponse, GetEvictedLeasesSuccessResponse, GetExpiringLeasesSuccessResponse, GetLeaseActivitiesSuccessResponse, GetLeaseDetailsR1SuccessResponse, GetLeaseDetailsR2SuccessResponse, GetLeaseDocumentsListSuccessResponse, GetLeaseDocumentsSuccessResponse, GetLeasePickListSuccessResponse, GetLeasesR1SuccessResponse, GetLeasesR2SuccessResponse, GetMitsCollectionsSuccessResponse, GetMitsLeasesSuccessResponse, GetParcelAlertsSuccessResponse, GetRentersInsurancePoliciesSuccessResponse, MoveInLeaseSuccessResponse, MoveOutLeaseSuccessResponse, OnNoticeLeaseSuccessResponse, SendLeaseActivitiesSuccessResponse, SendLeaseDocumentsSuccessResponse, SendLeasesSuccessResponse, SendRentersInsurancePoliciesR1SuccessResponse, SendRentersInsurancePoliciesR2SuccessResponse, SendRoommateGroupsR2SuccessResponse, SendScheduledChargesSuccessResponse, UpdateLeaseSuccessResponse, UpdateScheduledChargesR1SuccessResponse, UpdateScheduledChargesR2SuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1LeasesPost200Response with oneOf schemas: CancelLeaseSuccessResponse, GetEvictedLeasesSuccessResponse, GetExpiringLeasesSuccessResponse, GetLeaseActivitiesSuccessResponse, GetLeaseDetailsR1SuccessResponse, GetLeaseDetailsR2SuccessResponse, GetLeaseDocumentsListSuccessResponse, GetLeaseDocumentsSuccessResponse, GetLeasePickListSuccessResponse, GetLeasesR1SuccessResponse, GetLeasesR2SuccessResponse, GetMitsCollectionsSuccessResponse, GetMitsLeasesSuccessResponse, GetParcelAlertsSuccessResponse, GetRentersInsurancePoliciesSuccessResponse, MoveInLeaseSuccessResponse, MoveOutLeaseSuccessResponse, OnNoticeLeaseSuccessResponse, SendLeaseActivitiesSuccessResponse, SendLeaseDocumentsSuccessResponse, SendLeasesSuccessResponse, SendRentersInsurancePoliciesR1SuccessResponse, SendRentersInsurancePoliciesR2SuccessResponse, SendRoommateGroupsR2SuccessResponse, SendScheduledChargesSuccessResponse, UpdateLeaseSuccessResponse, UpdateScheduledChargesR1SuccessResponse, UpdateScheduledChargesR2SuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CancelLeaseSuccessResponse, GetEvictedLeasesSuccessResponse, GetExpiringLeasesSuccessResponse, GetLeaseActivitiesSuccessResponse, GetLeaseDetailsR1SuccessResponse, GetLeaseDetailsR2SuccessResponse, GetLeaseDocumentsListSuccessResponse, GetLeaseDocumentsSuccessResponse, GetLeasePickListSuccessResponse, GetLeasesR1SuccessResponse, GetLeasesR2SuccessResponse, GetMitsCollectionsSuccessResponse, GetMitsLeasesSuccessResponse, GetParcelAlertsSuccessResponse, GetRentersInsurancePoliciesSuccessResponse, MoveInLeaseSuccessResponse, MoveOutLeaseSuccessResponse, OnNoticeLeaseSuccessResponse, SendLeaseActivitiesSuccessResponse, SendLeaseDocumentsSuccessResponse, SendLeasesSuccessResponse, SendRentersInsurancePoliciesR1SuccessResponse, SendRentersInsurancePoliciesR2SuccessResponse, SendRoommateGroupsR2SuccessResponse, SendScheduledChargesSuccessResponse, UpdateLeaseSuccessResponse, UpdateScheduledChargesR1SuccessResponse, UpdateScheduledChargesR2SuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



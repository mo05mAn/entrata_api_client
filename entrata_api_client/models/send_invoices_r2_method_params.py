# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SendInvoicesR2MethodParams(BaseModel):
    """
    SendInvoicesR2MethodParams
    """ # noqa: E501
    invoice_type_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Supports 1=\"Standard\", 8 = \"Catalog\" and 17 = \"Standard-Job/Contract\" types. By default type \"Standard\" is inserted.", alias="invoiceTypeId")
    ap_payee_id: StrictInt = Field(description="This is a required field. This field accepts single value. Child element of apHeader. Id of a vendor who generated the invoice.", alias="apPayeeId")
    ap_payee_location_id: StrictInt = Field(description="This is a required field. This field accepts single value. Child element of apHeader. Location Id of a vendor who generated the invoice.", alias="apPayeeLocationId")
    routing_tag_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apHeader. This is conditionally required, depends upo n the \"Require Routing Tags on Invoices\" setting.", alias="routingTagId")
    invoice_number: StrictStr = Field(description="This is a required field. This field accepts single value. Child element of apHeader. Invoice Number.", alias="invoiceNumber")
    post_month: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. Accepts date in MM/YYYY format.", alias="postMonth")
    invoice_date: date = Field(description="This is a required field. This field accepts single value. Child element of apHeader. Invoice date. Must be of format MM/DD/YYYY.", alias="invoiceDate")
    due_date: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. Accepts date in MM/DD/YYYY format.", alias="dueDate")
    shipping: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This will specify the shipping amount.")
    discount: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This will specify the discount amount.")
    sales_tax: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This will specify the sales tax of the invoice.", alias="salesTax")
    invoice_total: StrictInt = Field(description="This is a required field. This field accepts single value. Child element of apHeader. Total amount of invoice.", alias="invoiceTotal")
    note: Optional[StrictStr] = Field(default=None, description="  This is an optional field. This field accepts single value. This field will be used to specify the additional details of the invoice.")
    invoice_image_url: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. If this node is provided, it should be a valid URL.", alias="invoiceImageUrl")
    is_consolidated: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apHeader. Accepts \"0\" or \"1\" Only.", alias="isConsolidated")
    is_on_hold: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apHeader. Accepts \"0\" or \"1\" Only.", alias="isOnHold")
    property_id: StrictInt = Field(description="  This is a required field. This field accepts single value. Child element of apDetail.", alias="propertyId")
    gl_account_id: StrictInt = Field(description="This is a required field. This field accepts single value. Child element of apDetail.", alias="glAccountId")
    property_building_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apDetail.", alias="propertyBuildingId")
    property_unit_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apDetail.", alias="propertyUnitId")
    description: StrictStr = Field(description="This is a required field. This field accepts single value. Child element of apDetail.")
    quantity: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apDetail.")
    rate: StrictInt = Field(description="This is a required field. This field accepts single value. Child element of apDetail.")
    unit_of_measure_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apDetail. Only valid for Catalog type invoices.", alias="unitOfMeasureId")
    is_waive1099: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apDetail. Accepts \"0\" or \"1\" Only.", alias="isWaive1099")
    po_detail_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts \"Line Item Id\" of Purchase Order.", alias="poDetailId")
    receiving_record_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Conditional Required(Node is mandatory only if the poDetailId value is provided in request). This node accepts \"Receiving Record Id\" of Purc hase Order Line Item for the \"Catalog\" type.", alias="receivingRecordId")
    invoice_payment_id: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of invoicePayment.", alias="invoicePaymentId")
    payment_amount: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of invoicePayment under apDetail.", alias="paymentAmount")
    file_data: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of file. Base64 encoded file data.", alias="fileData")
    is_paused: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of apBatch. Accepts \"0\" or \"1\" Only.", alias="isPaused")
    is_posted: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node specifies whether the invoice is posted or unposted. Accepts \"0\" or \"1\" Only.", alias="isPosted")
    payment_type_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of invoicePayment.", alias="paymentTypeId")
    payment_number: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of invoicePayment under invoicePayments.", alias="paymentNumber")
    payment_date: Optional[date] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of invoicePayment under invoicePayments. Must be of for mat MM/DD/YYYY.", alias="paymentDate")
    payment_memo: Optional[StrictStr] = Field(default=None, description="This is an optional field. This field accepts single value. Child element of invoicePayment under invoicePayments.", alias="paymentMemo")
    custom_tag_id: Optional[StrictInt] = Field(default=None, description="This is an optional field. This field accepts single value. This node accepts custom Tag Id of the invoice. If customTagId is not provided, then PO`s custom Tag Id would gets associates to invoice thr ough poDetailId node", alias="customTagId")
    ap_code_id: StrictInt = Field(description="This is a required field. This field accepts single value. The required node in case of jobCost invoiceType", alias="apCodeId")
    ap_contract_id: StrictInt = Field(description="This is a required field. This field accepts single value. The required node in case of jobCost invoiceType", alias="apContractId")
    __properties: ClassVar[List[str]] = ["invoiceTypeId", "apPayeeId", "apPayeeLocationId", "routingTagId", "invoiceNumber", "postMonth", "invoiceDate", "dueDate", "shipping", "discount", "salesTax", "invoiceTotal", "note", "invoiceImageUrl", "isConsolidated", "isOnHold", "propertyId", "glAccountId", "propertyBuildingId", "propertyUnitId", "description", "quantity", "rate", "unitOfMeasureId", "isWaive1099", "poDetailId", "receivingRecordId", "invoicePaymentId", "paymentAmount", "fileData", "isPaused", "isPosted", "paymentTypeId", "paymentNumber", "paymentDate", "paymentMemo", "customTagId", "apCodeId", "apContractId"]

    @field_validator('is_consolidated')
    def is_consolidated_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('is_on_hold')
    def is_on_hold_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('is_waive1099')
    def is_waive1099_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('is_paused')
    def is_paused_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('is_posted')
    def is_posted_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendInvoicesR2MethodParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendInvoicesR2MethodParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceTypeId": obj.get("invoiceTypeId"),
            "apPayeeId": obj.get("apPayeeId"),
            "apPayeeLocationId": obj.get("apPayeeLocationId"),
            "routingTagId": obj.get("routingTagId"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "postMonth": obj.get("postMonth"),
            "invoiceDate": obj.get("invoiceDate"),
            "dueDate": obj.get("dueDate"),
            "shipping": obj.get("shipping"),
            "discount": obj.get("discount"),
            "salesTax": obj.get("salesTax"),
            "invoiceTotal": obj.get("invoiceTotal"),
            "note": obj.get("note"),
            "invoiceImageUrl": obj.get("invoiceImageUrl"),
            "isConsolidated": obj.get("isConsolidated"),
            "isOnHold": obj.get("isOnHold"),
            "propertyId": obj.get("propertyId"),
            "glAccountId": obj.get("glAccountId"),
            "propertyBuildingId": obj.get("propertyBuildingId"),
            "propertyUnitId": obj.get("propertyUnitId"),
            "description": obj.get("description"),
            "quantity": obj.get("quantity"),
            "rate": obj.get("rate"),
            "unitOfMeasureId": obj.get("unitOfMeasureId"),
            "isWaive1099": obj.get("isWaive1099"),
            "poDetailId": obj.get("poDetailId"),
            "receivingRecordId": obj.get("receivingRecordId"),
            "invoicePaymentId": obj.get("invoicePaymentId"),
            "paymentAmount": obj.get("paymentAmount"),
            "fileData": obj.get("fileData"),
            "isPaused": obj.get("isPaused"),
            "isPosted": obj.get("isPosted"),
            "paymentTypeId": obj.get("paymentTypeId"),
            "paymentNumber": obj.get("paymentNumber"),
            "paymentDate": obj.get("paymentDate"),
            "paymentMemo": obj.get("paymentMemo"),
            "customTagId": obj.get("customTagId"),
            "apCodeId": obj.get("apCodeId"),
            "apContractId": obj.get("apContractId")
        })
        return _obj



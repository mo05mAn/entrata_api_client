# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from entrata_api_client.models.delete_property_media_success_response import DeletePropertyMediaSuccessResponse
from entrata_api_client.models.get_amenity_reservations_success_response import GetAmenityReservationsSuccessResponse
from entrata_api_client.models.get_calendar_availability_r1_success_response import GetCalendarAvailabilityR1SuccessResponse
from entrata_api_client.models.get_calendar_availability_r2_success_response import GetCalendarAvailabilityR2SuccessResponse
from entrata_api_client.models.get_floor_plans_success_response import GetFloorPlansSuccessResponse
from entrata_api_client.models.get_pet_types_success_response import GetPetTypesSuccessResponse
from entrata_api_client.models.get_phone_number_success_response import GetPhoneNumberSuccessResponse
from entrata_api_client.models.get_properties_success_response import GetPropertiesSuccessResponse
from entrata_api_client.models.get_property_add_ons_success_response import GetPropertyAddOnsSuccessResponse
from entrata_api_client.models.get_property_announcements_success_response import GetPropertyAnnouncementsSuccessResponse
from entrata_api_client.models.get_property_media_success_response import GetPropertyMediaSuccessResponse
from entrata_api_client.models.get_property_pick_lists_r1_success_response import GetPropertyPickListsR1SuccessResponse
from entrata_api_client.models.get_property_pick_lists_r2_success_response import GetPropertyPickListsR2SuccessResponse
from entrata_api_client.models.get_rentable_items_success_response import GetRentableItemsSuccessResponse
from entrata_api_client.models.get_reservable_amenities_success_response import GetReservableAmenitiesSuccessResponse
from entrata_api_client.models.get_websites_success_response import GetWebsitesSuccessResponse
from entrata_api_client.models.send_floorplans_success_response import SendFloorplansSuccessResponse
from entrata_api_client.models.send_property_media_success_response import SendPropertyMediaSuccessResponse
from entrata_api_client.models.send_rentable_items_success_response import SendRentableItemsSuccessResponse
from entrata_api_client.models.update_property_media_success_response import UpdatePropertyMediaSuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1PROPERTIESPOST200RESPONSE_ONE_OF_SCHEMAS = ["DeletePropertyMediaSuccessResponse", "GetAmenityReservationsSuccessResponse", "GetCalendarAvailabilityR1SuccessResponse", "GetCalendarAvailabilityR2SuccessResponse", "GetFloorPlansSuccessResponse", "GetPetTypesSuccessResponse", "GetPhoneNumberSuccessResponse", "GetPropertiesSuccessResponse", "GetPropertyAddOnsSuccessResponse", "GetPropertyAnnouncementsSuccessResponse", "GetPropertyMediaSuccessResponse", "GetPropertyPickListsR1SuccessResponse", "GetPropertyPickListsR2SuccessResponse", "GetRentableItemsSuccessResponse", "GetReservableAmenitiesSuccessResponse", "GetWebsitesSuccessResponse", "SendFloorplansSuccessResponse", "SendPropertyMediaSuccessResponse", "SendRentableItemsSuccessResponse", "UpdatePropertyMediaSuccessResponse"]

class OrgsV1PropertiesPost200Response(BaseModel):
    """
    OrgsV1PropertiesPost200Response
    """
    # data type: GetAmenityReservationsSuccessResponse
    oneof_schema_1_validator: Optional[GetAmenityReservationsSuccessResponse] = None
    # data type: GetCalendarAvailabilityR1SuccessResponse
    oneof_schema_2_validator: Optional[GetCalendarAvailabilityR1SuccessResponse] = None
    # data type: GetCalendarAvailabilityR2SuccessResponse
    oneof_schema_3_validator: Optional[GetCalendarAvailabilityR2SuccessResponse] = None
    # data type: GetFloorPlansSuccessResponse
    oneof_schema_4_validator: Optional[GetFloorPlansSuccessResponse] = None
    # data type: GetPetTypesSuccessResponse
    oneof_schema_5_validator: Optional[GetPetTypesSuccessResponse] = None
    # data type: GetPropertiesSuccessResponse
    oneof_schema_6_validator: Optional[GetPropertiesSuccessResponse] = None
    # data type: GetPropertyAddOnsSuccessResponse
    oneof_schema_7_validator: Optional[GetPropertyAddOnsSuccessResponse] = None
    # data type: GetPropertyAnnouncementsSuccessResponse
    oneof_schema_8_validator: Optional[GetPropertyAnnouncementsSuccessResponse] = None
    # data type: GetPropertyPickListsR1SuccessResponse
    oneof_schema_9_validator: Optional[GetPropertyPickListsR1SuccessResponse] = None
    # data type: GetPropertyPickListsR2SuccessResponse
    oneof_schema_10_validator: Optional[GetPropertyPickListsR2SuccessResponse] = None
    # data type: GetRentableItemsSuccessResponse
    oneof_schema_11_validator: Optional[GetRentableItemsSuccessResponse] = None
    # data type: GetReservableAmenitiesSuccessResponse
    oneof_schema_12_validator: Optional[GetReservableAmenitiesSuccessResponse] = None
    # data type: GetWebsitesSuccessResponse
    oneof_schema_13_validator: Optional[GetWebsitesSuccessResponse] = None
    # data type: SendFloorplansSuccessResponse
    oneof_schema_14_validator: Optional[SendFloorplansSuccessResponse] = None
    # data type: SendRentableItemsSuccessResponse
    oneof_schema_15_validator: Optional[SendRentableItemsSuccessResponse] = None
    # data type: GetPropertyMediaSuccessResponse
    oneof_schema_16_validator: Optional[GetPropertyMediaSuccessResponse] = None
    # data type: SendPropertyMediaSuccessResponse
    oneof_schema_17_validator: Optional[SendPropertyMediaSuccessResponse] = None
    # data type: UpdatePropertyMediaSuccessResponse
    oneof_schema_18_validator: Optional[UpdatePropertyMediaSuccessResponse] = None
    # data type: DeletePropertyMediaSuccessResponse
    oneof_schema_19_validator: Optional[DeletePropertyMediaSuccessResponse] = None
    # data type: GetPhoneNumberSuccessResponse
    oneof_schema_20_validator: Optional[GetPhoneNumberSuccessResponse] = None
    actual_instance: Optional[Union[DeletePropertyMediaSuccessResponse, GetAmenityReservationsSuccessResponse, GetCalendarAvailabilityR1SuccessResponse, GetCalendarAvailabilityR2SuccessResponse, GetFloorPlansSuccessResponse, GetPetTypesSuccessResponse, GetPhoneNumberSuccessResponse, GetPropertiesSuccessResponse, GetPropertyAddOnsSuccessResponse, GetPropertyAnnouncementsSuccessResponse, GetPropertyMediaSuccessResponse, GetPropertyPickListsR1SuccessResponse, GetPropertyPickListsR2SuccessResponse, GetRentableItemsSuccessResponse, GetReservableAmenitiesSuccessResponse, GetWebsitesSuccessResponse, SendFloorplansSuccessResponse, SendPropertyMediaSuccessResponse, SendRentableItemsSuccessResponse, UpdatePropertyMediaSuccessResponse]] = None
    one_of_schemas: Set[str] = { "DeletePropertyMediaSuccessResponse", "GetAmenityReservationsSuccessResponse", "GetCalendarAvailabilityR1SuccessResponse", "GetCalendarAvailabilityR2SuccessResponse", "GetFloorPlansSuccessResponse", "GetPetTypesSuccessResponse", "GetPhoneNumberSuccessResponse", "GetPropertiesSuccessResponse", "GetPropertyAddOnsSuccessResponse", "GetPropertyAnnouncementsSuccessResponse", "GetPropertyMediaSuccessResponse", "GetPropertyPickListsR1SuccessResponse", "GetPropertyPickListsR2SuccessResponse", "GetRentableItemsSuccessResponse", "GetReservableAmenitiesSuccessResponse", "GetWebsitesSuccessResponse", "SendFloorplansSuccessResponse", "SendPropertyMediaSuccessResponse", "SendRentableItemsSuccessResponse", "UpdatePropertyMediaSuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1PropertiesPost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetAmenityReservationsSuccessResponse
        if not isinstance(v, GetAmenityReservationsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetAmenityReservationsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetCalendarAvailabilityR1SuccessResponse
        if not isinstance(v, GetCalendarAvailabilityR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetCalendarAvailabilityR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetCalendarAvailabilityR2SuccessResponse
        if not isinstance(v, GetCalendarAvailabilityR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetCalendarAvailabilityR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetFloorPlansSuccessResponse
        if not isinstance(v, GetFloorPlansSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetFloorPlansSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPetTypesSuccessResponse
        if not isinstance(v, GetPetTypesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPetTypesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPropertiesSuccessResponse
        if not isinstance(v, GetPropertiesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertiesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPropertyAddOnsSuccessResponse
        if not isinstance(v, GetPropertyAddOnsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyAddOnsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPropertyAnnouncementsSuccessResponse
        if not isinstance(v, GetPropertyAnnouncementsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyAnnouncementsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPropertyPickListsR1SuccessResponse
        if not isinstance(v, GetPropertyPickListsR1SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyPickListsR1SuccessResponse`")
        else:
            match += 1
        # validate data type: GetPropertyPickListsR2SuccessResponse
        if not isinstance(v, GetPropertyPickListsR2SuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyPickListsR2SuccessResponse`")
        else:
            match += 1
        # validate data type: GetRentableItemsSuccessResponse
        if not isinstance(v, GetRentableItemsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetRentableItemsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetReservableAmenitiesSuccessResponse
        if not isinstance(v, GetReservableAmenitiesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetReservableAmenitiesSuccessResponse`")
        else:
            match += 1
        # validate data type: GetWebsitesSuccessResponse
        if not isinstance(v, GetWebsitesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWebsitesSuccessResponse`")
        else:
            match += 1
        # validate data type: SendFloorplansSuccessResponse
        if not isinstance(v, SendFloorplansSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendFloorplansSuccessResponse`")
        else:
            match += 1
        # validate data type: SendRentableItemsSuccessResponse
        if not isinstance(v, SendRentableItemsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRentableItemsSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPropertyMediaSuccessResponse
        if not isinstance(v, GetPropertyMediaSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPropertyMediaSuccessResponse`")
        else:
            match += 1
        # validate data type: SendPropertyMediaSuccessResponse
        if not isinstance(v, SendPropertyMediaSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendPropertyMediaSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdatePropertyMediaSuccessResponse
        if not isinstance(v, UpdatePropertyMediaSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdatePropertyMediaSuccessResponse`")
        else:
            match += 1
        # validate data type: DeletePropertyMediaSuccessResponse
        if not isinstance(v, DeletePropertyMediaSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeletePropertyMediaSuccessResponse`")
        else:
            match += 1
        # validate data type: GetPhoneNumberSuccessResponse
        if not isinstance(v, GetPhoneNumberSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetPhoneNumberSuccessResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1PropertiesPost200Response with oneOf schemas: DeletePropertyMediaSuccessResponse, GetAmenityReservationsSuccessResponse, GetCalendarAvailabilityR1SuccessResponse, GetCalendarAvailabilityR2SuccessResponse, GetFloorPlansSuccessResponse, GetPetTypesSuccessResponse, GetPhoneNumberSuccessResponse, GetPropertiesSuccessResponse, GetPropertyAddOnsSuccessResponse, GetPropertyAnnouncementsSuccessResponse, GetPropertyMediaSuccessResponse, GetPropertyPickListsR1SuccessResponse, GetPropertyPickListsR2SuccessResponse, GetRentableItemsSuccessResponse, GetReservableAmenitiesSuccessResponse, GetWebsitesSuccessResponse, SendFloorplansSuccessResponse, SendPropertyMediaSuccessResponse, SendRentableItemsSuccessResponse, UpdatePropertyMediaSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1PropertiesPost200Response with oneOf schemas: DeletePropertyMediaSuccessResponse, GetAmenityReservationsSuccessResponse, GetCalendarAvailabilityR1SuccessResponse, GetCalendarAvailabilityR2SuccessResponse, GetFloorPlansSuccessResponse, GetPetTypesSuccessResponse, GetPhoneNumberSuccessResponse, GetPropertiesSuccessResponse, GetPropertyAddOnsSuccessResponse, GetPropertyAnnouncementsSuccessResponse, GetPropertyMediaSuccessResponse, GetPropertyPickListsR1SuccessResponse, GetPropertyPickListsR2SuccessResponse, GetRentableItemsSuccessResponse, GetReservableAmenitiesSuccessResponse, GetWebsitesSuccessResponse, SendFloorplansSuccessResponse, SendPropertyMediaSuccessResponse, SendRentableItemsSuccessResponse, UpdatePropertyMediaSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetAmenityReservationsSuccessResponse
        try:
            instance.actual_instance = GetAmenityReservationsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetCalendarAvailabilityR1SuccessResponse
        try:
            instance.actual_instance = GetCalendarAvailabilityR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetCalendarAvailabilityR2SuccessResponse
        try:
            instance.actual_instance = GetCalendarAvailabilityR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetFloorPlansSuccessResponse
        try:
            instance.actual_instance = GetFloorPlansSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPetTypesSuccessResponse
        try:
            instance.actual_instance = GetPetTypesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertiesSuccessResponse
        try:
            instance.actual_instance = GetPropertiesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyAddOnsSuccessResponse
        try:
            instance.actual_instance = GetPropertyAddOnsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyAnnouncementsSuccessResponse
        try:
            instance.actual_instance = GetPropertyAnnouncementsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyPickListsR1SuccessResponse
        try:
            instance.actual_instance = GetPropertyPickListsR1SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyPickListsR2SuccessResponse
        try:
            instance.actual_instance = GetPropertyPickListsR2SuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetRentableItemsSuccessResponse
        try:
            instance.actual_instance = GetRentableItemsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetReservableAmenitiesSuccessResponse
        try:
            instance.actual_instance = GetReservableAmenitiesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWebsitesSuccessResponse
        try:
            instance.actual_instance = GetWebsitesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendFloorplansSuccessResponse
        try:
            instance.actual_instance = SendFloorplansSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRentableItemsSuccessResponse
        try:
            instance.actual_instance = SendRentableItemsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPropertyMediaSuccessResponse
        try:
            instance.actual_instance = GetPropertyMediaSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendPropertyMediaSuccessResponse
        try:
            instance.actual_instance = SendPropertyMediaSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdatePropertyMediaSuccessResponse
        try:
            instance.actual_instance = UpdatePropertyMediaSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeletePropertyMediaSuccessResponse
        try:
            instance.actual_instance = DeletePropertyMediaSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetPhoneNumberSuccessResponse
        try:
            instance.actual_instance = GetPhoneNumberSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1PropertiesPost200Response with oneOf schemas: DeletePropertyMediaSuccessResponse, GetAmenityReservationsSuccessResponse, GetCalendarAvailabilityR1SuccessResponse, GetCalendarAvailabilityR2SuccessResponse, GetFloorPlansSuccessResponse, GetPetTypesSuccessResponse, GetPhoneNumberSuccessResponse, GetPropertiesSuccessResponse, GetPropertyAddOnsSuccessResponse, GetPropertyAnnouncementsSuccessResponse, GetPropertyMediaSuccessResponse, GetPropertyPickListsR1SuccessResponse, GetPropertyPickListsR2SuccessResponse, GetRentableItemsSuccessResponse, GetReservableAmenitiesSuccessResponse, GetWebsitesSuccessResponse, SendFloorplansSuccessResponse, SendPropertyMediaSuccessResponse, SendRentableItemsSuccessResponse, UpdatePropertyMediaSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1PropertiesPost200Response with oneOf schemas: DeletePropertyMediaSuccessResponse, GetAmenityReservationsSuccessResponse, GetCalendarAvailabilityR1SuccessResponse, GetCalendarAvailabilityR2SuccessResponse, GetFloorPlansSuccessResponse, GetPetTypesSuccessResponse, GetPhoneNumberSuccessResponse, GetPropertiesSuccessResponse, GetPropertyAddOnsSuccessResponse, GetPropertyAnnouncementsSuccessResponse, GetPropertyMediaSuccessResponse, GetPropertyPickListsR1SuccessResponse, GetPropertyPickListsR2SuccessResponse, GetRentableItemsSuccessResponse, GetReservableAmenitiesSuccessResponse, GetWebsitesSuccessResponse, SendFloorplansSuccessResponse, SendPropertyMediaSuccessResponse, SendRentableItemsSuccessResponse, UpdatePropertyMediaSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DeletePropertyMediaSuccessResponse, GetAmenityReservationsSuccessResponse, GetCalendarAvailabilityR1SuccessResponse, GetCalendarAvailabilityR2SuccessResponse, GetFloorPlansSuccessResponse, GetPetTypesSuccessResponse, GetPhoneNumberSuccessResponse, GetPropertiesSuccessResponse, GetPropertyAddOnsSuccessResponse, GetPropertyAnnouncementsSuccessResponse, GetPropertyMediaSuccessResponse, GetPropertyPickListsR1SuccessResponse, GetPropertyPickListsR2SuccessResponse, GetRentableItemsSuccessResponse, GetReservableAmenitiesSuccessResponse, GetWebsitesSuccessResponse, SendFloorplansSuccessResponse, SendPropertyMediaSuccessResponse, SendRentableItemsSuccessResponse, UpdatePropertyMediaSuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



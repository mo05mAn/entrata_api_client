# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.cancel_lease import CancelLease
from openapi_client.models.get_evicted_leases import GetEvictedLeases
from openapi_client.models.get_expiring_leases import GetExpiringLeases
from openapi_client.models.get_lease_activities import GetLeaseActivities
from openapi_client.models.get_lease_details_r1 import GetLeaseDetailsR1
from openapi_client.models.get_lease_details_r2 import GetLeaseDetailsR2
from openapi_client.models.get_lease_documents import GetLeaseDocuments
from openapi_client.models.get_lease_documents_list import GetLeaseDocumentsList
from openapi_client.models.get_lease_pick_list import GetLeasePickList
from openapi_client.models.get_leases_r1 import GetLeasesR1
from openapi_client.models.get_leases_r2 import GetLeasesR2
from openapi_client.models.get_mits_collections import GetMitsCollections
from openapi_client.models.get_mits_leases import GetMitsLeases
from openapi_client.models.get_parcel_alerts import GetParcelAlerts
from openapi_client.models.get_renters_insurance_policies import GetRentersInsurancePolicies
from openapi_client.models.move_in_lease import MoveInLease
from openapi_client.models.move_out_lease import MoveOutLease
from openapi_client.models.on_notice_lease import OnNoticeLease
from openapi_client.models.send_lease_activities import SendLeaseActivities
from openapi_client.models.send_leases import SendLeases
from openapi_client.models.send_renters_insurance_policies_r1 import SendRentersInsurancePoliciesR1
from openapi_client.models.send_renters_insurance_policies_r2 import SendRentersInsurancePoliciesR2
from openapi_client.models.send_roommate_groups_r2 import SendRoommateGroupsR2
from openapi_client.models.send_scheduled_charges import SendScheduledCharges
from openapi_client.models.update_lease import UpdateLease
from openapi_client.models.update_scheduled_charges_r1 import UpdateScheduledChargesR1
from openapi_client.models.update_scheduled_charges_r2 import UpdateScheduledChargesR2
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1LEASESPOSTREQUESTINNER_ONE_OF_SCHEMAS = ["CancelLease", "GetEvictedLeases", "GetExpiringLeases", "GetLeaseActivities", "GetLeaseDetailsR1", "GetLeaseDetailsR2", "GetLeaseDocuments", "GetLeaseDocumentsList", "GetLeasePickList", "GetLeasesR1", "GetLeasesR2", "GetMitsCollections", "GetMitsLeases", "GetParcelAlerts", "GetRentersInsurancePolicies", "MoveInLease", "MoveOutLease", "OnNoticeLease", "SendLeaseActivities", "SendLeases", "SendRentersInsurancePoliciesR1", "SendRentersInsurancePoliciesR2", "SendRoommateGroupsR2", "SendScheduledCharges", "UpdateLease", "UpdateScheduledChargesR1", "UpdateScheduledChargesR2"]

class OrgsV1LeasesPostRequestInner(BaseModel):
    """
    OrgsV1LeasesPostRequestInner
    """
    # data type: CancelLease
    oneof_schema_1_validator: Optional[CancelLease] = None
    # data type: GetEvictedLeases
    oneof_schema_2_validator: Optional[GetEvictedLeases] = None
    # data type: GetExpiringLeases
    oneof_schema_3_validator: Optional[GetExpiringLeases] = None
    # data type: GetLeaseActivities
    oneof_schema_4_validator: Optional[GetLeaseActivities] = None
    # data type: GetLeaseDetailsR1
    oneof_schema_5_validator: Optional[GetLeaseDetailsR1] = None
    # data type: GetLeaseDetailsR2
    oneof_schema_6_validator: Optional[GetLeaseDetailsR2] = None
    # data type: GetLeaseDocuments
    oneof_schema_7_validator: Optional[GetLeaseDocuments] = None
    # data type: GetLeaseDocumentsList
    oneof_schema_8_validator: Optional[GetLeaseDocumentsList] = None
    # data type: GetLeasePickList
    oneof_schema_9_validator: Optional[GetLeasePickList] = None
    # data type: GetLeasesR1
    oneof_schema_10_validator: Optional[GetLeasesR1] = None
    # data type: GetLeasesR2
    oneof_schema_11_validator: Optional[GetLeasesR2] = None
    # data type: GetMitsCollections
    oneof_schema_12_validator: Optional[GetMitsCollections] = None
    # data type: GetMitsLeases
    oneof_schema_13_validator: Optional[GetMitsLeases] = None
    # data type: GetParcelAlerts
    oneof_schema_14_validator: Optional[GetParcelAlerts] = None
    # data type: GetRentersInsurancePolicies
    oneof_schema_15_validator: Optional[GetRentersInsurancePolicies] = None
    # data type: MoveInLease
    oneof_schema_16_validator: Optional[MoveInLease] = None
    # data type: MoveOutLease
    oneof_schema_17_validator: Optional[MoveOutLease] = None
    # data type: OnNoticeLease
    oneof_schema_18_validator: Optional[OnNoticeLease] = None
    # data type: SendLeaseActivities
    oneof_schema_19_validator: Optional[SendLeaseActivities] = None
    # data type: SendLeases
    oneof_schema_20_validator: Optional[SendLeases] = None
    # data type: SendRentersInsurancePoliciesR1
    oneof_schema_21_validator: Optional[SendRentersInsurancePoliciesR1] = None
    # data type: SendRentersInsurancePoliciesR2
    oneof_schema_22_validator: Optional[SendRentersInsurancePoliciesR2] = None
    # data type: SendRoommateGroupsR2
    oneof_schema_23_validator: Optional[SendRoommateGroupsR2] = None
    # data type: SendScheduledCharges
    oneof_schema_24_validator: Optional[SendScheduledCharges] = None
    # data type: UpdateLease
    oneof_schema_25_validator: Optional[UpdateLease] = None
    # data type: UpdateScheduledChargesR1
    oneof_schema_26_validator: Optional[UpdateScheduledChargesR1] = None
    # data type: UpdateScheduledChargesR2
    oneof_schema_27_validator: Optional[UpdateScheduledChargesR2] = None
    actual_instance: Optional[Union[CancelLease, GetEvictedLeases, GetExpiringLeases, GetLeaseActivities, GetLeaseDetailsR1, GetLeaseDetailsR2, GetLeaseDocuments, GetLeaseDocumentsList, GetLeasePickList, GetLeasesR1, GetLeasesR2, GetMitsCollections, GetMitsLeases, GetParcelAlerts, GetRentersInsurancePolicies, MoveInLease, MoveOutLease, OnNoticeLease, SendLeaseActivities, SendLeases, SendRentersInsurancePoliciesR1, SendRentersInsurancePoliciesR2, SendRoommateGroupsR2, SendScheduledCharges, UpdateLease, UpdateScheduledChargesR1, UpdateScheduledChargesR2]] = None
    one_of_schemas: Set[str] = { "CancelLease", "GetEvictedLeases", "GetExpiringLeases", "GetLeaseActivities", "GetLeaseDetailsR1", "GetLeaseDetailsR2", "GetLeaseDocuments", "GetLeaseDocumentsList", "GetLeasePickList", "GetLeasesR1", "GetLeasesR2", "GetMitsCollections", "GetMitsLeases", "GetParcelAlerts", "GetRentersInsurancePolicies", "MoveInLease", "MoveOutLease", "OnNoticeLease", "SendLeaseActivities", "SendLeases", "SendRentersInsurancePoliciesR1", "SendRentersInsurancePoliciesR2", "SendRoommateGroupsR2", "SendScheduledCharges", "UpdateLease", "UpdateScheduledChargesR1", "UpdateScheduledChargesR2" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1LeasesPostRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: CancelLease
        if not isinstance(v, CancelLease):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CancelLease`")
        else:
            match += 1
        # validate data type: GetEvictedLeases
        if not isinstance(v, GetEvictedLeases):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetEvictedLeases`")
        else:
            match += 1
        # validate data type: GetExpiringLeases
        if not isinstance(v, GetExpiringLeases):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetExpiringLeases`")
        else:
            match += 1
        # validate data type: GetLeaseActivities
        if not isinstance(v, GetLeaseActivities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseActivities`")
        else:
            match += 1
        # validate data type: GetLeaseDetailsR1
        if not isinstance(v, GetLeaseDetailsR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDetailsR1`")
        else:
            match += 1
        # validate data type: GetLeaseDetailsR2
        if not isinstance(v, GetLeaseDetailsR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDetailsR2`")
        else:
            match += 1
        # validate data type: GetLeaseDocuments
        if not isinstance(v, GetLeaseDocuments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDocuments`")
        else:
            match += 1
        # validate data type: GetLeaseDocumentsList
        if not isinstance(v, GetLeaseDocumentsList):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeaseDocumentsList`")
        else:
            match += 1
        # validate data type: GetLeasePickList
        if not isinstance(v, GetLeasePickList):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeasePickList`")
        else:
            match += 1
        # validate data type: GetLeasesR1
        if not isinstance(v, GetLeasesR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeasesR1`")
        else:
            match += 1
        # validate data type: GetLeasesR2
        if not isinstance(v, GetLeasesR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeasesR2`")
        else:
            match += 1
        # validate data type: GetMitsCollections
        if not isinstance(v, GetMitsCollections):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsCollections`")
        else:
            match += 1
        # validate data type: GetMitsLeases
        if not isinstance(v, GetMitsLeases):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsLeases`")
        else:
            match += 1
        # validate data type: GetParcelAlerts
        if not isinstance(v, GetParcelAlerts):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetParcelAlerts`")
        else:
            match += 1
        # validate data type: GetRentersInsurancePolicies
        if not isinstance(v, GetRentersInsurancePolicies):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetRentersInsurancePolicies`")
        else:
            match += 1
        # validate data type: MoveInLease
        if not isinstance(v, MoveInLease):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MoveInLease`")
        else:
            match += 1
        # validate data type: MoveOutLease
        if not isinstance(v, MoveOutLease):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MoveOutLease`")
        else:
            match += 1
        # validate data type: OnNoticeLease
        if not isinstance(v, OnNoticeLease):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OnNoticeLease`")
        else:
            match += 1
        # validate data type: SendLeaseActivities
        if not isinstance(v, SendLeaseActivities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendLeaseActivities`")
        else:
            match += 1
        # validate data type: SendLeases
        if not isinstance(v, SendLeases):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendLeases`")
        else:
            match += 1
        # validate data type: SendRentersInsurancePoliciesR1
        if not isinstance(v, SendRentersInsurancePoliciesR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRentersInsurancePoliciesR1`")
        else:
            match += 1
        # validate data type: SendRentersInsurancePoliciesR2
        if not isinstance(v, SendRentersInsurancePoliciesR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRentersInsurancePoliciesR2`")
        else:
            match += 1
        # validate data type: SendRoommateGroupsR2
        if not isinstance(v, SendRoommateGroupsR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendRoommateGroupsR2`")
        else:
            match += 1
        # validate data type: SendScheduledCharges
        if not isinstance(v, SendScheduledCharges):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendScheduledCharges`")
        else:
            match += 1
        # validate data type: UpdateLease
        if not isinstance(v, UpdateLease):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLease`")
        else:
            match += 1
        # validate data type: UpdateScheduledChargesR1
        if not isinstance(v, UpdateScheduledChargesR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateScheduledChargesR1`")
        else:
            match += 1
        # validate data type: UpdateScheduledChargesR2
        if not isinstance(v, UpdateScheduledChargesR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateScheduledChargesR2`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1LeasesPostRequestInner with oneOf schemas: CancelLease, GetEvictedLeases, GetExpiringLeases, GetLeaseActivities, GetLeaseDetailsR1, GetLeaseDetailsR2, GetLeaseDocuments, GetLeaseDocumentsList, GetLeasePickList, GetLeasesR1, GetLeasesR2, GetMitsCollections, GetMitsLeases, GetParcelAlerts, GetRentersInsurancePolicies, MoveInLease, MoveOutLease, OnNoticeLease, SendLeaseActivities, SendLeases, SendRentersInsurancePoliciesR1, SendRentersInsurancePoliciesR2, SendRoommateGroupsR2, SendScheduledCharges, UpdateLease, UpdateScheduledChargesR1, UpdateScheduledChargesR2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1LeasesPostRequestInner with oneOf schemas: CancelLease, GetEvictedLeases, GetExpiringLeases, GetLeaseActivities, GetLeaseDetailsR1, GetLeaseDetailsR2, GetLeaseDocuments, GetLeaseDocumentsList, GetLeasePickList, GetLeasesR1, GetLeasesR2, GetMitsCollections, GetMitsLeases, GetParcelAlerts, GetRentersInsurancePolicies, MoveInLease, MoveOutLease, OnNoticeLease, SendLeaseActivities, SendLeases, SendRentersInsurancePoliciesR1, SendRentersInsurancePoliciesR2, SendRoommateGroupsR2, SendScheduledCharges, UpdateLease, UpdateScheduledChargesR1, UpdateScheduledChargesR2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into CancelLease
        try:
            instance.actual_instance = CancelLease.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetEvictedLeases
        try:
            instance.actual_instance = GetEvictedLeases.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetExpiringLeases
        try:
            instance.actual_instance = GetExpiringLeases.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseActivities
        try:
            instance.actual_instance = GetLeaseActivities.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDetailsR1
        try:
            instance.actual_instance = GetLeaseDetailsR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDetailsR2
        try:
            instance.actual_instance = GetLeaseDetailsR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDocuments
        try:
            instance.actual_instance = GetLeaseDocuments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeaseDocumentsList
        try:
            instance.actual_instance = GetLeaseDocumentsList.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeasePickList
        try:
            instance.actual_instance = GetLeasePickList.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeasesR1
        try:
            instance.actual_instance = GetLeasesR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeasesR2
        try:
            instance.actual_instance = GetLeasesR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsCollections
        try:
            instance.actual_instance = GetMitsCollections.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsLeases
        try:
            instance.actual_instance = GetMitsLeases.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetParcelAlerts
        try:
            instance.actual_instance = GetParcelAlerts.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetRentersInsurancePolicies
        try:
            instance.actual_instance = GetRentersInsurancePolicies.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MoveInLease
        try:
            instance.actual_instance = MoveInLease.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MoveOutLease
        try:
            instance.actual_instance = MoveOutLease.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OnNoticeLease
        try:
            instance.actual_instance = OnNoticeLease.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendLeaseActivities
        try:
            instance.actual_instance = SendLeaseActivities.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendLeases
        try:
            instance.actual_instance = SendLeases.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRentersInsurancePoliciesR1
        try:
            instance.actual_instance = SendRentersInsurancePoliciesR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRentersInsurancePoliciesR2
        try:
            instance.actual_instance = SendRentersInsurancePoliciesR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendRoommateGroupsR2
        try:
            instance.actual_instance = SendRoommateGroupsR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendScheduledCharges
        try:
            instance.actual_instance = SendScheduledCharges.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLease
        try:
            instance.actual_instance = UpdateLease.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateScheduledChargesR1
        try:
            instance.actual_instance = UpdateScheduledChargesR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateScheduledChargesR2
        try:
            instance.actual_instance = UpdateScheduledChargesR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1LeasesPostRequestInner with oneOf schemas: CancelLease, GetEvictedLeases, GetExpiringLeases, GetLeaseActivities, GetLeaseDetailsR1, GetLeaseDetailsR2, GetLeaseDocuments, GetLeaseDocumentsList, GetLeasePickList, GetLeasesR1, GetLeasesR2, GetMitsCollections, GetMitsLeases, GetParcelAlerts, GetRentersInsurancePolicies, MoveInLease, MoveOutLease, OnNoticeLease, SendLeaseActivities, SendLeases, SendRentersInsurancePoliciesR1, SendRentersInsurancePoliciesR2, SendRoommateGroupsR2, SendScheduledCharges, UpdateLease, UpdateScheduledChargesR1, UpdateScheduledChargesR2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1LeasesPostRequestInner with oneOf schemas: CancelLease, GetEvictedLeases, GetExpiringLeases, GetLeaseActivities, GetLeaseDetailsR1, GetLeaseDetailsR2, GetLeaseDocuments, GetLeaseDocumentsList, GetLeasePickList, GetLeasesR1, GetLeasesR2, GetMitsCollections, GetMitsLeases, GetParcelAlerts, GetRentersInsurancePolicies, MoveInLease, MoveOutLease, OnNoticeLease, SendLeaseActivities, SendLeases, SendRentersInsurancePoliciesR1, SendRentersInsurancePoliciesR2, SendRoommateGroupsR2, SendScheduledCharges, UpdateLease, UpdateScheduledChargesR1, UpdateScheduledChargesR2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CancelLease, GetEvictedLeases, GetExpiringLeases, GetLeaseActivities, GetLeaseDetailsR1, GetLeaseDetailsR2, GetLeaseDocuments, GetLeaseDocumentsList, GetLeasePickList, GetLeasesR1, GetLeasesR2, GetMitsCollections, GetMitsLeases, GetParcelAlerts, GetRentersInsurancePolicies, MoveInLease, MoveOutLease, OnNoticeLease, SendLeaseActivities, SendLeases, SendRentersInsurancePoliciesR1, SendRentersInsurancePoliciesR2, SendRoommateGroupsR2, SendScheduledCharges, UpdateLease, UpdateScheduledChargesR1, UpdateScheduledChargesR2]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_work_orders_success_response_result_work_orders_work_order_inner_child_work_orders import GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInnerChildWorkOrders
from openapi_client.models.get_work_orders_success_response_result_work_orders_work_order_inner_labors import GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInnerLabors
from typing import Optional, Set
from typing_extensions import Self

class GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInner(BaseModel):
    """
    GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInner
    """ # noqa: E501
    maintenance_request_id: StrictStr = Field(description="ID of the maintenance request", alias="maintenanceRequestId")
    property_id: StrictStr = Field(description="ID of the property", alias="propertyId")
    building_name: StrictStr = Field(description="Building name", alias="buildingName")
    unit_number: StrictStr = Field(description="Unit number", alias="unitNumber")
    customer_id: StrictStr = Field(description="Customer ID", alias="customerId")
    name_first: StrictStr = Field(description="First name of the customer", alias="nameFirst")
    name_last: StrictStr = Field(description="Last name of the customer", alias="nameLast")
    primary_phone_number: StrictStr = Field(description="Primary phone number of the customer", alias="primaryPhoneNumber")
    alternate_phone_number: Optional[StrictStr] = Field(default=None, description="Alternate phone number", alias="alternatePhoneNumber")
    email_address: Optional[StrictStr] = Field(default=None, description="Email address of the customer", alias="emailAddress")
    created_on: StrictStr = Field(description="Timestamp of when the request was created", alias="createdOn")
    assigned_to: StrictStr = Field(description="Employee assigned to the work order", alias="assignedTo")
    maintenance_status: StrictStr = Field(description="Status of the maintenance request", alias="maintenanceStatus")
    maintenance_priority: StrictStr = Field(description="Priority level of the work order", alias="maintenancePriority")
    maintenance_category_name: StrictStr = Field(description="Category of the maintenance request", alias="maintenanceCategoryName")
    maintenance_problem: StrictStr = Field(description="Problem related to the maintenance", alias="maintenanceProblem")
    maintenance_description: StrictStr = Field(description="Description of the maintenance issue", alias="maintenanceDescription")
    labors: Optional[GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInnerLabors] = None
    scheduled_start_date: Optional[StrictStr] = Field(default=None, description="Scheduled start date for the work order", alias="scheduledStartDate")
    scheduled_end_date: Optional[StrictStr] = Field(default=None, description="Scheduled end date for the work order", alias="scheduledEndDate")
    due_date: Optional[StrictStr] = Field(default=None, description="Due date for the work order", alias="dueDate")
    is_floating: Optional[StrictStr] = Field(default=None, description="Indicates if the work order is floating", alias="isFloating")
    permission_to_enter: Optional[StrictStr] = Field(default=None, description="Indicates if permission to enter is granted", alias="permissionToEnter")
    pet_info: Optional[StrictStr] = Field(default=None, description="Information about pets at the location", alias="petInfo")
    alarm_info: Optional[StrictStr] = Field(default=None, description="Alarm information for the location", alias="alarmInfo")
    maintenance_request_from: Optional[StrictStr] = Field(default=None, description="Source of the maintenance request", alias="maintenanceRequestFrom")
    maintenance_request_by: Optional[StrictStr] = Field(default=None, description="Person who created the maintenance request", alias="maintenanceRequestBy")
    is_deleted: Optional[StrictStr] = Field(default=None, description="Indicates if the work order has been deleted", alias="isDeleted")
    child_work_orders: Optional[GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInnerChildWorkOrders] = Field(default=None, alias="childWorkOrders")
    __properties: ClassVar[List[str]] = ["maintenanceRequestId", "propertyId", "buildingName", "unitNumber", "customerId", "nameFirst", "nameLast", "primaryPhoneNumber", "alternatePhoneNumber", "emailAddress", "createdOn", "assignedTo", "maintenanceStatus", "maintenancePriority", "maintenanceCategoryName", "maintenanceProblem", "maintenanceDescription", "labors", "scheduledStartDate", "scheduledEndDate", "dueDate", "isFloating", "permissionToEnter", "petInfo", "alarmInfo", "maintenanceRequestFrom", "maintenanceRequestBy", "isDeleted", "childWorkOrders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of labors
        if self.labors:
            _dict['labors'] = self.labors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of child_work_orders
        if self.child_work_orders:
            _dict['childWorkOrders'] = self.child_work_orders.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maintenanceRequestId": obj.get("maintenanceRequestId"),
            "propertyId": obj.get("propertyId"),
            "buildingName": obj.get("buildingName"),
            "unitNumber": obj.get("unitNumber"),
            "customerId": obj.get("customerId"),
            "nameFirst": obj.get("nameFirst"),
            "nameLast": obj.get("nameLast"),
            "primaryPhoneNumber": obj.get("primaryPhoneNumber"),
            "alternatePhoneNumber": obj.get("alternatePhoneNumber"),
            "emailAddress": obj.get("emailAddress"),
            "createdOn": obj.get("createdOn"),
            "assignedTo": obj.get("assignedTo"),
            "maintenanceStatus": obj.get("maintenanceStatus"),
            "maintenancePriority": obj.get("maintenancePriority"),
            "maintenanceCategoryName": obj.get("maintenanceCategoryName"),
            "maintenanceProblem": obj.get("maintenanceProblem"),
            "maintenanceDescription": obj.get("maintenanceDescription"),
            "labors": GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInnerLabors.from_dict(obj["labors"]) if obj.get("labors") is not None else None,
            "scheduledStartDate": obj.get("scheduledStartDate"),
            "scheduledEndDate": obj.get("scheduledEndDate"),
            "dueDate": obj.get("dueDate"),
            "isFloating": obj.get("isFloating"),
            "permissionToEnter": obj.get("permissionToEnter"),
            "petInfo": obj.get("petInfo"),
            "alarmInfo": obj.get("alarmInfo"),
            "maintenanceRequestFrom": obj.get("maintenanceRequestFrom"),
            "maintenanceRequestBy": obj.get("maintenanceRequestBy"),
            "isDeleted": obj.get("isDeleted"),
            "childWorkOrders": GetWorkOrdersSuccessResponseResultWorkOrdersWorkOrderInnerChildWorkOrders.from_dict(obj["childWorkOrders"]) if obj.get("childWorkOrders") is not None else None
        })
        return _obj



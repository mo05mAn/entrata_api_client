# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.apply_quote import ApplyQuote
from openapi_client.models.generate_quotes import GenerateQuotes
from openapi_client.models.get_lead_events import GetLeadEvents
from openapi_client.models.get_lead_pick_lists_r1 import GetLeadPickListsR1
from openapi_client.models.get_lead_pick_lists_r2 import GetLeadPickListsR2
from openapi_client.models.get_leads import GetLeads
from openapi_client.models.get_mits_leads import GetMitsLeads
from openapi_client.models.get_quotes import GetQuotes
from openapi_client.models.send_leads import SendLeads
from openapi_client.models.send_mits_leads import SendMitsLeads
from openapi_client.models.update_leads_r1 import UpdateLeadsR1
from openapi_client.models.update_leads_r2 import UpdateLeadsR2
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1LEADSPOSTREQUESTINNER_ONE_OF_SCHEMAS = ["ApplyQuote", "GenerateQuotes", "GetLeadEvents", "GetLeadPickListsR1", "GetLeadPickListsR2", "GetLeads", "GetMitsLeads", "GetQuotes", "SendLeads", "SendMitsLeads", "UpdateLeadsR1", "UpdateLeadsR2"]

class OrgsV1LeadsPostRequestInner(BaseModel):
    """
    OrgsV1LeadsPostRequestInner
    """
    # data type: GetLeads
    oneof_schema_1_validator: Optional[GetLeads] = None
    # data type: GetLeadEvents
    oneof_schema_2_validator: Optional[GetLeadEvents] = None
    # data type: ApplyQuote
    oneof_schema_3_validator: Optional[ApplyQuote] = None
    # data type: GenerateQuotes
    oneof_schema_4_validator: Optional[GenerateQuotes] = None
    # data type: GetLeadPickListsR1
    oneof_schema_5_validator: Optional[GetLeadPickListsR1] = None
    # data type: GetLeadPickListsR2
    oneof_schema_6_validator: Optional[GetLeadPickListsR2] = None
    # data type: GetMitsLeads
    oneof_schema_7_validator: Optional[GetMitsLeads] = None
    # data type: GetQuotes
    oneof_schema_8_validator: Optional[GetQuotes] = None
    # data type: SendLeads
    oneof_schema_9_validator: Optional[SendLeads] = None
    # data type: SendMitsLeads
    oneof_schema_10_validator: Optional[SendMitsLeads] = None
    # data type: UpdateLeadsR1
    oneof_schema_11_validator: Optional[UpdateLeadsR1] = None
    # data type: UpdateLeadsR2
    oneof_schema_12_validator: Optional[UpdateLeadsR2] = None
    actual_instance: Optional[Union[ApplyQuote, GenerateQuotes, GetLeadEvents, GetLeadPickListsR1, GetLeadPickListsR2, GetLeads, GetMitsLeads, GetQuotes, SendLeads, SendMitsLeads, UpdateLeadsR1, UpdateLeadsR2]] = None
    one_of_schemas: Set[str] = { "ApplyQuote", "GenerateQuotes", "GetLeadEvents", "GetLeadPickListsR1", "GetLeadPickListsR2", "GetLeads", "GetMitsLeads", "GetQuotes", "SendLeads", "SendMitsLeads", "UpdateLeadsR1", "UpdateLeadsR2" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1LeadsPostRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetLeads
        if not isinstance(v, GetLeads):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeads`")
        else:
            match += 1
        # validate data type: GetLeadEvents
        if not isinstance(v, GetLeadEvents):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeadEvents`")
        else:
            match += 1
        # validate data type: ApplyQuote
        if not isinstance(v, ApplyQuote):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplyQuote`")
        else:
            match += 1
        # validate data type: GenerateQuotes
        if not isinstance(v, GenerateQuotes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GenerateQuotes`")
        else:
            match += 1
        # validate data type: GetLeadPickListsR1
        if not isinstance(v, GetLeadPickListsR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeadPickListsR1`")
        else:
            match += 1
        # validate data type: GetLeadPickListsR2
        if not isinstance(v, GetLeadPickListsR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLeadPickListsR2`")
        else:
            match += 1
        # validate data type: GetMitsLeads
        if not isinstance(v, GetMitsLeads):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMitsLeads`")
        else:
            match += 1
        # validate data type: GetQuotes
        if not isinstance(v, GetQuotes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetQuotes`")
        else:
            match += 1
        # validate data type: SendLeads
        if not isinstance(v, SendLeads):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendLeads`")
        else:
            match += 1
        # validate data type: SendMitsLeads
        if not isinstance(v, SendMitsLeads):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendMitsLeads`")
        else:
            match += 1
        # validate data type: UpdateLeadsR1
        if not isinstance(v, UpdateLeadsR1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLeadsR1`")
        else:
            match += 1
        # validate data type: UpdateLeadsR2
        if not isinstance(v, UpdateLeadsR2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLeadsR2`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1LeadsPostRequestInner with oneOf schemas: ApplyQuote, GenerateQuotes, GetLeadEvents, GetLeadPickListsR1, GetLeadPickListsR2, GetLeads, GetMitsLeads, GetQuotes, SendLeads, SendMitsLeads, UpdateLeadsR1, UpdateLeadsR2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1LeadsPostRequestInner with oneOf schemas: ApplyQuote, GenerateQuotes, GetLeadEvents, GetLeadPickListsR1, GetLeadPickListsR2, GetLeads, GetMitsLeads, GetQuotes, SendLeads, SendMitsLeads, UpdateLeadsR1, UpdateLeadsR2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetLeads
        try:
            instance.actual_instance = GetLeads.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeadEvents
        try:
            instance.actual_instance = GetLeadEvents.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplyQuote
        try:
            instance.actual_instance = ApplyQuote.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GenerateQuotes
        try:
            instance.actual_instance = GenerateQuotes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeadPickListsR1
        try:
            instance.actual_instance = GetLeadPickListsR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLeadPickListsR2
        try:
            instance.actual_instance = GetLeadPickListsR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMitsLeads
        try:
            instance.actual_instance = GetMitsLeads.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetQuotes
        try:
            instance.actual_instance = GetQuotes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendLeads
        try:
            instance.actual_instance = SendLeads.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendMitsLeads
        try:
            instance.actual_instance = SendMitsLeads.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLeadsR1
        try:
            instance.actual_instance = UpdateLeadsR1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLeadsR2
        try:
            instance.actual_instance = UpdateLeadsR2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1LeadsPostRequestInner with oneOf schemas: ApplyQuote, GenerateQuotes, GetLeadEvents, GetLeadPickListsR1, GetLeadPickListsR2, GetLeads, GetMitsLeads, GetQuotes, SendLeads, SendMitsLeads, UpdateLeadsR1, UpdateLeadsR2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1LeadsPostRequestInner with oneOf schemas: ApplyQuote, GenerateQuotes, GetLeadEvents, GetLeadPickListsR1, GetLeadPickListsR2, GetLeads, GetMitsLeads, GetQuotes, SendLeads, SendMitsLeads, UpdateLeadsR1, UpdateLeadsR2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ApplyQuote, GenerateQuotes, GetLeadEvents, GetLeadPickListsR1, GetLeadPickListsR2, GetLeads, GetMitsLeads, GetQuotes, SendLeads, SendMitsLeads, UpdateLeadsR1, UpdateLeadsR2]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_budget_status_type_ids import GetFinancialPickListR2SuccessResponseResultBudgetStatusTypeIds
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_account_types import GetFinancialPickListR2SuccessResponseResultGlAccountTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_books import GetFinancialPickListR2SuccessResponseResultGlBooks
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_branch_types import GetFinancialPickListR2SuccessResponseResultGlBranchTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_export_batch_types import GetFinancialPickListR2SuccessResponseResultGlExportBatchTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_group_types import GetFinancialPickListR2SuccessResponseResultGlGroupTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_header_status_types import GetFinancialPickListR2SuccessResponseResultGlHeaderStatusTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_header_types import GetFinancialPickListR2SuccessResponseResultGlHeaderTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_ledger_types import GetFinancialPickListR2SuccessResponseResultGlLedgerTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_reconciliation_status_types import GetFinancialPickListR2SuccessResponseResultGlReconciliationStatusTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_transaction_types import GetFinancialPickListR2SuccessResponseResultGlTransactionTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_gl_tree_types import GetFinancialPickListR2SuccessResponseResultGlTreeTypes
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_ledger_ids import GetFinancialPickListR2SuccessResponseResultLedgerIds
from entrata_api_client.models.get_financial_pick_list_r2_success_response_result_owners import GetFinancialPickListR2SuccessResponseResultOwners
from typing import Optional, Set
from typing_extensions import Self

class GetFinancialPickListR2SuccessResponseResult(BaseModel):
    """
    GetFinancialPickListR2SuccessResponseResult
    """ # noqa: E501
    gl_group_types: GetFinancialPickListR2SuccessResponseResultGlGroupTypes = Field(alias="glGroupTypes")
    gl_tree_types: GetFinancialPickListR2SuccessResponseResultGlTreeTypes = Field(alias="glTreeTypes")
    gl_account_types: GetFinancialPickListR2SuccessResponseResultGlAccountTypes = Field(alias="glAccountTypes")
    gl_books: GetFinancialPickListR2SuccessResponseResultGlBooks = Field(alias="glBooks")
    gl_branch_types: GetFinancialPickListR2SuccessResponseResultGlBranchTypes = Field(alias="glBranchTypes")
    gl_export_batch_types: GetFinancialPickListR2SuccessResponseResultGlExportBatchTypes = Field(alias="glExportBatchTypes")
    gl_header_status_types: GetFinancialPickListR2SuccessResponseResultGlHeaderStatusTypes = Field(alias="glHeaderStatusTypes")
    gl_header_types: GetFinancialPickListR2SuccessResponseResultGlHeaderTypes = Field(alias="glHeaderTypes")
    gl_ledger_types: GetFinancialPickListR2SuccessResponseResultGlLedgerTypes = Field(alias="glLedgerTypes")
    gl_reconciliation_status_types: GetFinancialPickListR2SuccessResponseResultGlReconciliationStatusTypes = Field(alias="glReconciliationStatusTypes")
    gl_transaction_types: GetFinancialPickListR2SuccessResponseResultGlTransactionTypes = Field(alias="glTransactionTypes")
    budget_status_type_ids: GetFinancialPickListR2SuccessResponseResultBudgetStatusTypeIds = Field(alias="budgetStatusTypeIds")
    owners: GetFinancialPickListR2SuccessResponseResultOwners
    ledger_ids: GetFinancialPickListR2SuccessResponseResultLedgerIds = Field(alias="ledgerIds")
    __properties: ClassVar[List[str]] = ["glGroupTypes", "glTreeTypes", "glAccountTypes", "glBooks", "glBranchTypes", "glExportBatchTypes", "glHeaderStatusTypes", "glHeaderTypes", "glLedgerTypes", "glReconciliationStatusTypes", "glTransactionTypes", "budgetStatusTypeIds", "owners", "ledgerIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetFinancialPickListR2SuccessResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gl_group_types
        if self.gl_group_types:
            _dict['glGroupTypes'] = self.gl_group_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_tree_types
        if self.gl_tree_types:
            _dict['glTreeTypes'] = self.gl_tree_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_account_types
        if self.gl_account_types:
            _dict['glAccountTypes'] = self.gl_account_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_books
        if self.gl_books:
            _dict['glBooks'] = self.gl_books.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_branch_types
        if self.gl_branch_types:
            _dict['glBranchTypes'] = self.gl_branch_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_export_batch_types
        if self.gl_export_batch_types:
            _dict['glExportBatchTypes'] = self.gl_export_batch_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_header_status_types
        if self.gl_header_status_types:
            _dict['glHeaderStatusTypes'] = self.gl_header_status_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_header_types
        if self.gl_header_types:
            _dict['glHeaderTypes'] = self.gl_header_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_ledger_types
        if self.gl_ledger_types:
            _dict['glLedgerTypes'] = self.gl_ledger_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_reconciliation_status_types
        if self.gl_reconciliation_status_types:
            _dict['glReconciliationStatusTypes'] = self.gl_reconciliation_status_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gl_transaction_types
        if self.gl_transaction_types:
            _dict['glTransactionTypes'] = self.gl_transaction_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of budget_status_type_ids
        if self.budget_status_type_ids:
            _dict['budgetStatusTypeIds'] = self.budget_status_type_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owners
        if self.owners:
            _dict['owners'] = self.owners.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ledger_ids
        if self.ledger_ids:
            _dict['ledgerIds'] = self.ledger_ids.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetFinancialPickListR2SuccessResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "glGroupTypes": GetFinancialPickListR2SuccessResponseResultGlGroupTypes.from_dict(obj["glGroupTypes"]) if obj.get("glGroupTypes") is not None else None,
            "glTreeTypes": GetFinancialPickListR2SuccessResponseResultGlTreeTypes.from_dict(obj["glTreeTypes"]) if obj.get("glTreeTypes") is not None else None,
            "glAccountTypes": GetFinancialPickListR2SuccessResponseResultGlAccountTypes.from_dict(obj["glAccountTypes"]) if obj.get("glAccountTypes") is not None else None,
            "glBooks": GetFinancialPickListR2SuccessResponseResultGlBooks.from_dict(obj["glBooks"]) if obj.get("glBooks") is not None else None,
            "glBranchTypes": GetFinancialPickListR2SuccessResponseResultGlBranchTypes.from_dict(obj["glBranchTypes"]) if obj.get("glBranchTypes") is not None else None,
            "glExportBatchTypes": GetFinancialPickListR2SuccessResponseResultGlExportBatchTypes.from_dict(obj["glExportBatchTypes"]) if obj.get("glExportBatchTypes") is not None else None,
            "glHeaderStatusTypes": GetFinancialPickListR2SuccessResponseResultGlHeaderStatusTypes.from_dict(obj["glHeaderStatusTypes"]) if obj.get("glHeaderStatusTypes") is not None else None,
            "glHeaderTypes": GetFinancialPickListR2SuccessResponseResultGlHeaderTypes.from_dict(obj["glHeaderTypes"]) if obj.get("glHeaderTypes") is not None else None,
            "glLedgerTypes": GetFinancialPickListR2SuccessResponseResultGlLedgerTypes.from_dict(obj["glLedgerTypes"]) if obj.get("glLedgerTypes") is not None else None,
            "glReconciliationStatusTypes": GetFinancialPickListR2SuccessResponseResultGlReconciliationStatusTypes.from_dict(obj["glReconciliationStatusTypes"]) if obj.get("glReconciliationStatusTypes") is not None else None,
            "glTransactionTypes": GetFinancialPickListR2SuccessResponseResultGlTransactionTypes.from_dict(obj["glTransactionTypes"]) if obj.get("glTransactionTypes") is not None else None,
            "budgetStatusTypeIds": GetFinancialPickListR2SuccessResponseResultBudgetStatusTypeIds.from_dict(obj["budgetStatusTypeIds"]) if obj.get("budgetStatusTypeIds") is not None else None,
            "owners": GetFinancialPickListR2SuccessResponseResultOwners.from_dict(obj["owners"]) if obj.get("owners") is not None else None,
            "ledgerIds": GetFinancialPickListR2SuccessResponseResultLedgerIds.from_dict(obj["ledgerIds"]) if obj.get("ledgerIds") is not None else None
        })
        return _obj



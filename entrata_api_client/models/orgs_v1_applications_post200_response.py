# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from entrata_api_client.models.get_company_applications_success_response import GetCompanyApplicationsSuccessResponse
from entrata_api_client.models.send_applicant_general_details_success_response import SendApplicantGeneralDetailsSuccessResponse
from entrata_api_client.models.send_application_add_ons_success_response import SendApplicationAddOnsSuccessResponse
from entrata_api_client.models.send_application_employers_success_response import SendApplicationEmployersSuccessResponse
from entrata_api_client.models.send_application_pets_success_response import SendApplicationPetsSuccessResponse
from entrata_api_client.models.send_application_success_response import SendApplicationSuccessResponse
from entrata_api_client.models.send_application_vehicles_success_response import SendApplicationVehiclesSuccessResponse
from entrata_api_client.models.update_application_success_response import UpdateApplicationSuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ORGSV1APPLICATIONSPOST200RESPONSE_ONE_OF_SCHEMAS = ["GetCompanyApplicationsSuccessResponse", "SendApplicantGeneralDetailsSuccessResponse", "SendApplicationAddOnsSuccessResponse", "SendApplicationEmployersSuccessResponse", "SendApplicationPetsSuccessResponse", "SendApplicationSuccessResponse", "SendApplicationVehiclesSuccessResponse", "UpdateApplicationSuccessResponse"]

class OrgsV1ApplicationsPost200Response(BaseModel):
    """
    OrgsV1ApplicationsPost200Response
    """
    # data type: GetCompanyApplicationsSuccessResponse
    oneof_schema_1_validator: Optional[GetCompanyApplicationsSuccessResponse] = None
    # data type: SendApplicantGeneralDetailsSuccessResponse
    oneof_schema_2_validator: Optional[SendApplicantGeneralDetailsSuccessResponse] = None
    # data type: SendApplicationSuccessResponse
    oneof_schema_3_validator: Optional[SendApplicationSuccessResponse] = None
    # data type: SendApplicationAddOnsSuccessResponse
    oneof_schema_4_validator: Optional[SendApplicationAddOnsSuccessResponse] = None
    # data type: SendApplicationEmployersSuccessResponse
    oneof_schema_5_validator: Optional[SendApplicationEmployersSuccessResponse] = None
    # data type: SendApplicationPetsSuccessResponse
    oneof_schema_6_validator: Optional[SendApplicationPetsSuccessResponse] = None
    # data type: SendApplicationVehiclesSuccessResponse
    oneof_schema_7_validator: Optional[SendApplicationVehiclesSuccessResponse] = None
    # data type: UpdateApplicationSuccessResponse
    oneof_schema_8_validator: Optional[UpdateApplicationSuccessResponse] = None
    actual_instance: Optional[Union[GetCompanyApplicationsSuccessResponse, SendApplicantGeneralDetailsSuccessResponse, SendApplicationAddOnsSuccessResponse, SendApplicationEmployersSuccessResponse, SendApplicationPetsSuccessResponse, SendApplicationSuccessResponse, SendApplicationVehiclesSuccessResponse, UpdateApplicationSuccessResponse]] = None
    one_of_schemas: Set[str] = { "GetCompanyApplicationsSuccessResponse", "SendApplicantGeneralDetailsSuccessResponse", "SendApplicationAddOnsSuccessResponse", "SendApplicationEmployersSuccessResponse", "SendApplicationPetsSuccessResponse", "SendApplicationSuccessResponse", "SendApplicationVehiclesSuccessResponse", "UpdateApplicationSuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OrgsV1ApplicationsPost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetCompanyApplicationsSuccessResponse
        if not isinstance(v, GetCompanyApplicationsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetCompanyApplicationsSuccessResponse`")
        else:
            match += 1
        # validate data type: SendApplicantGeneralDetailsSuccessResponse
        if not isinstance(v, SendApplicantGeneralDetailsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendApplicantGeneralDetailsSuccessResponse`")
        else:
            match += 1
        # validate data type: SendApplicationSuccessResponse
        if not isinstance(v, SendApplicationSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendApplicationSuccessResponse`")
        else:
            match += 1
        # validate data type: SendApplicationAddOnsSuccessResponse
        if not isinstance(v, SendApplicationAddOnsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendApplicationAddOnsSuccessResponse`")
        else:
            match += 1
        # validate data type: SendApplicationEmployersSuccessResponse
        if not isinstance(v, SendApplicationEmployersSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendApplicationEmployersSuccessResponse`")
        else:
            match += 1
        # validate data type: SendApplicationPetsSuccessResponse
        if not isinstance(v, SendApplicationPetsSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendApplicationPetsSuccessResponse`")
        else:
            match += 1
        # validate data type: SendApplicationVehiclesSuccessResponse
        if not isinstance(v, SendApplicationVehiclesSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendApplicationVehiclesSuccessResponse`")
        else:
            match += 1
        # validate data type: UpdateApplicationSuccessResponse
        if not isinstance(v, UpdateApplicationSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateApplicationSuccessResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OrgsV1ApplicationsPost200Response with oneOf schemas: GetCompanyApplicationsSuccessResponse, SendApplicantGeneralDetailsSuccessResponse, SendApplicationAddOnsSuccessResponse, SendApplicationEmployersSuccessResponse, SendApplicationPetsSuccessResponse, SendApplicationSuccessResponse, SendApplicationVehiclesSuccessResponse, UpdateApplicationSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OrgsV1ApplicationsPost200Response with oneOf schemas: GetCompanyApplicationsSuccessResponse, SendApplicantGeneralDetailsSuccessResponse, SendApplicationAddOnsSuccessResponse, SendApplicationEmployersSuccessResponse, SendApplicationPetsSuccessResponse, SendApplicationSuccessResponse, SendApplicationVehiclesSuccessResponse, UpdateApplicationSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetCompanyApplicationsSuccessResponse
        try:
            instance.actual_instance = GetCompanyApplicationsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendApplicantGeneralDetailsSuccessResponse
        try:
            instance.actual_instance = SendApplicantGeneralDetailsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendApplicationSuccessResponse
        try:
            instance.actual_instance = SendApplicationSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendApplicationAddOnsSuccessResponse
        try:
            instance.actual_instance = SendApplicationAddOnsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendApplicationEmployersSuccessResponse
        try:
            instance.actual_instance = SendApplicationEmployersSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendApplicationPetsSuccessResponse
        try:
            instance.actual_instance = SendApplicationPetsSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendApplicationVehiclesSuccessResponse
        try:
            instance.actual_instance = SendApplicationVehiclesSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateApplicationSuccessResponse
        try:
            instance.actual_instance = UpdateApplicationSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OrgsV1ApplicationsPost200Response with oneOf schemas: GetCompanyApplicationsSuccessResponse, SendApplicantGeneralDetailsSuccessResponse, SendApplicationAddOnsSuccessResponse, SendApplicationEmployersSuccessResponse, SendApplicationPetsSuccessResponse, SendApplicationSuccessResponse, SendApplicationVehiclesSuccessResponse, UpdateApplicationSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OrgsV1ApplicationsPost200Response with oneOf schemas: GetCompanyApplicationsSuccessResponse, SendApplicantGeneralDetailsSuccessResponse, SendApplicationAddOnsSuccessResponse, SendApplicationEmployersSuccessResponse, SendApplicationPetsSuccessResponse, SendApplicationSuccessResponse, SendApplicationVehiclesSuccessResponse, UpdateApplicationSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetCompanyApplicationsSuccessResponse, SendApplicantGeneralDetailsSuccessResponse, SendApplicationAddOnsSuccessResponse, SendApplicationEmployersSuccessResponse, SendApplicationPetsSuccessResponse, SendApplicationSuccessResponse, SendApplicationVehiclesSuccessResponse, UpdateApplicationSuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



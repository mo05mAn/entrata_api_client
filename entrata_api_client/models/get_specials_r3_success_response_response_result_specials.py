# coding: utf-8

"""
    Entrata APIs

    The Entrata API retrieves property data for marketing, leasing, residents, and more. Our API is organized around RPC protocols, and authenticates users by API key. Additionally, users can only access the API when companies explicitly provide access per user.  ### Time Zones Please note that unless stated otherwise, all dates and times used in the API are assumed to be in Mountain Time (MST or MDT).  ### Languages The `Accept-Language` request header parameter can be used to request that the values returned in the response be translated into the language and locale that is desired, provided that the language is active and enabled for the client. Possible values are: - English: en-US, en-CA, en-GB, en-IE - Spanish: es-MX, es-PE, es-US, es-ES, es-CL   - Hindi: hi-IN - Chinese: zh-CN - French: fr-FR  ### Throttling To maintain a reliable API, Entrata implements rate limits, which restrict the number of API calls you can make within a minute, an hour, and a day. Each API service has its own set of limits, which are detailed in its response headers. Before building your integration, please familiarize yourself with these limits to avoid issues as you scale your usage with more properties or larger clients. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.get_specials_r3_success_response_response_result_specials_floorplan_specials import GetSpecialsR3SuccessResponseResponseResultSpecialsFloorplanSpecials
from openapi_client.models.get_specials_r3_success_response_response_result_specials_property_specials import GetSpecialsR3SuccessResponseResponseResultSpecialsPropertySpecials
from openapi_client.models.get_specials_r3_success_response_response_result_specials_unit_space_specials import GetSpecialsR3SuccessResponseResponseResultSpecialsUnitSpaceSpecials
from openapi_client.models.get_specials_r3_success_response_response_result_specials_unit_type_specials import GetSpecialsR3SuccessResponseResponseResultSpecialsUnitTypeSpecials
from typing import Optional, Set
from typing_extensions import Self

class GetSpecialsR3SuccessResponseResponseResultSpecials(BaseModel):
    """
    GetSpecialsR3SuccessResponseResponseResultSpecials
    """ # noqa: E501
    property_id: StrictInt = Field(description="The unique identifier for the property.", alias="propertyId")
    organization_name: StrictStr = Field(description="The name of the organization associated with the property.", alias="organizationName")
    marketing_name: StrictStr = Field(description="The marketing name of the property.", alias="marketingName")
    legal_name: StrictStr = Field(description="The legal name of the property.", alias="legalName")
    property_specials: GetSpecialsR3SuccessResponseResponseResultSpecialsPropertySpecials = Field(alias="propertySpecials")
    floorplan_specials: GetSpecialsR3SuccessResponseResponseResultSpecialsFloorplanSpecials = Field(alias="floorplanSpecials")
    unit_type_specials: GetSpecialsR3SuccessResponseResponseResultSpecialsUnitTypeSpecials = Field(alias="unitTypeSpecials")
    unit_space_specials: GetSpecialsR3SuccessResponseResponseResultSpecialsUnitSpaceSpecials = Field(alias="unitSpaceSpecials")
    __properties: ClassVar[List[str]] = ["propertyId", "organizationName", "marketingName", "legalName", "propertySpecials", "floorplanSpecials", "unitTypeSpecials", "unitSpaceSpecials"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSpecialsR3SuccessResponseResponseResultSpecials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of property_specials
        if self.property_specials:
            _dict['propertySpecials'] = self.property_specials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floorplan_specials
        if self.floorplan_specials:
            _dict['floorplanSpecials'] = self.floorplan_specials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_type_specials
        if self.unit_type_specials:
            _dict['unitTypeSpecials'] = self.unit_type_specials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_space_specials
        if self.unit_space_specials:
            _dict['unitSpaceSpecials'] = self.unit_space_specials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSpecialsR3SuccessResponseResponseResultSpecials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyId": obj.get("propertyId"),
            "organizationName": obj.get("organizationName"),
            "marketingName": obj.get("marketingName"),
            "legalName": obj.get("legalName"),
            "propertySpecials": GetSpecialsR3SuccessResponseResponseResultSpecialsPropertySpecials.from_dict(obj["propertySpecials"]) if obj.get("propertySpecials") is not None else None,
            "floorplanSpecials": GetSpecialsR3SuccessResponseResponseResultSpecialsFloorplanSpecials.from_dict(obj["floorplanSpecials"]) if obj.get("floorplanSpecials") is not None else None,
            "unitTypeSpecials": GetSpecialsR3SuccessResponseResponseResultSpecialsUnitTypeSpecials.from_dict(obj["unitTypeSpecials"]) if obj.get("unitTypeSpecials") is not None else None,
            "unitSpaceSpecials": GetSpecialsR3SuccessResponseResponseResultSpecialsUnitSpaceSpecials.from_dict(obj["unitSpaceSpecials"]) if obj.get("unitSpaceSpecials") is not None else None
        })
        return _obj


